/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-03-20 13:08:30.345788
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
eerot[0]=((((((((0.00158999799016431)*(((((0.999999680000154)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((0.00079999772152653)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-1.017597736812e-9)*(IKcos(j[0]))))+(((-1.271997171015e-6)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((0.00079999772152653)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((0.00158999799016431)*(((((-0.000799999744000123)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((0.00079999772152653)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((0.00079999772152653)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-1.017597736812e-9)*(IKcos(j[0]))))+(((-1.271997171015e-6)*(IKsin(j[0]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.00158999799016431)*(((((0.999999680000154)*(((((-0.999997151908163)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((1.271997171015e-6)*(IKcos(j[0]))))+(((0.00158999646376875)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((-0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-0.999997151908163)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((0.00158999547153398)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((0.00158999799016431)*(((((-0.000799999744000123)*(((((0.00158999697256753)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.999997151908163)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.999997151908163)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((-1.271997171015e-6)*(IKcos(j[0]))))+(((-0.00158999646376875)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((0.00158999799016431)*(((((-2.52809279973903e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-2.52809279973903e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.00158999799016431)*(((((0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.00158999799016431)*(((((-0.999998735953206)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735953206)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735953206)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735953206)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.00158999799016431)*(((((-2.52809279973903e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-2.52809279973903e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999799016431)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999799016431)*(((((0.999998415953764)*(IKsin(j[0]))))+(((0.000799998732763011)*(IKcos(j[0]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((-0.999998735952397)*(((((0.000799999744000123)*(((((0.00079999772152653)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-1.017597736812e-9)*(IKcos(j[0]))))+(((-1.271997171015e-6)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((0.00079999772152653)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.999998735952397)*(((((0.000799999744000123)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.999997151908163)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((0.00158999697256753)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.999997151908163)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-1.271997171015e-6)*(IKcos(j[0]))))+(((-0.00158999646376875)*(IKsin(j[0]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.999998735952397)*(((((-0.999999680000154)*(((((-0.999997151908163)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((0.00158999547153398)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.999997151908163)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((1.271997171015e-6)*(IKcos(j[0]))))+(((0.00158999646376875)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.999998735952397)*(((((-0.999999680000154)*(((((-1.017597736812e-9)*(IKcos(j[0]))))+(((-1.271997171015e-6)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((0.00079999772152653)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((0.00079999772152653)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((-0.999998735952397)*(((((-2.52809279973903e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-2.52809279973903e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735952397)*(((((0.999998415953764)*(IKsin(j[0]))))+(((0.000799998732763011)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((-0.999998735952397)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735952397)*(((((-2.52809279973903e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-2.52809279973903e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735952397)*(((((0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735952397)*(((((-0.999998735953206)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735953206)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735953206)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735953206)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5])))));
eerot[1]=((((((((-0.999998735952397)*(((((-0.000799999744000123)*(((((0.00158999697256753)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.999997151908163)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.999997151908163)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((-1.271997171015e-6)*(IKcos(j[0]))))+(((-0.00158999646376875)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((-0.999998735952397)*(((((0.999999680000154)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((0.00079999772152653)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-1.017597736812e-9)*(IKcos(j[0]))))+(((-1.271997171015e-6)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((0.00079999772152653)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-0.999998735952397)*(((((-0.000799999744000123)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((0.00079999772152653)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((0.00079999772152653)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-1.017597736812e-9)*(IKcos(j[0]))))+(((-1.271997171015e-6)*(IKsin(j[0]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-0.999998735952397)*(((((0.999999680000154)*(((((-0.999997151908163)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((1.271997171015e-6)*(IKcos(j[0]))))+(((0.00158999646376875)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((-0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-0.999997151908163)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((0.00158999547153398)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((-0.999998735952397)*(((((-2.52809279973903e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-2.52809279973903e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735952397)*(((((0.999998415953764)*(IKsin(j[0]))))+(((0.000799998732763011)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((-0.999998735952397)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735952397)*(((((-2.52809279973903e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-2.52809279973903e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735952397)*(((((0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735952397)*(((((-0.999998735953206)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735953206)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735953206)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735953206)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((((((-0.00158999799016431)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999799016431)*(((((-2.52809279973903e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-2.52809279973903e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999799016431)*(((((0.999998415953764)*(IKsin(j[0]))))+(((0.000799998732763011)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((-0.00158999799016431)*(((((-0.999998735953206)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735953206)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735953206)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735953206)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.00158999799016431)*(((((-2.52809279973903e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-2.52809279973903e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999799016431)*(((((0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[5]))))+(((((((-0.00158999799016431)*(((((0.000799999744000123)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.999997151908163)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((0.00158999697256753)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.999997151908163)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-1.271997171015e-6)*(IKcos(j[0]))))+(((-0.00158999646376875)*(IKsin(j[0]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((-0.00158999799016431)*(((((0.000799999744000123)*(((((0.00079999772152653)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-1.017597736812e-9)*(IKcos(j[0]))))+(((-1.271997171015e-6)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((0.00079999772152653)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.00158999799016431)*(((((-0.999999680000154)*(((((-1.017597736812e-9)*(IKcos(j[0]))))+(((-1.271997171015e-6)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((0.00079999772152653)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((0.00079999772152653)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((-0.00158999799016431)*(((((-0.999999680000154)*(((((-0.999997151908163)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((0.00158999547153398)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.999997151908163)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((1.271997171015e-6)*(IKcos(j[0]))))+(((0.00158999646376875)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5])))));
eerot[2]=((((((((-0.000799999744000123)*(((((0.00158999547153398)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999997151908163)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((-0.999997151908163)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((1.271997171015e-6)*(IKcos(j[0]))))+(((0.00158999646376875)*(IKsin(j[0]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((-0.000799999744000123)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((0.00079999772152653)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((0.00079999772152653)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-1.017597736812e-9)*(IKcos(j[0]))))+(((-1.271997171015e-6)*(IKsin(j[0]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-0.999999680000154)*(((((0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.999997151908163)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-1.271997171015e-6)*(IKcos(j[0]))))+(((-0.00158999646376875)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((0.00158999697256753)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.999997151908163)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((-0.999999680000154)*(((((-1.017597736812e-9)*(IKcos(j[0]))))+(((-1.271997171015e-6)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((0.00079999772152653)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((0.00079999772152653)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4])))));
eetrans[0]=((((((((-0.000483759694504975)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.000483759694504975)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((((((-1.83151252453979e-16)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.83151252453979e-16)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.83151252453979e-16)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.83151252453979e-16)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((1.83151079550395e-16)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((1.83151079550395e-16)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.15189612557249e-13)*(IKcos(j[0]))))+(((1.43987015696561e-10)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((((((1.83151079550395e-16)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((1.83151079550395e-16)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((1.43987061772399e-10)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.43987061772399e-10)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.43987061772399e-10)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.43987061772399e-10)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((1.46520955076485e-19)*(IKcos(j[0]))))+(((1.83151193845607e-16)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((((((-1.15189358207796e-13)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.15189358207796e-13)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.15189358207796e-13)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.15189358207796e-13)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((-3.99999838848103e-5)*(((((-0.999997151908163)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((0.00158999547153398)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((-0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-3.99999838848103e-5)*(((((1.271997171015e-6)*(IKcos(j[0]))))+(((0.00158999646376875)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-3.99999838848103e-5)*(((((-0.999997151908163)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-3.99999838848103e-5)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((0.303999617864764)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.303999617864764)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((((((2.86173561797492e-10)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((2.86173561797492e-10)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((2.86173561797492e-10)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((2.86173561797492e-10)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.79983372199681e-7)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.79983372199681e-7)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-1.79983372199681e-7)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.79983372199681e-7)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-1.43987015696561e-10)*(IKsin(j[0]))))+(((-1.15189612557249e-13)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((((((-1.43987061772399e-10)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.43987061772399e-10)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.43987061772399e-10)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.43987061772399e-10)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-2.86173831959343e-10)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-2.86173831959343e-10)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-2.86173831959343e-10)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-2.86173831959343e-10)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((2.8617374038376e-10)*(IKsin(j[0]))))+(((2.28938992307008e-13)*(IKcos(j[0]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((-0.0499999798560129)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.0499999798560129)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.0499999798560129)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.0499999798560129)*(((((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((0.00079999772152653)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.0499999798560129)*(((((0.00079999772152653)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((-1.017597736812e-9)*(IKcos(j[0]))))+(((-1.271997171015e-6)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.0499999798560129)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((((((0.303999617864764)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.303999617864764)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.00032648989552325)*(IKcos(j[0]))))+(((2.611919164186e-7)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((0.000327999791523316)*(IKsin(j[0]))))+(((-0.409999739404145)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.0499999798560129)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((-0.0499999798560129)*(((((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.0499999798560129)*(((((-1.271997171015e-6)*(IKcos(j[0]))))+(((-0.00158999646376875)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.0499999798560129)*(((((-0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((-0.00158999547153398)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.0499999798560129)*(((((0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.999997151908163)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0499999798560129)*(((((0.00158999697256753)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.0499999798560129)*(((((0.999997151908163)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.999997151908163)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-8.87299206400381e-5)*(IKcos(j[0]))))+(((((((-3.99999838848103e-5)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-3.99999838848103e-5)*(((((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((0.00079999772152653)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-3.99999838848103e-5)*(((((0.00079999772152653)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.00079999772152653)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((-1.017597736812e-9)*(IKcos(j[0]))))+(((-1.271997171015e-6)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-3.99999838848103e-5)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((-0.000483759694504975)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.000483759694504975)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.109999960800048)*(IKsin(j[0]))))+(((((((((((-1.43986697759744e-10)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.43986697759744e-10)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-1.15189649417919e-13)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.15189649417919e-13)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.15189649417919e-13)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.15189649417919e-13)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((2.28938849437994e-13)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((2.28938849437994e-13)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-1.43986697759744e-10)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.43986697759744e-10)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-2.28939065567474e-13)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-2.28939065567474e-13)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-2.28939065567474e-13)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-2.28939065567474e-13)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((2.28938849437994e-13)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((2.28938849437994e-13)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-1.15189612557249e-13)*(IKsin(j[0]))))+(((-9.2151690045799e-17)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((((((2.28938992307008e-13)*(IKsin(j[0]))))+(((1.83151193845607e-16)*(IKcos(j[0]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((((((1.43986697759744e-10)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.43986697759744e-10)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-1.79983827215498e-7)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.79983827215498e-7)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.79983827215498e-7)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.79983827215498e-7)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-2.28938992307008e-13)*(IKsin(j[0]))))+(((-1.83151193845607e-16)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((((((-1.79983769620701e-7)*(IKsin(j[0]))))+(((-1.43987015696561e-10)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((((((1.43986697759744e-10)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.43986697759744e-10)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-2.28938849437994e-13)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-2.28938849437994e-13)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-2.28938849437994e-13)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-2.28938849437994e-13)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((2.28939065567474e-13)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((2.28939065567474e-13)*(((((-0.00158999799016431)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999799016431)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((2.28939065567474e-13)*(((((-0.999998735952397)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((2.28939065567474e-13)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4])))));
eerot[3]=((((((((-0.999998735952397)*(((((-2.52809279973903e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-2.52809279973903e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735952397)*(((((0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735952397)*(((((-0.999998735953206)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735953206)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735953206)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735953206)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999998735952397)*(((((0.00158999547153398)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735952397)*(((((-2.52809279973903e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-2.52809279973903e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735952397)*(((((0.000799998732763011)*(IKsin(j[0]))))+(((-0.999998415953764)*(IKcos(j[0]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((0.00158999799016431)*(((((-0.999998735953206)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735953206)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735953206)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735953206)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.00158999799016431)*(((((-2.52809279973903e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-2.52809279973903e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.00158999799016431)*(((((0.000799998732763011)*(IKsin(j[0]))))+(((-0.999998415953764)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((0.00158999799016431)*(((((0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.00158999799016431)*(((((0.00158999547153398)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.00158999799016431)*(((((-2.52809279973903e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-2.52809279973903e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[5]))))+(((((((-0.999998735952397)*(((((0.000799999744000123)*(((((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.27199637722718e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((-1.017597736812e-9)*(IKsin(j[0]))))+(((1.271997171015e-6)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((0.00079999772152653)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.999998735952397)*(((((0.000799999744000123)*(((((-0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.999997151908163)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((-1.271997171015e-6)*(IKsin(j[0]))))+(((0.00158999646376875)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.00158999697256753)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.999997151908163)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-0.999998735952397)*(((((-0.999999680000154)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((-0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999697256753)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999997151908163)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00158999547153398)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999646376875)*(IKcos(j[0]))))+(((1.271997171015e-6)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999997151908163)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.999998735952397)*(((((-0.999999680000154)*(((((0.00079999772152653)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.27199637722718e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-1.017597736812e-9)*(IKsin(j[0]))))+(((1.271997171015e-6)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((0.00158999799016431)*(((((0.999999680000154)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.27199637722718e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((-1.017597736812e-9)*(IKsin(j[0]))))+(((1.271997171015e-6)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((0.00079999772152653)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.00158999799016431)*(((((-0.000799999744000123)*(((((0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.999997151908163)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.00158999697256753)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.999997151908163)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-1.271997171015e-6)*(IKsin(j[0]))))+(((0.00158999646376875)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((-0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((0.00158999799016431)*(((((0.999999680000154)*(((((-0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999997151908163)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999697256753)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((-0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999997151908163)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-0.00158999646376875)*(IKcos(j[0]))))+(((1.271997171015e-6)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00158999547153398)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((0.00158999799016431)*(((((-0.000799999744000123)*(((((0.00079999772152653)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.27199637722718e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-1.017597736812e-9)*(IKsin(j[0]))))+(((1.271997171015e-6)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5])))));
eerot[4]=((((((((-0.999998735952397)*(((((-2.52809279973903e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-2.52809279973903e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735952397)*(((((0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735952397)*(((((-0.999998735953206)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735953206)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735953206)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735953206)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999998735952397)*(((((0.00158999547153398)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735952397)*(((((-2.52809279973903e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-2.52809279973903e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735952397)*(((((0.000799998732763011)*(IKsin(j[0]))))+(((-0.999998415953764)*(IKcos(j[0]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((-0.999998735952397)*(((((0.999999680000154)*(((((-0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999997151908163)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999697256753)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((-0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999997151908163)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-0.00158999646376875)*(IKcos(j[0]))))+(((1.271997171015e-6)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00158999547153398)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((-0.999998735952397)*(((((-0.000799999744000123)*(((((0.00079999772152653)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.27199637722718e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-1.017597736812e-9)*(IKsin(j[0]))))+(((1.271997171015e-6)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((-0.999998735952397)*(((((-0.000799999744000123)*(((((0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.999997151908163)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.00158999697256753)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.999997151908163)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-1.271997171015e-6)*(IKsin(j[0]))))+(((0.00158999646376875)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((-0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-0.999998735952397)*(((((0.999999680000154)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.27199637722718e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((-1.017597736812e-9)*(IKsin(j[0]))))+(((1.271997171015e-6)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((0.00079999772152653)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((-0.00158999799016431)*(((((0.000799998732763011)*(IKsin(j[0]))))+(((-0.999998415953764)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((-0.00158999799016431)*(((((-0.999998735953206)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735953206)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735953206)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735953206)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.00158999799016431)*(((((0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999799016431)*(((((0.00158999547153398)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999799016431)*(((((-2.52809279973903e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-2.52809279973903e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999799016431)*(((((-2.52809279973903e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-2.52809279973903e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[5]))))+(((((((-0.00158999799016431)*(((((0.000799999744000123)*(((((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.27199637722718e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((-1.017597736812e-9)*(IKsin(j[0]))))+(((1.271997171015e-6)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((0.00079999772152653)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.00158999799016431)*(((((0.000799999744000123)*(((((-0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.999997151908163)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((-1.271997171015e-6)*(IKsin(j[0]))))+(((0.00158999646376875)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.00158999697256753)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.999997151908163)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-0.00158999799016431)*(((((-0.999999680000154)*(((((0.00079999772152653)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.27199637722718e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-1.017597736812e-9)*(IKsin(j[0]))))+(((1.271997171015e-6)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.00158999799016431)*(((((-0.999999680000154)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((-0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999697256753)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999997151908163)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00158999547153398)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999646376875)*(IKcos(j[0]))))+(((1.271997171015e-6)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999997151908163)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5])))));
eerot[5]=((((((((-0.000799999744000123)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((-0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999697256753)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999997151908163)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999646376875)*(IKcos(j[0]))))+(((1.271997171015e-6)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00158999547153398)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999997151908163)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((-0.999999680000154)*(((((0.00079999772152653)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.27199637722718e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-1.017597736812e-9)*(IKsin(j[0]))))+(((1.271997171015e-6)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((-0.000799999744000123)*(((((0.00079999772152653)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.27199637722718e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-1.017597736812e-9)*(IKsin(j[0]))))+(((1.271997171015e-6)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((-0.999999680000154)*(((((-1.271997171015e-6)*(IKsin(j[0]))))+(((0.00158999646376875)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.999997151908163)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.00158999697256753)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.999997151908163)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4])))));
eetrans[1]=((((((((-0.0499999798560129)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.0499999798560129)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0499999798560129)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.0499999798560129)*(((((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.0499999798560129)*(((((-1.017597736812e-9)*(IKsin(j[0]))))+(((1.271997171015e-6)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((-0.0499999798560129)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.27199637722718e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((0.00079999772152653)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((((((((((2.28938849437994e-13)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((2.28938849437994e-13)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((2.28938849437994e-13)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((2.28938849437994e-13)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-1.43986697759744e-10)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.43986697759744e-10)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.83151193845607e-16)*(IKsin(j[0]))))+(((-2.28938992307008e-13)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((((((1.15189612557249e-13)*(IKcos(j[0]))))+(((-9.2151690045799e-17)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((((((-2.28939065567474e-13)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-2.28939065567474e-13)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-2.28939065567474e-13)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-2.28939065567474e-13)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-1.15189649417919e-13)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.15189649417919e-13)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.15189649417919e-13)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.15189649417919e-13)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-1.43986697759744e-10)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-1.43986697759744e-10)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((-0.0499999798560129)*(((((-0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.0499999798560129)*(((((-1.271997171015e-6)*(IKsin(j[0]))))+(((0.00158999646376875)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((-0.0499999798560129)*(((((6.39999590400262e-7)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-0.0499999798560129)*(((((-0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00158999547153398)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.0499999798560129)*(((((0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.999997151908163)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0499999798560129)*(((((0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.999997151908163)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.00158999697256753)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999697256753)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((0.303999617864764)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.303999617864764)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.303999617864764)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.303999617864764)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.00032648989552325)*(IKsin(j[0]))))+(((-2.611919164186e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.109999960800048)*(IKcos(j[0]))))+(((((((-0.000327999791523316)*(IKcos(j[0]))))+(((-0.409999739404145)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((((((2.86173561797492e-10)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((2.86173561797492e-10)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((2.86173561797492e-10)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((2.86173561797492e-10)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.79983372199681e-7)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.79983372199681e-7)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-1.79983372199681e-7)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.79983372199681e-7)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-2.86173831959343e-10)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-2.86173831959343e-10)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-2.86173831959343e-10)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-2.86173831959343e-10)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((2.28938992307008e-13)*(IKsin(j[0]))))+(((-2.8617374038376e-10)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((((((-1.43987061772399e-10)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.43987061772399e-10)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.43987061772399e-10)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.43987061772399e-10)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((1.43987015696561e-10)*(IKcos(j[0]))))+(((-1.15189612557249e-13)*(IKsin(j[0]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-8.87299206400381e-5)*(IKsin(j[0]))))+(((((((-0.000483759694504975)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.000483759694504975)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-3.99999838848103e-5)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((0.99999936000041)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-3.99999838848103e-5)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.27199637722718e-6)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((-0.999999680000154)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-3.99999838848103e-5)*(((((-1.017597736812e-9)*(IKsin(j[0]))))+(((1.271997171015e-6)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((-3.99999838848103e-5)*(((((0.00079999772152653)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00079999772152653)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((-1.27199637722718e-6)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.27199637722718e-6)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((1.27199757805403e-6)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.27199757805403e-6)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.27199757805403e-6)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((-0.000483759694504975)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000483759694504975)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((((((-2.28938849437994e-13)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-2.28938849437994e-13)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-1.83151193845607e-16)*(IKsin(j[0]))))+(((2.28938992307008e-13)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((((((1.43986697759744e-10)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((1.43986697759744e-10)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((2.28939065567474e-13)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((2.28939065567474e-13)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((2.28939065567474e-13)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((2.28939065567474e-13)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-1.79983827215498e-7)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.79983827215498e-7)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.79983827215498e-7)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.79983827215498e-7)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((1.79983769620701e-7)*(IKcos(j[0]))))+(((-1.43987015696561e-10)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((((((-2.28938849437994e-13)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-2.28938849437994e-13)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.43986697759744e-10)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((1.43986697759744e-10)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((-3.99999838848103e-5)*(((((-0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.999997151908163)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((-0.000799999744000123)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-3.99999838848103e-5)*(((((-6.39999590400262e-7)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((-3.99999838848103e-5)*(((((-0.00158999697256753)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999697256753)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999697256753)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-3.99999838848103e-5)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.00158999547153398)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((-0.999997151908163)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999997151908163)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((-0.00158999646376875)*(IKcos(j[0]))))+(((1.271997171015e-6)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-3.99999838848103e-5)*(((((0.00158999547153398)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00158999547153398)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((((((-1.83151193845607e-16)*(IKcos(j[0]))))+(((1.46520955076485e-19)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((((((1.15189612557249e-13)*(IKsin(j[0]))))+(((-1.43987015696561e-10)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((((((1.83151079550395e-16)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((1.83151079550395e-16)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.83151079550395e-16)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((1.83151079550395e-16)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-1.15189358207796e-13)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-1.15189358207796e-13)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.43987061772399e-10)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.43987061772399e-10)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.43987061772399e-10)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.43987061772399e-10)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-1.15189358207796e-13)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.15189358207796e-13)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.83151252453979e-16)*(((((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((0.99999936000041)*(IKsin(j[0]))))+(((0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.83151252453979e-16)*(((((-0.999998735952397)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.83151252453979e-16)*(((((-0.00158999799016431)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00158999799016431)*(((((6.39999590400262e-7)*(IKcos(j[0]))))+(((0.000799999488000328)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.83151252453979e-16)*(((((-0.999998735952397)*(((((-0.000799999488000328)*(IKsin(j[0]))))+(((-6.39999590400262e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.999998735952397)*(((((-0.99999936000041)*(IKsin(j[0]))))+(((-0.000799999488000328)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4])))));
eerot[6]=((((((((-0.999998735952397)*(((((((((-0.999997151908163)*(IKsin(j[1]))))+(((0.00079999772152653)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.999997151908163)*(IKcos(j[1]))))+(((0.00079999772152653)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.27199637722718e-6)*(IKcos(j[1]))))+(((0.00158999547153398)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.00158999547153398)*(IKcos(j[1]))))+(((1.27199637722718e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999998735952397)*(((((-2.52809199074972e-6)*(IKcos(j[1]))))+(((-2.02247359259977e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735952397)*(((((2.52809199074972e-6)*(IKsin(j[1]))))+(((-2.02247359259977e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735952397)*(((((1.27199597018854e-6)*(IKsin(j[1]))))+(((0.00158999496273567)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735952397)*(((((0.00158999496273567)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[5]))))+(((((((0.00158999799016431)*(((((((((-0.999997151908163)*(IKsin(j[1]))))+(((0.00079999772152653)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.999997151908163)*(IKcos(j[1]))))+(((0.00079999772152653)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.27199637722718e-6)*(IKcos(j[1]))))+(((0.00158999547153398)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.00158999547153398)*(IKcos(j[1]))))+(((1.27199637722718e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.00158999799016431)*(((((1.27199597018854e-6)*(IKsin(j[1]))))+(((0.00158999496273567)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999799016431)*(((((2.52809199074972e-6)*(IKsin(j[1]))))+(((-2.02247359259977e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00158999799016431)*(((((-2.52809199074972e-6)*(IKcos(j[1]))))+(((-2.02247359259977e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.00158999799016431)*(((((0.00158999496273567)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[5]))))+(((((((-0.999998735952397)*(((((0.000799999744000123)*(((((0.000799997465527382)*(IKcos(j[1]))))+(((6.39997972421906e-7)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((1.27199597018854e-6)*(IKsin(j[1]))))+(((-1.01759677615083e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((((((1.61797835632683e-12)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.01759645052002e-9)*(IKsin(j[1]))))+(((-1.27199556315002e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-2.02247294540854e-9)*(IKcos(j[1]))))+(((-1.61797835632683e-12)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.27199556315002e-6)*(IKsin(j[1]))))+(((-1.01759645052002e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((-1.01759677615083e-9)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((0.000799997465527382)*(IKsin(j[1]))))+(((-6.39997972421906e-7)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.999998735952397)*(((((0.000799999744000123)*(((((0.000799997465527382)*(IKsin(j[1]))))+(((0.999996831909228)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((((((-0.00158999445393753)*(IKcos(j[1]))))+(((-1.27199556315002e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((2.02247294540854e-9)*(IKcos(j[1]))))+(((-2.52809118176067e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-2.52809118176067e-6)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-1.27199556315002e-6)*(IKcos(j[1]))))+(((0.00158999445393753)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((-0.000799997465527382)*(IKcos(j[1]))))+(((0.999996831909228)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-1.27199597018854e-6)*(IKsin(j[1]))))+(((-0.00158999496273567)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((0.00158999496273567)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-0.999998735952397)*(((((-0.999999680000154)*(((((0.000799997465527382)*(IKcos(j[1]))))+(((6.39997972421906e-7)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-1.01759677615083e-9)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((((((1.61797835632683e-12)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.01759645052002e-9)*(IKsin(j[1]))))+(((-1.27199556315002e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-2.02247294540854e-9)*(IKcos(j[1]))))+(((-1.61797835632683e-12)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.27199556315002e-6)*(IKsin(j[1]))))+(((-1.01759645052002e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((1.27199597018854e-6)*(IKsin(j[1]))))+(((-1.01759677615083e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((0.000799997465527382)*(IKsin(j[1]))))+(((-6.39997972421906e-7)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((-0.999998735952397)*(((((-0.999999680000154)*(((((-1.0)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.999996831909228)*(IKcos(j[1]))))+(((-0.000799997465527382)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((0.00158999496273567)*(IKcos(j[1]))))+(((1.27199597018854e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((0.000799997465527382)*(IKcos(j[1]))))+(((-0.999996831909228)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-1.0)*(((((-0.00158999445393753)*(IKcos(j[1]))))+(((-1.27199556315002e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-1.27199556315002e-6)*(IKcos(j[1]))))+(((0.00158999445393753)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((2.02247294540854e-9)*(IKcos(j[1]))))+(((-2.52809118176067e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-2.52809118176067e-6)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((1.27199597018854e-6)*(IKcos(j[1]))))+(((-0.00158999496273567)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((0.00158999799016431)*(((((0.999999680000154)*(((((-1.0)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((-0.999996831909228)*(IKcos(j[1]))))+(((-0.000799997465527382)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((0.000799997465527382)*(IKcos(j[1]))))+(((-0.999996831909228)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((1.27199597018854e-6)*(IKcos(j[1]))))+(((-0.00158999496273567)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((0.00158999496273567)*(IKcos(j[1]))))+(((1.27199597018854e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-1.0)*(((((-0.00158999445393753)*(IKcos(j[1]))))+(((-1.27199556315002e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-1.27199556315002e-6)*(IKcos(j[1]))))+(((0.00158999445393753)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((2.02247294540854e-9)*(IKcos(j[1]))))+(((-2.52809118176067e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-2.52809118176067e-6)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.00158999799016431)*(((((-0.000799999744000123)*(((((0.000799997465527382)*(IKsin(j[1]))))+(((0.999996831909228)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.000799997465527382)*(IKcos(j[1]))))+(((0.999996831909228)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((0.00158999496273567)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((((((-0.00158999445393753)*(IKcos(j[1]))))+(((-1.27199556315002e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((2.02247294540854e-9)*(IKcos(j[1]))))+(((-2.52809118176067e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-2.52809118176067e-6)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-1.27199556315002e-6)*(IKcos(j[1]))))+(((0.00158999445393753)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-1.27199597018854e-6)*(IKsin(j[1]))))+(((-0.00158999496273567)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((0.00158999799016431)*(((((-0.000799999744000123)*(((((1.27199597018854e-6)*(IKsin(j[1]))))+(((-1.01759677615083e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((0.000799997465527382)*(IKcos(j[1]))))+(((6.39997972421906e-7)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((((((1.61797835632683e-12)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.01759645052002e-9)*(IKsin(j[1]))))+(((-1.27199556315002e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-2.02247294540854e-9)*(IKcos(j[1]))))+(((-1.61797835632683e-12)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.27199556315002e-6)*(IKsin(j[1]))))+(((-1.01759645052002e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((0.000799997465527382)*(IKsin(j[1]))))+(((-6.39997972421906e-7)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-1.01759677615083e-9)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((0.00158999799016431)*(((((0.999999680000154)*(((((((((1.61797835632683e-12)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.01759645052002e-9)*(IKsin(j[1]))))+(((-1.27199556315002e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-2.02247294540854e-9)*(IKcos(j[1]))))+(((-1.61797835632683e-12)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.27199556315002e-6)*(IKsin(j[1]))))+(((-1.01759645052002e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((0.000799997465527382)*(IKsin(j[1]))))+(((-6.39997972421906e-7)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-1.01759677615083e-9)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((1.27199597018854e-6)*(IKsin(j[1]))))+(((-1.01759677615083e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((0.000799997465527382)*(IKcos(j[1]))))+(((6.39997972421906e-7)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))))*(IKsin(j[5])))));
eerot[7]=((((((((-0.999998735952397)*(((((((((-0.999997151908163)*(IKsin(j[1]))))+(((0.00079999772152653)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.999997151908163)*(IKcos(j[1]))))+(((0.00079999772152653)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.27199637722718e-6)*(IKcos(j[1]))))+(((0.00158999547153398)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.00158999547153398)*(IKcos(j[1]))))+(((1.27199637722718e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999998735952397)*(((((-2.52809199074972e-6)*(IKcos(j[1]))))+(((-2.02247359259977e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999998735952397)*(((((2.52809199074972e-6)*(IKsin(j[1]))))+(((-2.02247359259977e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735952397)*(((((1.27199597018854e-6)*(IKsin(j[1]))))+(((0.00158999496273567)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999998735952397)*(((((0.00158999496273567)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[5]))))+(((((((-0.00158999799016431)*(((((0.00158999496273567)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.00158999799016431)*(((((1.27199597018854e-6)*(IKsin(j[1]))))+(((0.00158999496273567)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999799016431)*(((((2.52809199074972e-6)*(IKsin(j[1]))))+(((-2.02247359259977e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.00158999799016431)*(((((((((-0.999997151908163)*(IKsin(j[1]))))+(((0.00079999772152653)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.999997151908163)*(IKcos(j[1]))))+(((0.00079999772152653)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.27199637722718e-6)*(IKcos(j[1]))))+(((0.00158999547153398)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.00158999547153398)*(IKcos(j[1]))))+(((1.27199637722718e-6)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.00158999799016431)*(((((-2.52809199074972e-6)*(IKcos(j[1]))))+(((-2.02247359259977e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[5]))))+(((((((-0.999998735952397)*(((((0.999999680000154)*(((((-1.0)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((-0.999996831909228)*(IKcos(j[1]))))+(((-0.000799997465527382)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((0.000799997465527382)*(IKcos(j[1]))))+(((-0.999996831909228)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((1.27199597018854e-6)*(IKcos(j[1]))))+(((-0.00158999496273567)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((0.00158999496273567)*(IKcos(j[1]))))+(((1.27199597018854e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-1.0)*(((((-0.00158999445393753)*(IKcos(j[1]))))+(((-1.27199556315002e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-1.27199556315002e-6)*(IKcos(j[1]))))+(((0.00158999445393753)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((2.02247294540854e-9)*(IKcos(j[1]))))+(((-2.52809118176067e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-2.52809118176067e-6)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.999998735952397)*(((((-0.000799999744000123)*(((((1.27199597018854e-6)*(IKsin(j[1]))))+(((-1.01759677615083e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((0.000799997465527382)*(IKcos(j[1]))))+(((6.39997972421906e-7)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((((((1.61797835632683e-12)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.01759645052002e-9)*(IKsin(j[1]))))+(((-1.27199556315002e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-2.02247294540854e-9)*(IKcos(j[1]))))+(((-1.61797835632683e-12)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.27199556315002e-6)*(IKsin(j[1]))))+(((-1.01759645052002e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((0.000799997465527382)*(IKsin(j[1]))))+(((-6.39997972421906e-7)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-1.01759677615083e-9)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.999998735952397)*(((((-0.000799999744000123)*(((((0.000799997465527382)*(IKsin(j[1]))))+(((0.999996831909228)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-0.000799997465527382)*(IKcos(j[1]))))+(((0.999996831909228)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((0.00158999496273567)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((((((-0.00158999445393753)*(IKcos(j[1]))))+(((-1.27199556315002e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((2.02247294540854e-9)*(IKcos(j[1]))))+(((-2.52809118176067e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-2.52809118176067e-6)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-1.27199556315002e-6)*(IKcos(j[1]))))+(((0.00158999445393753)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((-1.27199597018854e-6)*(IKsin(j[1]))))+(((-0.00158999496273567)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((-0.999998735952397)*(((((0.999999680000154)*(((((((((1.61797835632683e-12)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.01759645052002e-9)*(IKsin(j[1]))))+(((-1.27199556315002e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-2.02247294540854e-9)*(IKcos(j[1]))))+(((-1.61797835632683e-12)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.27199556315002e-6)*(IKsin(j[1]))))+(((-1.01759645052002e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.999999680000154)*(((((0.000799997465527382)*(IKsin(j[1]))))+(((-6.39997972421906e-7)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((-1.01759677615083e-9)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.999999680000154)*(((((1.27199597018854e-6)*(IKsin(j[1]))))+(((-1.01759677615083e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.999999680000154)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.999999680000154)*(((((0.000799997465527382)*(IKcos(j[1]))))+(((6.39997972421906e-7)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((-0.00158999799016431)*(((((-0.999999680000154)*(((((0.000799997465527382)*(IKcos(j[1]))))+(((6.39997972421906e-7)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-1.01759677615083e-9)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((((((1.61797835632683e-12)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.01759645052002e-9)*(IKsin(j[1]))))+(((-1.27199556315002e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-2.02247294540854e-9)*(IKcos(j[1]))))+(((-1.61797835632683e-12)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.27199556315002e-6)*(IKsin(j[1]))))+(((-1.01759645052002e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((1.27199597018854e-6)*(IKsin(j[1]))))+(((-1.01759677615083e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((0.000799997465527382)*(IKsin(j[1]))))+(((-6.39997972421906e-7)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((-0.00158999799016431)*(((((0.000799999744000123)*(((((0.000799997465527382)*(IKsin(j[1]))))+(((0.999996831909228)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((((((-0.00158999445393753)*(IKcos(j[1]))))+(((-1.27199556315002e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((2.02247294540854e-9)*(IKcos(j[1]))))+(((-2.52809118176067e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-2.52809118176067e-6)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-1.27199556315002e-6)*(IKcos(j[1]))))+(((0.00158999445393753)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((-0.000799997465527382)*(IKcos(j[1]))))+(((0.999996831909228)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((-1.27199597018854e-6)*(IKsin(j[1]))))+(((-0.00158999496273567)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((0.00158999496273567)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((-0.00158999799016431)*(((((-0.999999680000154)*(((((-1.0)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((-0.999996831909228)*(IKcos(j[1]))))+(((-0.000799997465527382)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((0.00158999496273567)*(IKcos(j[1]))))+(((1.27199597018854e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((0.000799997465527382)*(IKcos(j[1]))))+(((-0.999996831909228)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-1.0)*(((((-0.00158999445393753)*(IKcos(j[1]))))+(((-1.27199556315002e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-1.27199556315002e-6)*(IKcos(j[1]))))+(((0.00158999445393753)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((2.02247294540854e-9)*(IKcos(j[1]))))+(((-2.52809118176067e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-2.52809118176067e-6)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((1.27199597018854e-6)*(IKcos(j[1]))))+(((-0.00158999496273567)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((-0.00158999799016431)*(((((0.000799999744000123)*(((((0.000799997465527382)*(IKcos(j[1]))))+(((6.39997972421906e-7)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((1.27199597018854e-6)*(IKsin(j[1]))))+(((-1.01759677615083e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.000799999744000123)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.000799999744000123)*(((((((((1.61797835632683e-12)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.01759645052002e-9)*(IKsin(j[1]))))+(((-1.27199556315002e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-2.02247294540854e-9)*(IKcos(j[1]))))+(((-1.61797835632683e-12)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.27199556315002e-6)*(IKsin(j[1]))))+(((-1.01759645052002e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.000799999744000123)*(((((-1.01759677615083e-9)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.000799999744000123)*(((((0.000799997465527382)*(IKsin(j[1]))))+(((-6.39997972421906e-7)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5])))));
eerot[8]=((((((((-0.999999680000154)*(((((0.000799997465527382)*(IKcos(j[1]))))+(((6.39997972421906e-7)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-1.01759677615083e-9)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((((((1.61797835632683e-12)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.01759645052002e-9)*(IKsin(j[1]))))+(((-1.27199556315002e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-2.02247294540854e-9)*(IKcos(j[1]))))+(((-1.61797835632683e-12)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.27199556315002e-6)*(IKsin(j[1]))))+(((-1.01759645052002e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.999999680000154)*(((((1.27199597018854e-6)*(IKsin(j[1]))))+(((-1.01759677615083e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((0.000799997465527382)*(IKsin(j[1]))))+(((-6.39997972421906e-7)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((((((-0.000799999744000123)*(((((1.27199597018854e-6)*(IKsin(j[1]))))+(((-1.01759677615083e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((0.000799997465527382)*(IKcos(j[1]))))+(((6.39997972421906e-7)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((((((1.61797835632683e-12)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.01759645052002e-9)*(IKsin(j[1]))))+(((-1.27199556315002e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-2.02247294540854e-9)*(IKcos(j[1]))))+(((-1.61797835632683e-12)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.27199556315002e-6)*(IKsin(j[1]))))+(((-1.01759645052002e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((0.000799997465527382)*(IKsin(j[1]))))+(((-6.39997972421906e-7)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((-1.01759677615083e-9)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((-0.000799999744000123)*(((((-0.999996831909228)*(IKcos(j[1]))))+(((-0.000799997465527382)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-1.0)*(((((-0.00158999445393753)*(IKcos(j[1]))))+(((-1.27199556315002e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-1.27199556315002e-6)*(IKcos(j[1]))))+(((0.00158999445393753)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((2.02247294540854e-9)*(IKcos(j[1]))))+(((-2.52809118176067e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-2.52809118176067e-6)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.000799999744000123)*(((((1.27199597018854e-6)*(IKcos(j[1]))))+(((-0.00158999496273567)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.000799999744000123)*(((((-1.0)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.000799999744000123)*(((((0.00158999496273567)*(IKcos(j[1]))))+(((1.27199597018854e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.000799999744000123)*(((((0.000799997465527382)*(IKcos(j[1]))))+(((-0.999996831909228)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((((((-0.999999680000154)*(((((((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.999999680000154)*(((((0.00158999496273567)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((0.000799997465527382)*(IKsin(j[1]))))+(((0.999996831909228)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.999999680000154)*(((((-1.27199597018854e-6)*(IKsin(j[1]))))+(((-0.00158999496273567)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((-0.000799997465527382)*(IKcos(j[1]))))+(((0.999996831909228)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.999999680000154)*(((((((((-0.00158999445393753)*(IKcos(j[1]))))+(((-1.27199556315002e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((2.02247294540854e-9)*(IKcos(j[1]))))+(((-2.52809118176067e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-2.52809118176067e-6)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-1.27199556315002e-6)*(IKcos(j[1]))))+(((0.00158999445393753)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4])))));
eetrans[2]=((0.448)+(((-0.409999870604041)*(IKsin(j[1]))))+(((((((((((-1.43987107848251e-10)*(((((-1.01759645052002e-9)*(IKsin(j[1]))))+(((-1.27199556315002e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.43987107848251e-10)*(((((1.27199556315002e-6)*(IKsin(j[1]))))+(((-1.01759645052002e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.43987107848251e-10)*(((((-2.02247294540854e-9)*(IKcos(j[1]))))+(((-1.61797835632683e-12)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.43987107848251e-10)*(((((1.61797835632683e-12)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((1.83151020942078e-16)*(IKcos(j[1]))))+(((1.46520816753662e-19)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-9.21514570777749e-17)*(IKsin(j[1]))))+(((-1.15189321347219e-13)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-1.15189321347219e-13)*(IKsin(j[1]))))+(((9.21514570777749e-17)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-1.43987107848251e-10)*(((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.43987107848251e-10)*(((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.43987107848251e-10)*(((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.43987107848251e-10)*(((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((1.46520816753662e-19)*(IKcos(j[1]))))+(((-1.83151020942078e-16)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((-3.99999838848103e-5)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-3.99999838848103e-5)*(((((0.000799997465527382)*(IKsin(j[1]))))+(((-6.39997972421906e-7)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((-1.01759677615083e-9)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((1.27199597018854e-6)*(IKsin(j[1]))))+(((-1.01759677615083e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((((((1.61797835632683e-12)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.01759645052002e-9)*(IKsin(j[1]))))+(((-1.27199556315002e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-2.02247294540854e-9)*(IKcos(j[1]))))+(((-1.61797835632683e-12)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.27199556315002e-6)*(IKsin(j[1]))))+(((-1.01759645052002e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-3.99999838848103e-5)*(((((0.000799997465527382)*(IKcos(j[1]))))+(((6.39997972421906e-7)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((((((-1.43987107848251e-10)*(((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.43987107848251e-10)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.43987107848251e-10)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.43987107848251e-10)*(((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-1.43987107848251e-10)*(((((-0.00158999445393753)*(IKcos(j[1]))))+(((-1.27199556315002e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.43987107848251e-10)*(((((-1.27199556315002e-6)*(IKcos(j[1]))))+(((0.00158999445393753)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.43987107848251e-10)*(((((2.02247294540854e-9)*(IKcos(j[1]))))+(((-2.52809118176067e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.43987107848251e-10)*(((((-2.52809118176067e-6)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((2.28938776177597e-13)*(IKcos(j[1]))))+(((1.83151020942078e-16)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.15189321347219e-13)*(IKsin(j[1]))))+(((-1.43986651684023e-10)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((1.15189321347219e-13)*(IKcos(j[1]))))+(((-1.43986651684023e-10)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-2.28938776177597e-13)*(IKsin(j[1]))))+(((1.83151020942078e-16)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((((((1.79983884810314e-7)*(((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.79983884810314e-7)*(((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((1.79983884810314e-7)*(((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.79983884810314e-7)*(((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((1.43986651684023e-10)*(IKcos(j[1]))))+(((1.15189321347219e-13)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-1.83151020942078e-16)*(IKsin(j[1]))))+(((-2.28938776177597e-13)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-1.83151020942078e-16)*(IKcos(j[1]))))+(((2.28938776177597e-13)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.79983884810314e-7)*(((((1.61797835632683e-12)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.79983884810314e-7)*(((((1.27199556315002e-6)*(IKsin(j[1]))))+(((-1.01759645052002e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((1.79983884810314e-7)*(((((-1.01759645052002e-9)*(IKsin(j[1]))))+(((-1.27199556315002e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.79983884810314e-7)*(((((-2.02247294540854e-9)*(IKcos(j[1]))))+(((-1.61797835632683e-12)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((1.43986651684023e-10)*(IKsin(j[1]))))+(((-1.15189321347219e-13)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((0.303999520584933)*(IKsin(j[1]))))+(((-0.000243199616467947)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-3.87007631761558e-7)*(IKsin(j[1]))))+(((-0.000483759539701947)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0499999798560129)*(((((0.000799997465527382)*(IKsin(j[1]))))+(((-6.39997972421906e-7)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0499999798560129)*(((((0.000799997465527382)*(IKcos(j[1]))))+(((6.39997972421906e-7)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((1.27199597018854e-6)*(IKsin(j[1]))))+(((-1.01759677615083e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((-1.01759677615083e-9)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0499999798560129)*(((((((((1.61797835632683e-12)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.01759645052002e-9)*(IKsin(j[1]))))+(((-1.27199556315002e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-2.02247294540854e-9)*(IKcos(j[1]))))+(((-1.61797835632683e-12)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.27199556315002e-6)*(IKsin(j[1]))))+(((-1.01759645052002e-9)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.0499999798560129)*(((((((((0.999998095953615)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.271997578053e-6)*(IKsin(j[1]))))+(((0.00158999697256625)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.00158999697256625)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.000799998476762892)*(IKcos(j[1]))))+(((-0.999998095953615)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((((((-1.79983884810314e-7)*(((((2.02247294540854e-9)*(IKcos(j[1]))))+(((-2.52809118176067e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.79983884810314e-7)*(((((-1.27199556315002e-6)*(IKcos(j[1]))))+(((0.00158999445393753)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.79983884810314e-7)*(((((-0.00158999445393753)*(IKcos(j[1]))))+(((-1.27199556315002e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.79983884810314e-7)*(((((-2.52809118176067e-6)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-2.86173470221996e-10)*(IKsin(j[1]))))+(((2.28938776177597e-13)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-1.79983884810314e-7)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.79983884810314e-7)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.79983884810314e-7)*(((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.79983884810314e-7)*(((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((1.43986651684023e-10)*(IKcos(j[1]))))+(((-1.79983314605029e-7)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.43986651684023e-10)*(IKsin(j[1]))))+(((-1.79983314605029e-7)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((2.86173470221996e-10)*(IKcos(j[1]))))+(((2.28938776177597e-13)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((((((-0.0499999798560129)*(((((-0.000799997465527382)*(IKcos(j[1]))))+(((0.999996831909228)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.0499999798560129)*(((((((((-0.00158999445393753)*(IKcos(j[1]))))+(((-1.27199556315002e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((2.02247294540854e-9)*(IKcos(j[1]))))+(((-2.52809118176067e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-2.52809118176067e-6)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-1.27199556315002e-6)*(IKcos(j[1]))))+(((0.00158999445393753)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.0499999798560129)*(((((0.00158999496273567)*(IKsin(j[1]))))+(((-1.27199597018854e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((0.000799997465527382)*(IKsin(j[1]))))+(((0.999996831909228)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0499999798560129)*(((((((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.0499999798560129)*(((((-1.27199597018854e-6)*(IKsin(j[1]))))+(((-0.00158999496273567)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((-3.99999838848103e-5)*(((((1.27199597018854e-6)*(IKcos(j[1]))))+(((-0.00158999496273567)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((-0.999996831909228)*(IKcos(j[1]))))+(((-0.000799997465527382)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-3.99999838848103e-5)*(((((-1.0)*(((((1.0175980624424e-9)*(IKcos(j[1]))))+(((-1.271997578053e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-1.0175980624424e-9)*(IKsin(j[1]))))+(((-1.271997578053e-6)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKcos(j[1]))))+(((0.000799998476762892)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-6.39998781410314e-7)*(IKsin(j[1]))))+(((-0.000799998476762892)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-3.99999838848103e-5)*(((((0.000799997465527382)*(IKcos(j[1]))))+(((-0.999996831909228)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((0.00158999496273567)*(IKcos(j[1]))))+(((1.27199597018854e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-3.99999838848103e-5)*(((((-1.0)*(((((-0.00158999445393753)*(IKcos(j[1]))))+(((-1.27199556315002e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-1.27199556315002e-6)*(IKcos(j[1]))))+(((0.00158999445393753)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((2.02247294540854e-9)*(IKcos(j[1]))))+(((-2.52809118176067e-6)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-2.52809118176067e-6)*(IKcos(j[1]))))+(((-2.02247294540854e-9)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((0.000483759539701947)*(IKsin(j[1]))))+(((-3.87007631761558e-7)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.000243199616467947)*(IKsin(j[1]))))+(((0.303999520584933)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.00032649)*(IKcos(j[1])))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-0.00158999799016431)*r01))+(((-0.999998735952397)*r00)));
new_r01=((((0.00158999799016431)*r00))+(((-0.999998735952397)*r01)));
new_r02=r02;
new_px=((((-0.0499999958560039)*r02))+px);
new_r10=((((-0.00158999799016431)*r11))+(((-0.999998735952397)*r10)));
new_r11=((((-0.999998735952397)*r11))+(((0.00158999799016431)*r10)));
new_r12=r12;
new_py=((((-0.0499999958560039)*r12))+py);
new_r20=((((-0.999998735952397)*r20))+(((-0.00158999799016431)*r21)));
new_r21=((((-0.999998735952397)*r21))+(((0.00158999799016431)*r20)));
new_r22=r22;
new_pz=((-0.448)+(((-0.0499999958560039)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x0=((1.0)*px);
IkReal x1=((1.0)*pz);
IkReal x2=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x2))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x1)));
rxp0_2=((((-1.0)*r10*x0))+((py*r00)));
rxp1_0=((((-1.0)*r21*x2))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x1)));
rxp1_2=((((-1.0)*r11*x0))+((py*r01)));
rxp2_0=((((-1.0)*r22*x2))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x1)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x0)));
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((-1.63112962594188)+(((8.02310638880742)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((-1.63112962594188)+(((8.02310638880742)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x3=IKasin(((-1.63112962594188)+(((8.02310638880742)*pp))));
j2array[0]=((1.57239264169124)+(((1.0)*x3)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((4.71398529528103)+(((-1.0)*x3)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j0eval[2];
IkReal x4=px*px*px;
IkReal x5=py*py;
IkReal x6=py*py*py;
IkReal x7=px*px;
IkReal x8=(py*x7);
IkReal x9=(px*x5);
j0eval[0]=(x4+x9+(((-1250.0)*x6))+(((-1250.0)*x8)));
j0eval[1]=IKsign(((((1.16792133132497e-9)*x9))+(((1.16792133132497e-9)*x4))+(((-1.45990166415622e-6)*x6))+(((-1.45990166415622e-6)*x8))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x10=py*py;
IkReal x11=px*px;
IkReal x12=py*py*py;
IkReal x13=px*px*px;
IkReal x14=(px*x10);
IkReal x15=(py*x11);
j0eval[0]=((((-1250.0)*x13))+(((-1250.0)*x14))+(((-1.0)*x12))+(((-1.0)*x15)));
j0eval[1]=IKsign(((((-1.16792133132497e-9)*x12))+(((-1.16792133132497e-9)*x15))+(((-1.45990166415622e-6)*x13))+(((-1.45990166415622e-6)*x14))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=((844.873880321145)+(((-1.0)*sj2))+(((116.121158750425)*(cj2*cj2)))+(((116.121158750425)*(sj2*sj2)))+(((-626.442284590877)*cj2)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x16=((-0.00032649)+(((-0.151999567696146)*sj2))+(((0.000363679731622504)*cj2)));
IkReal x17=((0.409999870604041)+(((-0.151999567696146)*cj2))+(((-0.000363679731622504)*sj2)));
CheckValue<IkReal> x20 = IKatan2WithCheck(IkReal(x16),IkReal(x17),IKFAST_ATAN2_MAGTHRESH);
if(!x20.valid){
continue;
}
IkReal x18=((1.0)*(x20.value));
if((((x17*x17)+(x16*x16))) < -0.00001)
continue;
CheckValue<IkReal> x21=IKPowWithIntegerCheck(IKabs(IKsqrt(((x17*x17)+(x16*x16)))),-1);
if(!x21.valid){
continue;
}
if( ((pz*(x21.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x21.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x19=IKasin((pz*(x21.value)));
j1array[0]=((((-1.0)*x18))+(((-1.0)*x19)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x18))+x19);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[2];
IkReal x22=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x22;
j0eval[1]=IKsign(x22);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x23=pz*pz;
IkReal x24=(cj1*pp);
IkReal x25=((0.999999680000154)*sj1);
IkReal x26=((1250.0)*sj1);
IkReal x27=(cj1*x23);
j0eval[0]=((((-1.0)*x23*x26))+(((-1.0)*x24))+x27+((pp*x26)));
j0eval[1]=IKsign(((((-1.0)*x23*x25))+(((0.000799999744000123)*x27))+(((-0.000799999744000123)*x24))+((pp*x25))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x28=pz*pz;
IkReal x29=(pp*sj1);
IkReal x30=(cj1*pp);
IkReal x31=(sj1*x28);
IkReal x32=(cj1*x28);
j0eval[0]=((((-1.0)*x29))+(((-1250.0)*x30))+x31+(((1250.0)*x32)));
j0eval[1]=IKsign(((((-0.999999680000154)*x30))+(((0.999999680000154)*x32))+(((-0.000799999744000123)*x29))+(((0.000799999744000123)*x31))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x33=pz*pz;
IkReal x34=((((-1.0)*pp))+x33);
IkReal x35=((((-1250.0)*pp))+(((1250.0)*x33)));
IkReal x37 = ((x34*x34)+(x35*x35));
if(IKabs(x37)==0){
continue;
}
IkReal x36=pow(x37,-0.5);
CheckValue<IkReal> x38 = IKatan2WithCheck(IkReal(x35),IkReal(x34),IKFAST_ATAN2_MAGTHRESH);
if(!x38.valid){
continue;
}
IkReal gconst0=((-1.0)*(x38.value));
IkReal gconst1=((-1.0)*x35*x36);
IkReal gconst2=(x34*x36);
IkReal x39=pz*pz;
IkReal x40=j1;
CheckValue<IkReal> x43 = IKatan2WithCheck(IkReal(((((-1250.0)*pp))+(((1250.0)*x39)))),IkReal(((((-1.0)*pp))+x39)),IKFAST_ATAN2_MAGTHRESH);
if(!x43.valid){
continue;
}
IkReal x41=x43.value;
IkReal x42=x41;
if(((((x41*x42))+((x40*x41))+((j1*x40))+((j1*x42)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x41*x42))+((x40*x41))+((j1*x40))+((j1*x42)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x44=pz*pz;
IkReal x45=((((-1.0)*pp))+x44);
IkReal x46=x35;
CheckValue<IkReal> x49 = IKatan2WithCheck(IkReal(x46),IkReal(x45),IKFAST_ATAN2_MAGTHRESH);
if(!x49.valid){
continue;
}
IkReal x47=((-1.0)*(x49.value));
IkReal x50 = ((x46*x46)+(x45*x45));
if(IKabs(x50)==0){
continue;
}
IkReal x48=pow(x50,-0.5);
sj1=gconst1;
cj1=gconst2;
j1=x47;
IkReal gconst0=x47;
IkReal gconst1=((-1.0)*x46*x48);
IkReal gconst2=(x45*x48);
IkReal x51=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x51;
j0eval[1]=IKsign(x51);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x52=(gconst1*px);
IkReal x53=((0.000799999744000123)*gconst2);
IkReal x54=(gconst2*py);
IkReal x55=((0.99999936000041)*pz);
IkReal x56=(cj2*py);
IkReal x57=(gconst2*px);
IkReal x58=((0.000243199616467947)*sj2);
IkReal x59=((0.303999520584933)*sj2);
IkReal x60=(cj2*px);
IkReal x61=((0.999999680000154)*gconst1);
IkReal x62=((0.000799999488000328)*pz);
IkReal x63=(gconst1*py);
IkReal x64=((6.39999590400262e-7)*pz);
CheckValue<IkReal> x65=IKPowWithIntegerCheck(IKsign(((((pz*pz)*((x53+(((-1.0)*x61))))))+((pp*x61))+(((-1.0)*pp*x53)))),-1);
if(!x65.valid){
continue;
}
CheckValue<IkReal> x66 = IKatan2WithCheck(IkReal(((((-1.0)*x52*x64))+(((0.000242079922534437)*x56))+((px*x58))+(((-8.87298922464771e-5)*x63))+((x62*x63))+(((-0.109999925600077)*x52))+(((7.03999527577844e-8)*x54))+(((8.79999409472305e-5)*x57))+(((-1.0)*py*x59))+(((-1.0)*x57*x62))+(((-1.9366393802755e-7)*x60))+((x54*x55)))),IkReal(((((-1.0)*px*x59))+(((0.000242079922534437)*x60))+(((-8.87298922464771e-5)*x52))+(((1.9366393802755e-7)*x56))+(((7.03999527577844e-8)*x57))+((x63*x64))+(((-8.79999409472305e-5)*x54))+((x52*x62))+(((-1.0)*py*x58))+(((0.109999925600077)*x63))+((x54*x62))+((x55*x57)))),IKFAST_ATAN2_MAGTHRESH);
if(!x66.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x65.value)))+(x66.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x67=IKsin(j0);
IkReal x68=IKcos(j0);
IkReal x69=(gconst2*py);
IkReal x70=((0.999999680000154)*py);
IkReal x71=((0.000799999488000328)*gconst1);
IkReal x72=((0.000799999488000328)*gconst2);
IkReal x73=((5.24799664891173e-7)*gconst1);
IkReal x74=(gconst1*py);
IkReal x75=((0.000799999744000123)*pz);
IkReal x76=((0.999999680000154)*pz);
IkReal x77=(px*x67);
IkReal x78=((6.39999590400262e-7)*x68);
IkReal x79=(px*x68);
IkReal x80=(py*x67);
IkReal x81=((0.99999936000041)*x67);
IkReal x82=(py*x68);
IkReal x83=((0.99999936000041)*x79);
evalcond[0]=((-0.109999996583991)+(((-0.999999680000154)*x77))+(((-0.000799999744000123)*x80))+((x68*x70))+(((-0.000799999744000123)*x79)));
evalcond[1]=((((0.000363679731622504)*gconst2*sj2))+(((-0.999999680000154)*x79))+(((0.000363679731622504)*cj2*gconst1))+(((-0.000799999744000123)*x82))+(((0.000799999744000123)*x77))+(((-0.00032649)*gconst1))+(((-0.409999870604041)*gconst2))+(((0.151999567696146)*cj2*gconst2))+(((-1.0)*x67*x70))+(((-0.151999567696146)*gconst1*sj2)));
evalcond[2]=((((6.39999590400262e-7)*gconst2*x77))+(((0.303999617864764)*sj2))+((x74*x81))+(((-1.0)*gconst1*x75))+(((-1.0)*gconst2*x76))+(((-0.000799999488000328)*x67*x69))+(((-0.00024208)*cj2))+(((-1.0)*x71*x77))+(((-1.0)*x72*x79))+(((-1.0)*x69*x78))+(((7.29951532831019e-7)*gconst1))+((gconst1*x83))+((x71*x82)));
evalcond[3]=((-0.410000000596062)+(((0.303999617864764)*cj2))+(((-1.0)*x71*x80))+(((6.39999590400262e-7)*gconst1*x77))+((gconst2*x75))+(((-1.0)*gconst1*x76))+(((-1.0)*x74*x78))+(((-0.000799999488000328)*x68*x69))+(((-1.0)*x71*x79))+(((-1.0)*gconst2*x83))+(((-1.0)*x69*x81))+((x72*x77))+(((-7.29951532831019e-7)*gconst2))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749761762)+(((-0.819999738792249)*gconst1*pz))+(((1.16792170505974e-9)*x77))+(((-1.0)*x73*x82))+(((-1.45990213132467e-6)*x80))+(((-0.819999476392458)*x67*x69))+(((1.16792207879462e-9)*pz))+(((-0.000655999581113967)*x67*x74))+(((0.000655999581113967)*gconst2*x77))+(((-0.000655999581113967)*gconst1*x79))+(((-0.819999476392458)*gconst2*x79))+(((-1.16792170505974e-9)*x82))+(((-1.45990213132467e-6)*x79))+(((0.000655999791033799)*gconst2*pz))+(((-1.0)*pp))+(((-0.000655999581113967)*x68*x69))+(((-5.98560257791628e-7)*gconst2))+((x73*x77)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1321=(gconst2*py);
IkReal x1322=((0.000363679615245046)*sj2);
IkReal x1323=(gconst1*px);
IkReal x1324=((0.000121599615245046)*sj2);
IkReal x1325=(gconst1*py);
IkReal x1326=((2.90943692196037e-7)*cj2);
IkReal x1327=(gconst2*px);
IkReal x1328=((0.151999519056308)*cj2);
IkReal x1329=((2.90943692196037e-7)*sj2);
IkReal x1330=((0.151999519056308)*sj2);
IkReal x1331=((0.000363679615245046)*cj2);
IkReal x1332=((0.000121599615245046)*cj2);
CheckValue<IkReal> x1333=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1333.valid){
continue;
}
CheckValue<IkReal> x1334 = IKatan2WithCheck(IkReal(((((-1.0)*x1325*x1331))+(((0.00032648989552325)*x1325))+(((0.109999961384009)*px))+(((-1.0)*x1323*x1324))+(((0.409999739404145)*x1321))+((x1323*x1326))+((x1327*x1329))+((x1325*x1330))+(((-1.0)*x1321*x1328))+(((-1.0)*x1321*x1322))+(((-0.000327999791523316)*x1327))+((x1327*x1332))+(((-2.611919164186e-7)*x1323))+(((8.79999691072071e-5)*py)))),IkReal(((((0.000327999791523316)*x1321))+(((0.00032648989552325)*x1323))+(((0.409999739404145)*x1327))+(((-1.0)*x1322*x1327))+(((-1.0)*x1323*x1331))+(((-1.0)*x1327*x1328))+((x1324*x1325))+(((2.611919164186e-7)*x1325))+(((-1.0)*x1321*x1329))+(((-1.0)*x1325*x1326))+(((-0.109999961384009)*py))+((x1323*x1330))+(((-1.0)*x1321*x1332))+(((8.79999691072071e-5)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1334.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1333.value)))+(x1334.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1335=IKsin(j0);
IkReal x1336=IKcos(j0);
IkReal x1337=(gconst2*py);
IkReal x1338=((0.999999680000154)*py);
IkReal x1339=((0.000799999488000328)*gconst1);
IkReal x1340=((0.000799999488000328)*gconst2);
IkReal x1341=((5.24799664891173e-7)*gconst1);
IkReal x1342=(gconst1*py);
IkReal x1343=((0.000799999744000123)*pz);
IkReal x1344=((0.999999680000154)*pz);
IkReal x1345=(px*x1335);
IkReal x1346=((6.39999590400262e-7)*x1336);
IkReal x1347=(px*x1336);
IkReal x1348=(py*x1335);
IkReal x1349=((0.99999936000041)*x1335);
IkReal x1350=(py*x1336);
IkReal x1351=((0.99999936000041)*x1347);
evalcond[0]=((-0.109999996583991)+((x1336*x1338))+(((-0.000799999744000123)*x1347))+(((-0.000799999744000123)*x1348))+(((-0.999999680000154)*x1345)));
evalcond[1]=((((-1.0)*x1335*x1338))+(((0.000363679731622504)*gconst2*sj2))+(((0.000363679731622504)*cj2*gconst1))+(((0.000799999744000123)*x1345))+(((-0.000799999744000123)*x1350))+(((-0.00032649)*gconst1))+(((-0.409999870604041)*gconst2))+(((0.151999567696146)*cj2*gconst2))+(((-0.151999567696146)*gconst1*sj2))+(((-0.999999680000154)*x1347)));
evalcond[2]=((((-1.0)*gconst1*x1343))+(((0.303999617864764)*sj2))+(((-1.0)*x1340*x1347))+(((-1.0)*gconst2*x1344))+((gconst1*x1351))+((x1339*x1350))+(((-0.000799999488000328)*x1335*x1337))+(((-0.00024208)*cj2))+(((-1.0)*x1339*x1345))+(((6.39999590400262e-7)*gconst2*x1345))+((x1342*x1349))+(((-1.0)*x1337*x1346))+(((7.29951532831019e-7)*gconst1)));
evalcond[3]=((-0.410000000596062)+(((-1.0)*gconst1*x1344))+(((0.303999617864764)*cj2))+(((-1.0)*gconst2*x1351))+((x1340*x1345))+(((-1.0)*x1339*x1348))+(((-1.0)*x1339*x1347))+(((6.39999590400262e-7)*gconst1*x1345))+((gconst2*x1343))+(((-1.0)*x1342*x1346))+(((-0.000799999488000328)*x1336*x1337))+(((-1.0)*x1337*x1349))+(((-7.29951532831019e-7)*gconst2))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749761762)+(((-0.000655999581113967)*x1335*x1342))+(((-1.16792170505974e-9)*x1350))+(((-1.0)*x1341*x1350))+(((-0.819999738792249)*gconst1*pz))+(((-0.819999476392458)*x1335*x1337))+(((1.16792207879462e-9)*pz))+(((-0.000655999581113967)*x1336*x1337))+((x1341*x1345))+(((0.000655999791033799)*gconst2*pz))+(((0.000655999581113967)*gconst2*x1345))+(((-1.0)*pp))+(((-0.000655999581113967)*gconst1*x1347))+(((1.16792170505974e-9)*x1345))+(((-0.819999476392458)*gconst2*x1347))+(((-5.98560257791628e-7)*gconst2))+(((-1.45990213132467e-6)*x1348))+(((-1.45990213132467e-6)*x1347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1352=pz*pz;
IkReal x1353=(x1352+(((-1.0)*pp)));
IkReal x1354=((((-1250.0)*pp))+(((1250.0)*x1352)));
IkReal x1356 = ((x1353*x1353)+(x1354*x1354));
if(IKabs(x1356)==0){
continue;
}
IkReal x1355=pow(x1356,-0.5);
CheckValue<IkReal> x1357 = IKatan2WithCheck(IkReal(x1354),IkReal(x1353),IKFAST_ATAN2_MAGTHRESH);
if(!x1357.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x1357.value))));
IkReal gconst4=((1.0)*x1354*x1355);
IkReal gconst5=((-1.0)*x1353*x1355);
IkReal x1358=pz*pz;
IkReal x1359=j1;
CheckValue<IkReal> x1362 = IKatan2WithCheck(IkReal(((((-1250.0)*pp))+(((1250.0)*x1358)))),IkReal((x1358+(((-1.0)*pp)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1362.valid){
continue;
}
IkReal x1360=x1362.value;
IkReal x1361=x1360;
if((((9.86960440108936)+((j1*x1361))+((j1*x1359))+((x1360*x1361))+((x1359*x1360))+(((-3.14159265358979)*x1359))+(((-3.14159265358979)*x1360))+(((-3.14159265358979)*x1361))+(((-3.14159265358979)*j1)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((j1*x1361))+((j1*x1359))+((x1360*x1361))+((x1359*x1360))+(((-3.14159265358979)*x1359))+(((-3.14159265358979)*x1360))+(((-3.14159265358979)*x1361))+(((-3.14159265358979)*j1)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x1363=pz*pz;
IkReal x1364=(x1363+(((-1.0)*pp)));
IkReal x1365=x1354;
CheckValue<IkReal> x1368 = IKatan2WithCheck(IkReal(x1365),IkReal(x1364),IKFAST_ATAN2_MAGTHRESH);
if(!x1368.valid){
continue;
}
IkReal x1366=((1.0)*(x1368.value));
IkReal x1369 = ((x1365*x1365)+(x1364*x1364));
if(IKabs(x1369)==0){
continue;
}
IkReal x1367=pow(x1369,-0.5);
sj1=gconst4;
cj1=gconst5;
j1=((3.14159265)+(((-1.0)*x1366)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1366)));
IkReal gconst4=((1.0)*x1365*x1367);
IkReal gconst5=((-1.0)*x1364*x1367);
IkReal x1370=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x1370;
j0eval[1]=IKsign(x1370);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1371=((0.000799999744000123)*gconst5);
IkReal x1372=(gconst5*py);
IkReal x1373=(px*sj2);
IkReal x1374=(cj2*py);
IkReal x1375=(py*sj2);
IkReal x1376=((0.99999936000041)*pz);
IkReal x1377=(gconst5*px);
IkReal x1378=(cj2*px);
IkReal x1379=(gconst4*px);
IkReal x1380=(gconst4*py);
IkReal x1381=((0.000799999488000328)*pz);
IkReal x1382=((6.39999590400262e-7)*pz);
IkReal x1383=((0.999999680000154)*gconst4);
CheckValue<IkReal> x1384=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp*x1371))+((pp*x1383))+(((pz*pz)*(((((-1.0)*x1383))+x1371)))))),-1);
if(!x1384.valid){
continue;
}
CheckValue<IkReal> x1385 = IKatan2WithCheck(IkReal((((x1380*x1381))+(((0.000242079922534437)*x1374))+((x1372*x1376))+(((-1.9366393802755e-7)*x1378))+(((-1.0)*x1377*x1381))+(((8.79999409472305e-5)*x1377))+(((-0.303999520584933)*x1375))+(((0.000243199616467947)*x1373))+(((7.03999527577844e-8)*x1372))+(((-8.87298922464771e-5)*x1380))+(((-0.109999925600077)*x1379))+(((-1.0)*x1379*x1382)))),IkReal(((((-8.87298922464771e-5)*x1379))+((x1380*x1382))+((x1376*x1377))+(((0.000242079922534437)*x1378))+(((-0.000243199616467947)*x1375))+(((0.109999925600077)*x1380))+(((-0.303999520584933)*x1373))+(((-8.79999409472305e-5)*x1372))+((x1372*x1381))+(((1.9366393802755e-7)*x1374))+((x1379*x1381))+(((7.03999527577844e-8)*x1377)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1385.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1384.value)))+(x1385.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1386=IKsin(j0);
IkReal x1387=IKcos(j0);
IkReal x1388=((0.999999680000154)*py);
IkReal x1389=((0.000655999581113967)*gconst4);
IkReal x1390=((0.000799999488000328)*gconst5);
IkReal x1391=(gconst5*pz);
IkReal x1392=((0.819999476392458)*gconst5);
IkReal x1393=((5.24799664891173e-7)*gconst4);
IkReal x1394=((0.000799999488000328)*gconst4);
IkReal x1395=(gconst4*pz);
IkReal x1396=((6.39999590400262e-7)*gconst5);
IkReal x1397=((6.39999590400262e-7)*gconst4);
IkReal x1398=((0.000655999581113967)*gconst5);
IkReal x1399=(py*x1386);
IkReal x1400=(px*x1386);
IkReal x1401=(py*x1387);
IkReal x1402=(px*x1387);
IkReal x1403=((0.99999936000041)*x1402);
evalcond[0]=((-0.109999996583991)+(((-0.000799999744000123)*x1402))+(((-0.000799999744000123)*x1399))+(((-0.999999680000154)*x1400))+((x1387*x1388)));
evalcond[1]=((((-0.000799999744000123)*x1401))+(((0.000799999744000123)*x1400))+(((0.000363679731622504)*cj2*gconst4))+(((-0.999999680000154)*x1402))+(((-0.00032649)*gconst4))+(((-0.409999870604041)*gconst5))+(((0.151999567696146)*cj2*gconst5))+(((-1.0)*x1386*x1388))+(((0.000363679731622504)*gconst5*sj2))+(((-0.151999567696146)*gconst4*sj2)));
evalcond[2]=((((0.303999617864764)*sj2))+(((-0.999999680000154)*x1391))+(((-1.0)*x1390*x1402))+((x1396*x1400))+(((-0.000799999744000123)*x1395))+(((0.99999936000041)*gconst4*x1399))+((x1394*x1401))+(((-0.00024208)*cj2))+(((-1.0)*x1390*x1399))+((gconst4*x1403))+(((-1.0)*x1396*x1401))+(((7.29951532831019e-7)*gconst4))+(((-1.0)*x1394*x1400)));
evalcond[3]=((-0.410000000596062)+(((-0.99999936000041)*gconst5*x1399))+(((0.303999617864764)*cj2))+(((-0.999999680000154)*x1395))+(((-1.0)*x1394*x1399))+(((-1.0)*x1390*x1401))+((x1397*x1400))+(((0.000799999744000123)*x1391))+(((-1.0)*x1397*x1401))+(((-7.29951532831019e-7)*gconst5))+(((-1.0)*gconst5*x1403))+((x1390*x1400))+(((-1.0)*x1394*x1402))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749761762)+(((-1.0)*x1389*x1402))+(((-1.0)*x1392*x1399))+(((-1.0)*x1389*x1399))+(((1.16792207879462e-9)*pz))+((x1393*x1400))+(((-1.45990213132467e-6)*x1402))+(((0.000655999791033799)*x1391))+(((-1.16792170505974e-9)*x1401))+(((-1.0)*x1398*x1401))+(((-0.819999738792249)*x1395))+(((-1.45990213132467e-6)*x1399))+(((-1.0)*pp))+(((-1.0)*x1393*x1401))+(((-1.0)*x1392*x1402))+((x1398*x1400))+(((-5.98560257791628e-7)*gconst5))+(((1.16792170505974e-9)*x1400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1404=(gconst5*py);
IkReal x1405=(gconst4*py);
IkReal x1406=((0.000363679615245046)*cj2);
IkReal x1407=(gconst4*px);
IkReal x1408=((0.000121599615245046)*sj2);
IkReal x1409=((0.151999519056308)*sj2);
IkReal x1410=((0.000363679615245046)*sj2);
IkReal x1411=((0.000121599615245046)*cj2);
IkReal x1412=(gconst5*px);
IkReal x1413=((2.90943692196037e-7)*cj2);
IkReal x1414=((0.151999519056308)*cj2);
IkReal x1415=((2.90943692196037e-7)*gconst5*sj2);
CheckValue<IkReal> x1416 = IKatan2WithCheck(IkReal((((x1407*x1413))+(((0.409999739404145)*x1404))+(((0.109999961384009)*px))+(((0.00032648989552325)*x1405))+(((2.90943692196037e-7)*sj2*x1412))+(((-1.0)*x1404*x1414))+(((-1.0)*x1404*x1410))+(((-1.0)*x1405*x1406))+((x1411*x1412))+((x1405*x1409))+(((-0.000327999791523316)*x1412))+(((-2.611919164186e-7)*x1407))+(((-1.0)*x1407*x1408))+(((8.79999691072071e-5)*py)))),IkReal(((((2.611919164186e-7)*x1405))+(((0.000327999791523316)*x1404))+(((0.00032648989552325)*x1407))+(((-1.0)*x1412*x1414))+(((-1.0)*x1406*x1407))+(((-1.0)*x1404*x1411))+(((-2.90943692196037e-7)*sj2*x1404))+(((-0.109999961384009)*py))+(((0.409999739404145)*x1412))+((x1405*x1408))+(((-1.0)*x1410*x1412))+(((-1.0)*x1405*x1413))+(((8.79999691072071e-5)*px))+((x1407*x1409)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1416.valid){
continue;
}
CheckValue<IkReal> x1417=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1417.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1416.value)+(((1.5707963267949)*(x1417.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1418=IKsin(j0);
IkReal x1419=IKcos(j0);
IkReal x1420=((0.999999680000154)*py);
IkReal x1421=((0.000655999581113967)*gconst4);
IkReal x1422=((0.000799999488000328)*gconst5);
IkReal x1423=(gconst5*pz);
IkReal x1424=((0.819999476392458)*gconst5);
IkReal x1425=((5.24799664891173e-7)*gconst4);
IkReal x1426=((0.000799999488000328)*gconst4);
IkReal x1427=(gconst4*pz);
IkReal x1428=((6.39999590400262e-7)*gconst5);
IkReal x1429=((6.39999590400262e-7)*gconst4);
IkReal x1430=((0.000655999581113967)*gconst5);
IkReal x1431=(py*x1418);
IkReal x1432=(px*x1418);
IkReal x1433=(py*x1419);
IkReal x1434=(px*x1419);
IkReal x1435=((0.99999936000041)*x1434);
evalcond[0]=((-0.109999996583991)+(((-0.999999680000154)*x1432))+((x1419*x1420))+(((-0.000799999744000123)*x1434))+(((-0.000799999744000123)*x1431)));
evalcond[1]=((((0.000799999744000123)*x1432))+(((0.000363679731622504)*cj2*gconst4))+(((-0.999999680000154)*x1434))+(((-1.0)*x1418*x1420))+(((-0.00032649)*gconst4))+(((-0.409999870604041)*gconst5))+(((0.151999567696146)*cj2*gconst5))+(((0.000363679731622504)*gconst5*sj2))+(((-0.000799999744000123)*x1433))+(((-0.151999567696146)*gconst4*sj2)));
evalcond[2]=(((x1428*x1432))+(((0.303999617864764)*sj2))+(((-1.0)*x1422*x1431))+(((-1.0)*x1422*x1434))+(((-1.0)*x1428*x1433))+(((-0.000799999744000123)*x1427))+(((-0.00024208)*cj2))+(((0.99999936000041)*gconst4*x1431))+((x1426*x1433))+(((-1.0)*x1426*x1432))+((gconst4*x1435))+(((7.29951532831019e-7)*gconst4))+(((-0.999999680000154)*x1423)));
evalcond[3]=((-0.410000000596062)+((x1429*x1432))+(((0.303999617864764)*cj2))+(((-1.0)*x1422*x1433))+(((-1.0)*x1429*x1433))+(((-1.0)*x1426*x1431))+(((-1.0)*x1426*x1434))+(((0.000799999744000123)*x1423))+((x1422*x1432))+(((-0.99999936000041)*gconst5*x1431))+(((-1.0)*gconst5*x1435))+(((-7.29951532831019e-7)*gconst5))+(((-0.999999680000154)*x1427))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749761762)+(((1.16792207879462e-9)*pz))+(((-1.16792170505974e-9)*x1433))+((x1430*x1432))+(((-0.819999738792249)*x1427))+(((-1.45990213132467e-6)*x1431))+(((-1.45990213132467e-6)*x1434))+((x1425*x1432))+(((-1.0)*pp))+(((-1.0)*x1421*x1434))+(((-1.0)*x1421*x1431))+(((-1.0)*x1424*x1434))+(((-1.0)*x1424*x1431))+(((-1.0)*x1425*x1433))+(((0.000655999791033799)*x1423))+(((-5.98560257791628e-7)*gconst5))+(((-1.0)*x1430*x1433))+(((1.16792170505974e-9)*x1432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1436=pz*pz;
IkReal x1437=((((-1.0)*pp))+x1436);
IkReal x1438=((((1250.0)*pp))+(((-1250.0)*x1436)));
IkReal x1440 = ((x1438*x1438)+(x1437*x1437));
if(IKabs(x1440)==0){
continue;
}
IkReal x1439=pow(x1440,-0.5);
CheckValue<IkReal> x1441 = IKatan2WithCheck(IkReal(x1437),IkReal(x1438),IKFAST_ATAN2_MAGTHRESH);
if(!x1441.valid){
continue;
}
IkReal gconst6=((-1.0)*(x1441.value));
IkReal gconst7=((-1.0)*x1437*x1439);
IkReal gconst8=(x1438*x1439);
IkReal x1442=pz*pz;
IkReal x1443=j1;
CheckValue<IkReal> x1446 = IKatan2WithCheck(IkReal(((((-1.0)*pp))+x1442)),IkReal(((((-1250.0)*x1442))+(((1250.0)*pp)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1446.valid){
continue;
}
IkReal x1444=x1446.value;
IkReal x1445=x1444;
if(((((x1444*x1445))+((x1443*x1444))+((j1*x1443))+((j1*x1445)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x1444*x1445))+((x1443*x1444))+((j1*x1443))+((j1*x1445)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x1447=pz*pz;
IkReal x1448=((((-1.0)*pp))+x1447);
IkReal x1449=x1438;
CheckValue<IkReal> x1452 = IKatan2WithCheck(IkReal(x1448),IkReal(x1449),IKFAST_ATAN2_MAGTHRESH);
if(!x1452.valid){
continue;
}
IkReal x1450=((-1.0)*(x1452.value));
IkReal x1453 = ((x1448*x1448)+(x1449*x1449));
if(IKabs(x1453)==0){
continue;
}
IkReal x1451=pow(x1453,-0.5);
sj1=gconst7;
cj1=gconst8;
j1=x1450;
IkReal gconst6=x1450;
IkReal gconst7=((-1.0)*x1448*x1451);
IkReal gconst8=(x1449*x1451);
IkReal x1454=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x1454;
j0eval[1]=IKsign(x1454);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1455=(gconst7*py);
IkReal x1456=((0.000242079922534437)*cj2);
IkReal x1457=(px*pz);
IkReal x1458=((0.999999680000154)*gconst7);
IkReal x1459=(px*sj2);
IkReal x1460=((0.000799999744000123)*gconst8);
IkReal x1461=((1.9366393802755e-7)*cj2);
IkReal x1462=(py*sj2);
IkReal x1463=(gconst8*py);
IkReal x1464=(gconst7*px);
IkReal x1465=(gconst8*px);
IkReal x1466=(pz*x1463);
CheckValue<IkReal> x1467 = IKatan2WithCheck(IkReal(((((-0.109999925600077)*x1464))+(((7.03999527577844e-8)*x1463))+((py*x1456))+(((-0.303999520584933)*x1462))+(((0.000243199616467947)*x1459))+(((0.99999936000041)*x1466))+(((-6.39999590400262e-7)*gconst7*x1457))+(((0.000799999488000328)*pz*x1455))+(((-0.000799999488000328)*gconst8*x1457))+(((-1.0)*px*x1461))+(((8.79999409472305e-5)*x1465))+(((-8.87298922464771e-5)*x1455)))),IkReal(((((-8.79999409472305e-5)*x1463))+(((0.000799999488000328)*gconst7*x1457))+(((-0.000243199616467947)*x1462))+((py*x1461))+(((7.03999527577844e-8)*x1465))+(((6.39999590400262e-7)*pz*x1455))+((px*x1456))+(((0.109999925600077)*x1455))+(((0.99999936000041)*gconst8*x1457))+(((-0.303999520584933)*x1459))+(((0.000799999488000328)*x1466))+(((-8.87298922464771e-5)*x1464)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1467.valid){
continue;
}
CheckValue<IkReal> x1468=IKPowWithIntegerCheck(IKsign(((((pz*pz)*(((((-1.0)*x1458))+x1460))))+(((-1.0)*pp*x1460))+((pp*x1458)))),-1);
if(!x1468.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1467.value)+(((1.5707963267949)*(x1468.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1469=IKsin(j0);
IkReal x1470=IKcos(j0);
IkReal x1471=(gconst8*pz);
IkReal x1472=((0.000655999581113967)*gconst7);
IkReal x1473=((0.99999936000041)*gconst7);
IkReal x1474=((0.000799999488000328)*gconst8);
IkReal x1475=((0.819999476392458)*gconst8);
IkReal x1476=((6.39999590400262e-7)*gconst8);
IkReal x1477=((6.39999590400262e-7)*gconst7);
IkReal x1478=(gconst7*pz);
IkReal x1479=((0.99999936000041)*gconst8);
IkReal x1480=((5.24799664891173e-7)*gconst7);
IkReal x1481=((0.000799999488000328)*gconst7);
IkReal x1482=((0.000655999581113967)*gconst8);
IkReal x1483=(py*x1469);
IkReal x1484=(py*x1470);
IkReal x1485=(px*x1470);
IkReal x1486=(px*x1469);
evalcond[0]=((-0.109999996583991)+(((-0.000799999744000123)*x1485))+(((-0.000799999744000123)*x1483))+(((-0.999999680000154)*x1486))+(((0.999999680000154)*x1484)));
evalcond[1]=((((0.000363679731622504)*cj2*gconst7))+(((-0.000799999744000123)*x1484))+(((-0.999999680000154)*x1483))+(((-0.999999680000154)*x1485))+(((0.000799999744000123)*x1486))+(((-0.00032649)*gconst7))+(((-0.409999870604041)*gconst8))+(((0.151999567696146)*cj2*gconst8))+(((-0.151999567696146)*gconst7*sj2))+(((0.000363679731622504)*gconst8*sj2)));
evalcond[2]=((((0.303999617864764)*sj2))+((x1476*x1486))+(((-0.999999680000154)*x1471))+(((-1.0)*x1481*x1486))+((x1473*x1485))+((x1473*x1483))+((x1481*x1484))+(((-1.0)*x1474*x1485))+(((-1.0)*x1474*x1483))+(((-0.00024208)*cj2))+(((-0.000799999744000123)*x1478))+(((-1.0)*x1476*x1484))+(((7.29951532831019e-7)*gconst7)));
evalcond[3]=((-0.410000000596062)+(((0.303999617864764)*cj2))+(((-1.0)*x1479*x1485))+(((-1.0)*x1479*x1483))+(((-0.999999680000154)*x1478))+(((-1.0)*x1481*x1483))+(((-1.0)*x1481*x1485))+((x1477*x1486))+(((-1.0)*x1474*x1484))+((x1474*x1486))+(((-1.0)*x1477*x1484))+(((0.000799999744000123)*x1471))+(((-7.29951532831019e-7)*gconst8))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749761762)+(((1.16792170505974e-9)*x1486))+(((-1.0)*x1482*x1484))+(((1.16792207879462e-9)*pz))+((x1482*x1486))+((x1480*x1486))+(((-1.16792170505974e-9)*x1484))+(((-1.0)*x1480*x1484))+(((-1.0)*pp))+(((-1.0)*x1475*x1483))+(((-1.0)*x1475*x1485))+(((-5.98560257791628e-7)*gconst8))+(((-1.0)*x1472*x1485))+(((-1.0)*x1472*x1483))+(((-1.45990213132467e-6)*x1483))+(((-1.45990213132467e-6)*x1485))+(((0.000655999791033799)*x1471))+(((-0.819999738792249)*x1478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1487=(cj2*px);
IkReal x1488=((0.151999519056308)*gconst8);
IkReal x1489=((2.90943692196037e-7)*gconst7);
IkReal x1490=(cj2*py);
IkReal x1491=((0.409999739404145)*gconst8);
IkReal x1492=(gconst7*py);
IkReal x1493=(px*sj2);
IkReal x1494=((0.000363679615245046)*gconst8);
IkReal x1495=(gconst7*px);
IkReal x1496=((0.000121599615245046)*gconst8);
IkReal x1497=((0.000327999791523316)*gconst8);
IkReal x1498=((0.000363679615245046)*cj2*gconst7);
IkReal x1499=((2.90943692196037e-7)*gconst8*sj2);
CheckValue<IkReal> x1500=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1500.valid){
continue;
}
CheckValue<IkReal> x1501 = IKatan2WithCheck(IkReal(((((2.90943692196037e-7)*gconst8*x1493))+(((0.109999961384009)*px))+(((-2.611919164186e-7)*x1495))+(((-1.0)*py*sj2*x1494))+(((0.00032648989552325)*x1492))+((py*x1491))+((x1487*x1489))+(((0.151999519056308)*sj2*x1492))+(((-1.0)*px*x1497))+((x1487*x1496))+(((-0.000121599615245046)*gconst7*x1493))+(((-0.000363679615245046)*gconst7*x1490))+(((-1.0)*x1488*x1490))+(((8.79999691072071e-5)*py)))),IkReal(((((2.611919164186e-7)*x1492))+(((-1.0)*x1487*x1488))+(((0.00032648989552325)*x1495))+(((0.000121599615245046)*sj2*x1492))+((py*x1497))+(((-1.0)*x1493*x1494))+(((-0.109999961384009)*py))+(((-0.000363679615245046)*gconst7*x1487))+(((-1.0)*x1490*x1496))+((px*x1491))+(((0.151999519056308)*gconst7*x1493))+(((-1.0)*py*x1499))+(((8.79999691072071e-5)*px))+(((-1.0)*x1489*x1490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1501.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1500.value)))+(x1501.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1502=IKsin(j0);
IkReal x1503=IKcos(j0);
IkReal x1504=(gconst8*pz);
IkReal x1505=((0.000655999581113967)*gconst7);
IkReal x1506=((0.99999936000041)*gconst7);
IkReal x1507=((0.000799999488000328)*gconst8);
IkReal x1508=((0.819999476392458)*gconst8);
IkReal x1509=((6.39999590400262e-7)*gconst8);
IkReal x1510=((6.39999590400262e-7)*gconst7);
IkReal x1511=(gconst7*pz);
IkReal x1512=((0.99999936000041)*gconst8);
IkReal x1513=((5.24799664891173e-7)*gconst7);
IkReal x1514=((0.000799999488000328)*gconst7);
IkReal x1515=((0.000655999581113967)*gconst8);
IkReal x1516=(py*x1502);
IkReal x1517=(py*x1503);
IkReal x1518=(px*x1503);
IkReal x1519=(px*x1502);
evalcond[0]=((-0.109999996583991)+(((0.999999680000154)*x1517))+(((-0.999999680000154)*x1519))+(((-0.000799999744000123)*x1518))+(((-0.000799999744000123)*x1516)));
evalcond[1]=((((0.000363679731622504)*cj2*gconst7))+(((-0.999999680000154)*x1518))+(((-0.999999680000154)*x1516))+(((-0.000799999744000123)*x1517))+(((0.000799999744000123)*x1519))+(((-0.00032649)*gconst7))+(((-0.409999870604041)*gconst8))+(((0.151999567696146)*cj2*gconst8))+(((-0.151999567696146)*gconst7*sj2))+(((0.000363679731622504)*gconst8*sj2)));
evalcond[2]=(((x1509*x1519))+((x1514*x1517))+(((0.303999617864764)*sj2))+(((-1.0)*x1507*x1516))+(((-1.0)*x1507*x1518))+(((-0.000799999744000123)*x1511))+(((-0.999999680000154)*x1504))+((x1506*x1518))+((x1506*x1516))+(((-0.00024208)*cj2))+(((-1.0)*x1514*x1519))+(((-1.0)*x1509*x1517))+(((7.29951532831019e-7)*gconst7)));
evalcond[3]=((-0.410000000596062)+((x1510*x1519))+(((0.303999617864764)*cj2))+(((-1.0)*x1507*x1517))+(((-0.999999680000154)*x1511))+((x1507*x1519))+(((-1.0)*x1510*x1517))+(((0.000799999744000123)*x1504))+(((-1.0)*x1514*x1518))+(((-1.0)*x1514*x1516))+(((-1.0)*x1512*x1516))+(((-1.0)*x1512*x1518))+(((-7.29951532831019e-7)*gconst8))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749761762)+((x1513*x1519))+(((-1.0)*x1515*x1517))+(((-1.16792170505974e-9)*x1517))+(((1.16792207879462e-9)*pz))+(((-1.0)*x1513*x1517))+(((0.000655999791033799)*x1504))+(((1.16792170505974e-9)*x1519))+(((-1.0)*pp))+((x1515*x1519))+(((-5.98560257791628e-7)*gconst8))+(((-1.45990213132467e-6)*x1516))+(((-1.45990213132467e-6)*x1518))+(((-0.819999738792249)*x1511))+(((-1.0)*x1508*x1516))+(((-1.0)*x1508*x1518))+(((-1.0)*x1505*x1518))+(((-1.0)*x1505*x1516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1520=pz*pz;
IkReal x1521=((((-1.0)*pp))+x1520);
IkReal x1522=((((1250.0)*pp))+(((-1250.0)*x1520)));
IkReal x1524 = ((x1522*x1522)+(x1521*x1521));
if(IKabs(x1524)==0){
continue;
}
IkReal x1523=pow(x1524,-0.5);
CheckValue<IkReal> x1525 = IKatan2WithCheck(IkReal(x1521),IkReal(x1522),IKFAST_ATAN2_MAGTHRESH);
if(!x1525.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x1525.value))));
IkReal gconst10=((1.0)*x1521*x1523);
IkReal gconst11=((-1.0)*x1522*x1523);
IkReal x1526=pz*pz;
IkReal x1527=j1;
CheckValue<IkReal> x1530 = IKatan2WithCheck(IkReal(((((-1.0)*pp))+x1526)),IkReal(((((1250.0)*pp))+(((-1250.0)*x1526)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1530.valid){
continue;
}
IkReal x1528=x1530.value;
IkReal x1529=x1528;
if((((9.86960440108936)+((x1528*x1529))+((j1*x1529))+((j1*x1527))+((x1527*x1528))+(((-3.14159265358979)*j1))+(((-3.14159265358979)*x1527))+(((-3.14159265358979)*x1529))+(((-3.14159265358979)*x1528)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((x1528*x1529))+((j1*x1529))+((j1*x1527))+((x1527*x1528))+(((-3.14159265358979)*j1))+(((-3.14159265358979)*x1527))+(((-3.14159265358979)*x1529))+(((-3.14159265358979)*x1528)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x1531=pz*pz;
IkReal x1532=((((-1.0)*pp))+x1531);
IkReal x1533=x1522;
CheckValue<IkReal> x1536 = IKatan2WithCheck(IkReal(x1532),IkReal(x1533),IKFAST_ATAN2_MAGTHRESH);
if(!x1536.valid){
continue;
}
IkReal x1534=((1.0)*(x1536.value));
IkReal x1537 = ((x1532*x1532)+(x1533*x1533));
if(IKabs(x1537)==0){
continue;
}
IkReal x1535=pow(x1537,-0.5);
sj1=gconst10;
cj1=gconst11;
j1=((3.14159265)+(((-1.0)*x1534)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x1534)));
IkReal gconst10=((1.0)*x1532*x1535);
IkReal gconst11=((-1.0)*x1533*x1535);
IkReal x1538=((((-1.0)*pp))+(pz*pz));
j0eval[0]=x1538;
j0eval[1]=IKsign(x1538);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1539=(gconst11*py);
IkReal x1540=((0.000799999488000328)*pz);
IkReal x1541=(cj2*py);
IkReal x1542=((0.000243199616467947)*sj2);
IkReal x1543=((0.999999680000154)*gconst10);
IkReal x1544=((0.303999520584933)*sj2);
IkReal x1545=(gconst10*px);
IkReal x1546=(gconst10*py);
IkReal x1547=(cj2*px);
IkReal x1548=((0.000799999744000123)*gconst11);
IkReal x1549=(gconst11*px);
IkReal x1550=((0.99999936000041)*pz);
IkReal x1551=((6.39999590400262e-7)*gconst10*pz);
CheckValue<IkReal> x1552 = IKatan2WithCheck(IkReal(((((-8.87298922464771e-5)*x1546))+(((-1.0)*x1540*x1549))+((x1539*x1550))+(((-1.0)*py*x1544))+(((-1.9366393802755e-7)*x1547))+(((-6.39999590400262e-7)*pz*x1545))+((x1540*x1546))+((px*x1542))+(((0.000242079922534437)*x1541))+(((7.03999527577844e-8)*x1539))+(((8.79999409472305e-5)*x1549))+(((-0.109999925600077)*x1545)))),IkReal(((((0.109999925600077)*x1546))+(((-8.87298922464771e-5)*x1545))+(((1.9366393802755e-7)*x1541))+((x1539*x1540))+(((7.03999527577844e-8)*x1549))+(((-8.79999409472305e-5)*x1539))+(((-1.0)*py*x1542))+(((-1.0)*px*x1544))+((x1549*x1550))+((x1540*x1545))+(((6.39999590400262e-7)*pz*x1546))+(((0.000242079922534437)*x1547)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1552.valid){
continue;
}
CheckValue<IkReal> x1553=IKPowWithIntegerCheck(IKsign((((pp*x1543))+(((pz*pz)*((x1548+(((-1.0)*x1543))))))+(((-1.0)*pp*x1548)))),-1);
if(!x1553.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1552.value)+(((1.5707963267949)*(x1553.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1554=IKsin(j0);
IkReal x1555=IKcos(j0);
IkReal x1556=(gconst10*px);
IkReal x1557=(gconst11*py);
IkReal x1558=(gconst10*py);
IkReal x1559=(gconst10*pz);
IkReal x1560=(gconst11*pz);
IkReal x1561=((0.000799999488000328)*x1554);
IkReal x1562=(px*x1554);
IkReal x1563=(py*x1555);
IkReal x1564=((0.000655999581113967)*x1555);
IkReal x1565=((6.39999590400262e-7)*x1555);
IkReal x1566=(px*x1555);
IkReal x1567=(py*x1554);
IkReal x1568=((0.000799999488000328)*x1555);
IkReal x1569=((0.99999936000041)*x1554);
evalcond[0]=((-0.109999996583991)+(((-0.999999680000154)*x1562))+(((0.999999680000154)*x1563))+(((-0.000799999744000123)*x1566))+(((-0.000799999744000123)*x1567)));
evalcond[1]=((((0.000363679731622504)*cj2*gconst10))+(((-0.151999567696146)*gconst10*sj2))+(((-0.00032649)*gconst10))+(((0.151999567696146)*cj2*gconst11))+(((-0.999999680000154)*x1567))+(((-0.999999680000154)*x1566))+(((-0.409999870604041)*gconst11))+(((0.000799999744000123)*x1562))+(((0.000363679731622504)*gconst11*sj2))+(((-0.000799999744000123)*x1563)));
evalcond[2]=((((0.99999936000041)*x1555*x1556))+(((0.303999617864764)*sj2))+(((-1.0)*x1557*x1561))+(((-1.0)*x1557*x1565))+(((-1.0)*x1556*x1561))+(((-0.00024208)*cj2))+(((-0.999999680000154)*x1560))+(((6.39999590400262e-7)*gconst11*x1562))+(((7.29951532831019e-7)*gconst10))+(((-0.000799999488000328)*gconst11*x1566))+(((-0.000799999744000123)*x1559))+((x1558*x1569))+((x1558*x1568)));
evalcond[3]=((-0.410000000596062)+(((-7.29951532831019e-7)*gconst11))+(((0.303999617864764)*cj2))+(((6.39999590400262e-7)*x1554*x1556))+(((-1.0)*x1557*x1568))+(((-1.0)*x1557*x1569))+((gconst11*px*x1561))+(((-0.99999936000041)*gconst11*x1566))+(((-1.0)*x1556*x1568))+(((0.000799999744000123)*x1560))+(((-0.999999680000154)*x1559))+(((-1.0)*x1558*x1565))+(((-1.0)*x1558*x1561))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749761762)+(((5.24799664891173e-7)*x1554*x1556))+(((-0.000655999581113967)*x1554*x1558))+(((1.16792207879462e-9)*pz))+(((0.000655999581113967)*gconst11*x1562))+(((-0.819999476392458)*x1554*x1557))+(((1.16792170505974e-9)*x1562))+(((-1.0)*x1557*x1564))+(((-5.98560257791628e-7)*gconst11))+(((-1.0)*x1556*x1564))+(((-1.0)*pp))+(((-0.819999738792249)*x1559))+(((-1.16792170505974e-9)*x1563))+(((0.000655999791033799)*x1560))+(((-5.24799664891173e-7)*x1555*x1558))+(((-0.819999476392458)*gconst11*x1566))+(((-1.45990213132467e-6)*x1566))+(((-1.45990213132467e-6)*x1567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1570=(gconst11*px);
IkReal x1571=((0.000121599615245046)*cj2);
IkReal x1572=(gconst10*sj2);
IkReal x1573=(gconst10*py);
IkReal x1574=(gconst11*py);
IkReal x1575=(gconst10*px);
IkReal x1576=((0.000363679615245046)*sj2);
IkReal x1577=((0.000363679615245046)*cj2);
IkReal x1578=((2.90943692196037e-7)*cj2);
IkReal x1579=((2.90943692196037e-7)*sj2);
IkReal x1580=((0.151999519056308)*cj2);
CheckValue<IkReal> x1581=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1581.valid){
continue;
}
CheckValue<IkReal> x1582 = IKatan2WithCheck(IkReal(((((0.109999961384009)*px))+((x1570*x1571))+((x1570*x1579))+(((-1.0)*x1573*x1577))+((x1575*x1578))+(((-0.000121599615245046)*px*x1572))+(((-1.0)*x1574*x1576))+(((0.151999519056308)*py*x1572))+(((-2.611919164186e-7)*x1575))+(((-1.0)*x1574*x1580))+(((0.00032648989552325)*x1573))+(((0.409999739404145)*x1574))+(((8.79999691072071e-5)*py))+(((-0.000327999791523316)*x1570)))),IkReal(((((0.000327999791523316)*x1574))+(((0.000121599615245046)*py*x1572))+(((-1.0)*x1571*x1574))+(((-1.0)*x1575*x1577))+(((-1.0)*x1573*x1578))+(((-1.0)*x1570*x1576))+(((0.151999519056308)*px*x1572))+(((-1.0)*x1570*x1580))+(((-1.0)*x1574*x1579))+(((-0.109999961384009)*py))+(((2.611919164186e-7)*x1573))+(((0.00032648989552325)*x1575))+(((0.409999739404145)*x1570))+(((8.79999691072071e-5)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1582.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1581.value)))+(x1582.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1583=IKsin(j0);
IkReal x1584=IKcos(j0);
IkReal x1585=(gconst10*px);
IkReal x1586=(gconst11*py);
IkReal x1587=(gconst10*py);
IkReal x1588=(gconst10*pz);
IkReal x1589=(gconst11*pz);
IkReal x1590=((0.000799999488000328)*x1583);
IkReal x1591=(px*x1583);
IkReal x1592=(py*x1584);
IkReal x1593=((0.000655999581113967)*x1584);
IkReal x1594=((6.39999590400262e-7)*x1584);
IkReal x1595=(px*x1584);
IkReal x1596=(py*x1583);
IkReal x1597=((0.000799999488000328)*x1584);
IkReal x1598=((0.99999936000041)*x1583);
evalcond[0]=((-0.109999996583991)+(((-0.999999680000154)*x1591))+(((0.999999680000154)*x1592))+(((-0.000799999744000123)*x1596))+(((-0.000799999744000123)*x1595)));
evalcond[1]=((((0.000363679731622504)*cj2*gconst10))+(((-0.151999567696146)*gconst10*sj2))+(((-0.00032649)*gconst10))+(((0.151999567696146)*cj2*gconst11))+(((-0.999999680000154)*x1595))+(((-0.999999680000154)*x1596))+(((-0.409999870604041)*gconst11))+(((0.000363679731622504)*gconst11*sj2))+(((0.000799999744000123)*x1591))+(((-0.000799999744000123)*x1592)));
evalcond[2]=((((0.303999617864764)*sj2))+(((-1.0)*x1585*x1590))+((x1587*x1598))+((x1587*x1597))+(((-0.999999680000154)*x1589))+(((-0.00024208)*cj2))+(((-0.000799999488000328)*gconst11*x1595))+(((7.29951532831019e-7)*gconst10))+(((6.39999590400262e-7)*gconst11*x1591))+(((0.99999936000041)*x1584*x1585))+(((-1.0)*x1586*x1590))+(((-1.0)*x1586*x1594))+(((-0.000799999744000123)*x1588)));
evalcond[3]=((-0.410000000596062)+(((-7.29951532831019e-7)*gconst11))+(((-1.0)*x1585*x1597))+(((0.303999617864764)*cj2))+(((-0.99999936000041)*gconst11*x1595))+(((-0.999999680000154)*x1588))+((gconst11*px*x1590))+(((0.000799999744000123)*x1589))+(((-1.0)*x1586*x1598))+(((-1.0)*x1586*x1597))+(((6.39999590400262e-7)*x1583*x1585))+(((-1.0)*x1587*x1590))+(((-1.0)*x1587*x1594))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749761762)+(((-1.0)*x1585*x1593))+(((-0.819999476392458)*x1583*x1586))+(((1.16792207879462e-9)*pz))+(((-5.24799664891173e-7)*x1584*x1587))+(((5.24799664891173e-7)*x1583*x1585))+(((0.000655999581113967)*gconst11*x1591))+(((-5.98560257791628e-7)*gconst11))+(((1.16792170505974e-9)*x1591))+(((0.000655999791033799)*x1589))+(((-1.0)*pp))+(((-0.819999738792249)*x1588))+(((-1.16792170505974e-9)*x1592))+(((-0.000655999581113967)*x1583*x1587))+(((-1.0)*x1586*x1593))+(((-1.45990213132467e-6)*x1596))+(((-1.45990213132467e-6)*x1595))+(((-0.819999476392458)*gconst11*x1595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1599=((8.87298922464771e-5)*cj1);
IkReal x1600=(py*sj1);
IkReal x1601=((0.000243199616467947)*cj2);
IkReal x1602=((0.000799999744000123)*sj1);
IkReal x1603=((0.303999520584933)*cj2);
IkReal x1604=((0.999999680000154)*cj1);
IkReal x1605=((0.000242079922534437)*sj2);
IkReal x1606=((1.9366393802755e-7)*sj2);
IkReal x1607=((0.000799999488000328)*pz);
IkReal x1608=(px*sj1);
IkReal x1609=((0.99999936000041)*pz);
IkReal x1610=(cj1*py);
IkReal x1611=(cj1*px);
IkReal x1612=((6.39999590400262e-7)*pz);
CheckValue<IkReal> x1613=IKPowWithIntegerCheck(IKsign(((((pz*pz)*((x1602+x1604))))+(((-1.0)*pp*x1604))+(((-1.0)*pp*x1602)))),-1);
if(!x1613.valid){
continue;
}
CheckValue<IkReal> x1614 = IKatan2WithCheck(IkReal(((((-1.0)*x1607*x1608))+(((0.109999925600077)*x1611))+(((-0.0003279998955169)*px))+((x1600*x1609))+(((-1.0)*py*x1605))+(((-1.0)*py*x1603))+(((0.409999869396124)*py))+(((8.79999409472305e-5)*x1608))+((py*x1599))+((px*x1601))+((px*x1606))+(((7.03999527577844e-8)*x1600))+(((-1.0)*x1607*x1610))+((x1611*x1612)))),IkReal(((((0.0003279998955169)*py))+(((-1.0)*x1610*x1612))+((x1600*x1607))+(((-1.0)*py*x1606))+(((-1.0)*py*x1601))+(((0.409999869396124)*px))+((x1608*x1609))+(((-1.0)*px*x1603))+(((-1.0)*px*x1605))+(((7.03999527577844e-8)*x1608))+((px*x1599))+(((-8.79999409472305e-5)*x1600))+(((-1.0)*x1607*x1611))+(((-0.109999925600077)*x1610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1614.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1613.value)))+(x1614.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1615=IKsin(j0);
IkReal x1616=IKcos(j0);
IkReal x1617=((0.000655999581113967)*cj1);
IkReal x1618=((0.99999936000041)*cj1);
IkReal x1619=((0.000799999488000328)*sj1);
IkReal x1620=((0.000655999581113967)*sj1);
IkReal x1621=(cj1*pz);
IkReal x1622=(pz*sj1);
IkReal x1623=((6.39999590400262e-7)*cj1);
IkReal x1624=((0.99999936000041)*sj1);
IkReal x1625=((0.819999476392458)*cj1);
IkReal x1626=((0.000799999488000328)*cj1);
IkReal x1627=((6.39999590400262e-7)*sj1);
IkReal x1628=((5.24799664891173e-7)*sj1);
IkReal x1629=(py*x1616);
IkReal x1630=(px*x1615);
IkReal x1631=(px*x1616);
IkReal x1632=(py*x1615);
evalcond[0]=((-0.109999996583991)+(((-0.999999680000154)*x1630))+(((0.999999680000154)*x1629))+(((-0.000799999744000123)*x1631))+(((-0.000799999744000123)*x1632)));
evalcond[1]=((((0.000363679731622504)*cj2*sj1))+(((-0.151999567696146)*sj1*sj2))+(((0.000363679731622504)*cj1*sj2))+(((-0.000799999744000123)*x1629))+(((-0.00032649)*sj1))+(((-0.999999680000154)*x1632))+(((-0.999999680000154)*x1631))+(((0.151999567696146)*cj1*cj2))+(((-0.409999870604041)*cj1))+(((0.000799999744000123)*x1630)));
evalcond[2]=((((0.303999617864764)*sj2))+(((-0.000799999744000123)*x1622))+((x1624*x1632))+((x1624*x1631))+(((-0.00024208)*cj2))+(((-1.0)*x1623*x1629))+((x1623*x1630))+(((-0.999999680000154)*x1621))+(((7.29951532831019e-7)*sj1))+((x1619*x1629))+(((-1.0)*x1619*x1630))+(((-1.0)*x1626*x1632))+(((-1.0)*x1626*x1631)));
evalcond[3]=((-0.410000000596062)+((x1627*x1630))+(((0.000799999744000123)*x1621))+(((0.303999617864764)*cj2))+(((-0.999999680000154)*x1622))+(((-1.0)*x1627*x1629))+(((-1.0)*x1619*x1632))+(((-1.0)*x1619*x1631))+(((-1.0)*x1626*x1629))+(((-1.0)*x1618*x1632))+(((-1.0)*x1618*x1631))+(((-7.29951532831019e-7)*cj1))+(((0.00024208)*sj2))+((x1626*x1630)));
evalcond[4]=((-0.0635841749761762)+(((-5.98560257791628e-7)*cj1))+(((0.000655999791033799)*x1621))+(((-1.0)*x1620*x1632))+(((-1.0)*x1620*x1631))+(((-1.45990213132467e-6)*x1631))+(((-1.45990213132467e-6)*x1632))+(((1.16792207879462e-9)*pz))+(((1.16792170505974e-9)*x1630))+((x1628*x1630))+(((-1.0)*x1617*x1629))+(((-1.16792170505974e-9)*x1629))+(((-1.0)*x1625*x1631))+(((-1.0)*x1625*x1632))+(((-0.819999738792249)*x1622))+(((-1.0)*pp))+(((-1.0)*x1628*x1629))+((x1617*x1630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1633=(cj1*py);
IkReal x1634=((0.109999925600077)*sj1);
IkReal x1635=((0.000799999488000328)*pz);
IkReal x1636=(px*sj1);
IkReal x1637=(cj2*py);
IkReal x1638=((0.000799999744000123)*cj1);
IkReal x1639=((0.000243199616467947)*sj2);
IkReal x1640=((0.303999520584933)*sj2);
IkReal x1641=((0.999999680000154)*sj1);
IkReal x1642=(cj2*px);
IkReal x1643=(cj1*px);
IkReal x1644=(py*sj1);
IkReal x1645=((6.39999590400262e-7)*pz);
IkReal x1646=((0.99999936000041)*pz);
CheckValue<IkReal> x1647 = IKatan2WithCheck(IkReal(((((-1.0)*py*x1640))+(((8.79999409472305e-5)*x1643))+(((-1.0)*x1635*x1643))+(((-1.0)*px*x1634))+(((0.000242079922534437)*x1637))+((px*x1639))+(((7.03999527577844e-8)*x1633))+(((-8.87298922464771e-5)*x1644))+((x1635*x1644))+(((-1.9366393802755e-7)*x1642))+(((-1.0)*x1636*x1645))+((x1633*x1646)))),IkReal(((((-8.79999409472305e-5)*x1633))+(((0.000242079922534437)*x1642))+((py*x1634))+(((-1.0)*px*x1640))+(((1.9366393802755e-7)*x1637))+(((7.03999527577844e-8)*x1643))+((x1644*x1645))+((x1635*x1636))+(((-8.87298922464771e-5)*x1636))+((x1633*x1635))+((x1643*x1646))+(((-1.0)*py*x1639)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1647.valid){
continue;
}
CheckValue<IkReal> x1648=IKPowWithIntegerCheck(IKsign(((((pz*pz)*((x1638+(((-1.0)*x1641))))))+((pp*x1641))+(((-1.0)*pp*x1638)))),-1);
if(!x1648.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1647.value)+(((1.5707963267949)*(x1648.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1649=IKsin(j0);
IkReal x1650=IKcos(j0);
IkReal x1651=((0.000655999581113967)*cj1);
IkReal x1652=((0.99999936000041)*cj1);
IkReal x1653=((0.000799999488000328)*sj1);
IkReal x1654=((0.000655999581113967)*sj1);
IkReal x1655=(cj1*pz);
IkReal x1656=(pz*sj1);
IkReal x1657=((6.39999590400262e-7)*cj1);
IkReal x1658=((0.99999936000041)*sj1);
IkReal x1659=((0.819999476392458)*cj1);
IkReal x1660=((0.000799999488000328)*cj1);
IkReal x1661=((6.39999590400262e-7)*sj1);
IkReal x1662=((5.24799664891173e-7)*sj1);
IkReal x1663=(py*x1650);
IkReal x1664=(px*x1649);
IkReal x1665=(px*x1650);
IkReal x1666=(py*x1649);
evalcond[0]=((-0.109999996583991)+(((-0.999999680000154)*x1664))+(((-0.000799999744000123)*x1666))+(((-0.000799999744000123)*x1665))+(((0.999999680000154)*x1663)));
evalcond[1]=((((0.000363679731622504)*cj2*sj1))+(((-0.151999567696146)*sj1*sj2))+(((0.000363679731622504)*cj1*sj2))+(((-0.999999680000154)*x1665))+(((-0.999999680000154)*x1666))+(((-0.00032649)*sj1))+(((0.151999567696146)*cj1*cj2))+(((-0.409999870604041)*cj1))+(((0.000799999744000123)*x1664))+(((-0.000799999744000123)*x1663)));
evalcond[2]=((((0.303999617864764)*sj2))+(((-0.999999680000154)*x1655))+(((-1.0)*x1653*x1664))+(((-0.00024208)*cj2))+(((-1.0)*x1657*x1663))+((x1658*x1665))+((x1658*x1666))+(((7.29951532831019e-7)*sj1))+((x1657*x1664))+(((-1.0)*x1660*x1665))+(((-1.0)*x1660*x1666))+(((-0.000799999744000123)*x1656))+((x1653*x1663)));
evalcond[3]=((-0.410000000596062)+((x1660*x1664))+(((0.303999617864764)*cj2))+(((-1.0)*x1661*x1663))+(((-1.0)*x1652*x1666))+(((-1.0)*x1652*x1665))+(((-0.999999680000154)*x1656))+(((-1.0)*x1653*x1665))+(((-1.0)*x1653*x1666))+(((-1.0)*x1660*x1663))+((x1661*x1664))+(((0.000799999744000123)*x1655))+(((-7.29951532831019e-7)*cj1))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749761762)+(((1.16792170505974e-9)*x1664))+(((-5.98560257791628e-7)*cj1))+(((-1.16792170505974e-9)*x1663))+(((-1.0)*x1662*x1663))+(((1.16792207879462e-9)*pz))+(((-1.0)*x1654*x1666))+(((-1.0)*x1654*x1665))+((x1662*x1664))+(((-1.0)*pp))+(((-0.819999738792249)*x1656))+(((0.000655999791033799)*x1655))+((x1651*x1664))+(((-1.45990213132467e-6)*x1666))+(((-1.45990213132467e-6)*x1665))+(((-1.0)*x1659*x1666))+(((-1.0)*x1659*x1665))+(((-1.0)*x1651*x1663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1667=(cj2*sj1);
IkReal x1668=((2.90943692196037e-7)*py);
IkReal x1669=(sj1*sj2);
IkReal x1670=(cj1*py);
IkReal x1671=((0.000363679615245046)*px);
IkReal x1672=(py*sj1);
IkReal x1673=(cj1*px);
IkReal x1674=(px*sj1);
IkReal x1675=(cj1*sj2);
IkReal x1676=(cj2*x1673);
CheckValue<IkReal> x1677=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1677.valid){
continue;
}
CheckValue<IkReal> x1678 = IKatan2WithCheck(IkReal(((((0.151999519056308)*py*x1669))+(((2.90943692196037e-7)*px*x1667))+(((0.109999961384009)*px))+(((-0.000363679615245046)*py*x1667))+(((-0.000327999791523316)*x1673))+(((-2.611919164186e-7)*x1674))+(((0.00032648989552325)*x1672))+(((-0.000121599615245046)*px*x1669))+(((0.000121599615245046)*x1676))+(((2.90943692196037e-7)*sj2*x1673))+(((0.409999739404145)*x1670))+(((-0.000363679615245046)*sj2*x1670))+(((-0.151999519056308)*cj2*x1670))+(((8.79999691072071e-5)*py)))),IkReal(((((0.000121599615245046)*py*x1669))+(((-1.0)*x1667*x1671))+(((-1.0)*x1668*x1675))+(((0.000327999791523316)*x1670))+(((0.00032648989552325)*x1674))+(((-1.0)*x1667*x1668))+(((-0.000121599615245046)*cj2*x1670))+(((-0.151999519056308)*x1676))+(((-1.0)*x1671*x1675))+(((-0.109999961384009)*py))+(((2.611919164186e-7)*x1672))+(((0.409999739404145)*x1673))+(((0.151999519056308)*px*x1669))+(((8.79999691072071e-5)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1678.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1677.value)))+(x1678.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1679=IKsin(j0);
IkReal x1680=IKcos(j0);
IkReal x1681=((0.000655999581113967)*cj1);
IkReal x1682=((0.99999936000041)*cj1);
IkReal x1683=((0.000799999488000328)*sj1);
IkReal x1684=((0.000655999581113967)*sj1);
IkReal x1685=(cj1*pz);
IkReal x1686=(pz*sj1);
IkReal x1687=((6.39999590400262e-7)*cj1);
IkReal x1688=((0.99999936000041)*sj1);
IkReal x1689=((0.819999476392458)*cj1);
IkReal x1690=((0.000799999488000328)*cj1);
IkReal x1691=((6.39999590400262e-7)*sj1);
IkReal x1692=((5.24799664891173e-7)*sj1);
IkReal x1693=(py*x1680);
IkReal x1694=(px*x1679);
IkReal x1695=(px*x1680);
IkReal x1696=(py*x1679);
evalcond[0]=((-0.109999996583991)+(((0.999999680000154)*x1693))+(((-0.000799999744000123)*x1695))+(((-0.000799999744000123)*x1696))+(((-0.999999680000154)*x1694)));
evalcond[1]=((((0.000363679731622504)*cj2*sj1))+(((-0.151999567696146)*sj1*sj2))+(((0.000363679731622504)*cj1*sj2))+(((-0.000799999744000123)*x1693))+(((-0.999999680000154)*x1695))+(((-0.999999680000154)*x1696))+(((-0.00032649)*sj1))+(((0.000799999744000123)*x1694))+(((0.151999567696146)*cj1*cj2))+(((-0.409999870604041)*cj1)));
evalcond[2]=((((0.303999617864764)*sj2))+(((-0.000799999744000123)*x1686))+((x1683*x1693))+(((-1.0)*x1687*x1693))+(((-1.0)*x1690*x1696))+(((-1.0)*x1690*x1695))+(((-0.999999680000154)*x1685))+(((-0.00024208)*cj2))+(((-1.0)*x1683*x1694))+((x1688*x1696))+((x1688*x1695))+(((7.29951532831019e-7)*sj1))+((x1687*x1694)));
evalcond[3]=((-0.410000000596062)+((x1690*x1694))+(((0.303999617864764)*cj2))+(((-1.0)*x1682*x1695))+(((-1.0)*x1682*x1696))+(((0.000799999744000123)*x1685))+((x1691*x1694))+(((-1.0)*x1690*x1693))+(((-0.999999680000154)*x1686))+(((-1.0)*x1691*x1693))+(((-1.0)*x1683*x1695))+(((-1.0)*x1683*x1696))+(((-7.29951532831019e-7)*cj1))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749761762)+(((-5.98560257791628e-7)*cj1))+(((-0.819999738792249)*x1686))+(((-1.0)*x1692*x1693))+(((-1.45990213132467e-6)*x1696))+(((-1.45990213132467e-6)*x1695))+(((0.000655999791033799)*x1685))+(((1.16792207879462e-9)*pz))+(((-1.0)*x1681*x1693))+(((-1.0)*x1684*x1696))+(((-1.0)*x1684*x1695))+((x1692*x1694))+(((-1.0)*pp))+(((-1.16792170505974e-9)*x1693))+(((1.16792170505974e-9)*x1694))+(((-1.0)*x1689*x1696))+(((-1.0)*x1689*x1695))+((x1681*x1694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1697=px*px;
IkReal x1698=py*py;
IkReal x1699=((0.999999680000154)*py);
IkReal x1700=((0.000799999744000123)*px);
IkReal x1701=(px*py);
IkReal x1702=((((0.000799999744000123)*py))+(((0.999999680000154)*px)));
IkReal x1703=((((9.34337065059978e-13)*py*pz))+(((-0.000799999488000328)*pp*py))+(((0.272615651527348)*px))+(((1.16792133132497e-9)*px*pz))+(((-0.99999936000041)*pp*px))+(((-1.58804378596069e-7)*py*sj2))+(((-0.000198505473245086)*px*sj2))+(((0.000218092521221878)*py))+(((-0.000199423621978091)*cj2*py))+(((-0.249279527472614)*cj2*px)));
CheckValue<IkReal> x1704=IKPowWithIntegerCheck(IKsign((((((x1699+(((-1.0)*x1700))))*(((((-1.16792095759033e-9)*x1698))+(((1.16792095759033e-9)*x1697))+(((-1.45990026265114e-6)*x1701))))))+((x1702*(((((-2.33584191518065e-9)*x1701))+(((-1.45990119698791e-6)*x1697))+(((-9.34336766072261e-13)*x1698)))))))),-1);
if(!x1704.valid){
continue;
}
CheckValue<IkReal> x1705 = IKatan2WithCheck(IkReal(((((1.02777041076246e-13)*x1698))+(((2.56942602690614e-10)*x1701))+(((1.60589126681634e-7)*x1697))+((x1703*(((((-1.0)*x1699))+x1700)))))),IkReal(((((-1.0)*x1702*x1703))+(((1.28471301345307e-10)*x1697))+(((-1.60589023904593e-7)*x1701))+(((-1.28471301345307e-10)*x1698)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1705.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1704.value)))+(x1705.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1706=IKcos(j0);
IkReal x1707=IKsin(j0);
IkReal x1708=px*px;
IkReal x1709=py*py;
IkReal x1710=((0.000218092521221878)*py);
IkReal x1711=((0.000218092521221878)*px);
IkReal x1712=(px*sj2);
IkReal x1713=(pp*py);
IkReal x1714=((9.34337065059978e-13)*pz);
IkReal x1715=(cj2*py);
IkReal x1716=(px*py);
IkReal x1717=(pp*px);
IkReal x1718=(px*pz);
IkReal x1719=(py*sj2);
IkReal x1720=(cj2*px);
IkReal x1721=(py*pz);
IkReal x1722=((1.16792095759033e-9)*x1709);
IkReal x1723=((9.34336766072261e-13)*x1708);
IkReal x1724=(py*x1714);
IkReal x1725=((9.34336766072261e-13)*x1709);
IkReal x1726=((2.33584191518065e-9)*x1716);
IkReal x1727=((0.000199423621978091)*x1715);
IkReal x1728=((1.58804378596069e-7)*x1719);
IkReal x1729=((0.000799999488000328)*x1713);
IkReal x1730=(px*x1714);
IkReal x1731=((1.16792095759033e-9)*x1708);
IkReal x1732=((1.86867353214452e-12)*x1716);
IkReal x1733=((0.000199423621978091)*x1720);
IkReal x1734=((1.58804378596069e-7)*x1712);
IkReal x1735=((0.000799999488000328)*x1717);
IkReal x1736=(x1730+x1711);
IkReal x1737=(x1724+x1710);
IkReal x1738=(x1731+(((-1.45990026265114e-6)*x1716))+(((-1.0)*x1722)));
IkReal x1739=(x1723+(((-1.0)*x1725))+(((-1.16792021012091e-9)*x1716)));
IkReal x1740=(x1728+x1729+x1727);
IkReal x1741=(x1733+x1735+x1734);
evalcond[0]=((-0.109999996583991)+((x1707*(((((-0.000799999744000123)*py))+(((-0.999999680000154)*px))))))+((x1706*(((((-0.000799999744000123)*px))+(((0.999999680000154)*py)))))));
evalcond[1]=(((x1706*x1738))+(((1.16792133132497e-9)*x1721))+x1741+(((0.272615651527348)*py))+(((-0.249279527472614)*x1715))+(((-0.99999936000041)*x1713))+(((-0.000198505473245086)*x1719))+((x1707*((x1726+(((-1.45990119698791e-6)*x1709))+(((-1.0)*x1723))))))+(((-1.0)*x1736)));
evalcond[2]=(((x1706*x1739))+(((1.27043502876855e-10)*x1712))+x1737+(((-1.74474016977503e-7)*px))+(((6.39999590400262e-7)*x1717))+(((-7.47469652047983e-16)*x1718))+((x1707*((x1732+(((-7.47469412857809e-16)*x1708))+(((-1.0)*x1722))))))+(((-1.0)*x1740))+(((1.59538897582473e-7)*x1720)));
evalcond[3]=(x1737+(((0.272615651527348)*px))+((x1706*(((((-1.45990119698791e-6)*x1708))+(((-1.0)*x1725))+(((-1.0)*x1726))))))+((x1707*x1738))+(((-0.99999936000041)*x1717))+(((-0.000198505473245086)*x1712))+(((-1.0)*x1740))+(((1.16792133132497e-9)*x1718))+(((-0.249279527472614)*x1720)));
evalcond[4]=(((x1706*(((((-7.47469412857809e-16)*x1709))+(((-1.0)*x1731))+(((-1.0)*x1732))))))+x1736+(((7.47469652047983e-16)*x1721))+((x1707*x1739))+(((-6.39999590400262e-7)*x1713))+(((-1.0)*x1741))+(((-1.27043502876855e-10)*x1719))+(((1.74474016977503e-7)*py))+(((-1.59538897582473e-7)*x1715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
j1eval[0]=((960.99503907157)+(((-1.0)*sj2))+(((-626.442284590877)*cj2)));
j1eval[1]=IKsign(((0.191204001333813)+(((-0.124639843650171)*cj2))+(((-0.000198964608098849)*sj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1742=(px*sj0);
IkReal x1743=(cj0*px);
IkReal x1744=(py*sj0);
IkReal x1745=((572571574.227864)*cj2);
IkReal x1746=(pz*sj2);
IkReal x1747=((458057.259382291)*cj2);
IkReal x1748=((0.000242079922534437)*sj2);
IkReal x1749=((0.151999761360084)*cj2);
IkReal x1750=((0.000121599809088067)*cj2);
IkReal x1751=((911896.710193791)*sj2);
IkReal x1752=(cj2*pz);
IkReal x1753=(cj0*py);
IkReal x1754=(sj2*x1753);
j1eval[0]=((1127.36519237651)+(((-1.0)*sj2))+(((-1.0)*x1747*x1753))+(((-417.948965750778)*cj2))+(((-911897.002000691)*x1752))+(((572571757.450738)*x1746))+(((-1.0)*x1744*x1751))+((x1742*x1747))+(((-1.0)*x1744*x1745))+(((-5687.66373014312)*pz))+(((1544438415.90797)*x1744))+(((1544438415.90797)*x1743))+(((729.517368155033)*sj2*x1742))+(((-1235550.73272637)*x1742))+(((-1.0)*x1743*x1751))+(((1235550.73272637)*x1753))+(((-729.517368155033)*x1754))+(((-1.0)*x1743*x1745)));
j1eval[1]=IKsign(((2.99280034007939e-7)+(((0.15199981)*x1746))+(((-1.10952317429454e-7)*cj2))+(((1.9366393802755e-7)*sj2*x1742))+(((-0.0003279998955169)*x1742))+(((0.0003279998955169)*x1753))+(((-1.50989600006603e-6)*pz))+(((-1.0)*x1750*x1753))+(((0.409999869396124)*x1743))+(((0.409999869396124)*x1744))+(((-0.00024208)*x1752))+(((-2.65468577557421e-10)*sj2))+(((-1.0)*x1744*x1749))+(((-1.0)*x1744*x1748))+((x1742*x1750))+(((-1.0)*x1743*x1749))+(((-1.0)*x1743*x1748))+(((-1.9366393802755e-7)*x1754))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1755=(cj2*pz);
IkReal x1756=(cj0*py);
IkReal x1757=((510233.517595919)*sj2);
IkReal x1758=((812.615028529444)*cj2);
IkReal x1759=((0.151999761360084)*sj2);
IkReal x1760=(py*sj0);
IkReal x1761=(pz*sj2);
IkReal x1762=(px*sj0);
IkReal x1763=(cj0*px);
IkReal x1764=((1015768.7856618)*cj2);
IkReal x1765=((0.000121599809088067)*sj2);
IkReal x1766=((637791896.994898)*sj2);
IkReal x1767=((0.000242079922534437)*cj2);
IkReal x1768=((1.9366393802755e-7)*cj2);
j1eval[0]=((-1.0)+(((-5.06842440998904)*x1762))+(((-1.0)*x1756*x1757))+(((1720362425.62642)*pz))+(((6335.5305124863)*x1763))+(((6335.5305124863)*x1760))+(((-1015769.11070776)*x1761))+(((-465.556579669044)*sj2))+(((-1.0)*x1763*x1766))+(((-637792101.088273)*x1755))+((x1757*x1762))+(((-1.0)*x1760*x1766))+(((1.11390772036664)*cj2))+(((-1.0)*x1758*x1762))+((x1756*x1758))+(((5.06842440998904)*x1756))+((x1760*x1764))+((x1763*x1764)));
j1eval[1]=IKsign(((-2.38321875953999e-10)+(((-1.0)*x1762*x1768))+(((-0.00024208)*x1761))+(((1.20791641351963e-9)*x1756))+(((-1.10952317429454e-7)*sj2))+(((-1.0)*x1759*x1760))+(((-1.0)*x1759*x1763))+(((0.410000000596062)*pz))+(((-0.15199981)*x1755))+((x1756*x1768))+(((1.50989551689954e-6)*x1760))+(((1.50989551689954e-6)*x1763))+(((-1.0)*x1756*x1765))+((x1762*x1765))+(((2.65468577557421e-10)*cj2))+(((-1.20791641351963e-9)*x1762))+((x1760*x1767))+((x1763*x1767))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1769=pz*pz;
IkReal x1770=cj2*cj2;
IkReal x1771=(cj0*px);
IkReal x1772=((0.99999936000041)*pz);
IkReal x1773=((0.151999761360084)*sj2);
IkReal x1774=(cj0*py);
IkReal x1775=((0.000121599809088067)*sj2);
IkReal x1776=(py*sj0);
IkReal x1777=((0.000799999488000328)*pz);
IkReal x1778=((0.000242079922534437)*cj2);
IkReal x1779=((6.39999590400262e-7)*pz);
IkReal x1780=((1.9366393802755e-7)*cj2);
IkReal x1781=(px*sj0);
IkReal x1782=(cj2*sj2);
CheckValue<IkReal> x1783 = IKatan2WithCheck(IkReal(((0.0462078104952378)+(((-0.0462077224556484)*x1770))+(((-7.90366992e-8)*cj2))+((x1779*x1781))+(((-1.0)*x1776*x1777))+(((-1.0)*x1771*x1777))+(((9.92528352366669e-5)*sj2))+(((-0.000147354554786284)*x1782))+(((-1.0)*x1774*x1779))+(((-0.999999680000154)*x1769)))),IkReal(((-0.000110558499438401)+(((-1.0)*x1772*x1776))+(((-7.29951532831019e-7)*pz))+((x1777*x1781))+(((-9.92527686758262e-5)*cj2))+(((-1.0)*x1771*x1772))+(((0.000147354554786284)*x1770))+(((-0.0462077224556484)*x1782))+(((0.124639803988231)*sj2))+(((0.000799999744000123)*x1769))+(((-1.0)*x1774*x1777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1783.valid){
continue;
}
CheckValue<IkReal> x1784=IKPowWithIntegerCheck(IKsign(((-2.38321875953999e-10)+((x1775*x1781))+(((1.20791641351963e-9)*x1774))+((x1771*x1778))+((x1776*x1778))+(((-1.10952317429454e-7)*sj2))+((x1774*x1780))+(((0.410000000596062)*pz))+(((1.50989551689954e-6)*x1771))+(((1.50989551689954e-6)*x1776))+(((-1.20791641351963e-9)*x1781))+(((-1.0)*x1771*x1773))+(((-1.0)*x1773*x1776))+(((2.65468577557421e-10)*cj2))+(((-0.15199981)*cj2*pz))+(((-1.0)*x1780*x1781))+(((-0.00024208)*pz*sj2))+(((-1.0)*x1774*x1775)))),-1);
if(!x1784.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1783.value)+(((1.5707963267949)*(x1784.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1785=IKcos(j1);
IkReal x1786=IKsin(j1);
IkReal x1787=(cj0*py);
IkReal x1788=(py*sj0);
IkReal x1789=(cj0*px);
IkReal x1790=(px*sj0);
IkReal x1791=(pz*x1785);
IkReal x1792=((0.819999476392458)*x1785);
IkReal x1793=(cj2*x1785);
IkReal x1794=((0.000799999488000328)*x1785);
IkReal x1795=((6.39999590400262e-7)*x1785);
IkReal x1796=((0.000363679731622504)*x1786);
IkReal x1797=((5.24799664891173e-7)*x1786);
IkReal x1798=((0.000799999488000328)*x1786);
IkReal x1799=((0.000655999581113967)*x1786);
IkReal x1800=((6.39999590400262e-7)*x1786);
IkReal x1801=((0.151999567696146)*x1786);
IkReal x1802=((0.99999936000041)*x1786);
IkReal x1803=((0.99999936000041)*x1785);
IkReal x1804=(sj2*x1785);
IkReal x1805=((0.000655999581113967)*x1785);
IkReal x1806=(pz*x1786);
evalcond[0]=((((-1.0)*sj2*x1796))+(((-1.0)*cj2*x1801))+(((0.409999870604041)*x1786))+(((-0.151999567696146)*x1804))+(((0.000363679731622504)*x1793))+(((-0.00032649)*x1785))+pz);
evalcond[1]=((((-0.409999870604041)*x1785))+(((-0.999999680000154)*x1788))+(((-0.999999680000154)*x1789))+(((0.000799999744000123)*x1790))+(((0.000363679731622504)*x1804))+(((-0.000799999744000123)*x1787))+((cj2*x1796))+(((-0.00032649)*x1786))+(((-1.0)*sj2*x1801))+(((0.151999567696146)*x1793)));
evalcond[2]=((((-1.0)*x1787*x1795))+(((0.303999617864764)*sj2))+(((-1.0)*x1790*x1798))+(((-0.000799999744000123)*x1806))+((x1788*x1802))+(((-1.0)*x1789*x1794))+((x1787*x1798))+(((-0.00024208)*cj2))+((x1789*x1802))+(((-1.0)*x1788*x1794))+((x1790*x1795))+(((7.29951532831019e-7)*x1786))+(((-0.999999680000154)*x1791)));
evalcond[3]=((-0.410000000596062)+(((-1.0)*x1787*x1794))+(((-1.0)*x1789*x1803))+(((0.000799999744000123)*x1791))+(((-7.29951532831019e-7)*x1785))+(((0.303999617864764)*cj2))+(((-1.0)*x1788*x1803))+(((-1.0)*x1789*x1798))+(((-1.0)*x1788*x1798))+((x1790*x1794))+((x1790*x1800))+(((-0.999999680000154)*x1806))+(((0.00024208)*sj2))+(((-1.0)*x1787*x1800)));
evalcond[4]=((-0.0635841749761762)+(((-1.0)*x1787*x1797))+(((1.16792207879462e-9)*pz))+(((-0.819999738792249)*x1806))+(((1.16792170505974e-9)*x1790))+(((0.000655999791033799)*x1791))+(((-1.0)*x1789*x1792))+(((-1.0)*x1789*x1799))+(((-1.45990213132467e-6)*x1789))+(((-1.45990213132467e-6)*x1788))+(((-1.0)*pp))+(((-1.0)*x1788*x1799))+(((-1.0)*x1788*x1792))+(((-1.16792170505974e-9)*x1787))+((x1790*x1797))+(((-5.98560257791628e-7)*x1785))+((x1790*x1805))+(((-1.0)*x1787*x1805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1807=pz*pz;
IkReal x1808=cj2*cj2;
IkReal x1809=(cj0*sj2);
IkReal x1810=(cj0*px);
IkReal x1811=((0.000799999488000328)*pz);
IkReal x1812=((0.151999761360084)*cj2);
IkReal x1813=(px*sj0);
IkReal x1814=((0.000121599809088067)*cj2);
IkReal x1815=(cj0*py);
IkReal x1816=((0.99999936000041)*pz);
IkReal x1817=(py*sj0);
IkReal x1818=((6.39999590400262e-7)*pz);
IkReal x1819=(cj2*sj2);
CheckValue<IkReal> x1820=IKPowWithIntegerCheck(IKsign(((2.99280034007939e-7)+(((-1.10952317429454e-7)*cj2))+(((1.9366393802755e-7)*sj2*x1813))+(((-1.0)*x1812*x1817))+(((0.0003279998955169)*x1815))+((x1813*x1814))+(((-1.0)*x1810*x1812))+(((-0.000242079922534437)*sj2*x1817))+(((-1.50989600006603e-6)*pz))+(((-0.00024208)*cj2*pz))+(((-1.0)*x1814*x1815))+(((-2.65468577557421e-10)*sj2))+(((0.409999869396124)*x1817))+(((0.409999869396124)*x1810))+(((0.15199981)*pz*sj2))+(((-0.0003279998955169)*x1813))+(((-0.000242079922534437)*px*x1809))+(((-1.9366393802755e-7)*py*x1809)))),-1);
if(!x1820.valid){
continue;
}
CheckValue<IkReal> x1821 = IKatan2WithCheck(IkReal(((-9.70648448467251e-5)+(((-0.0623197438093218)*sj2))+(((-7.29951532831019e-7)*pz))+(((-1.0)*x1811*x1815))+(((0.000248361525418669)*cj2))+(((0.000799999744000123)*x1807))+(((-1.0)*x1810*x1816))+(((-1.0)*x1816*x1817))+(((0.0462077224556484)*x1819))+((x1811*x1813))+(((-0.000147354554786284)*x1808)))),IkReal(((-0.168100035231631)+(((-1.0)*x1813*x1818))+(((-0.000147354554786284)*x1819))+(((0.000248361458857829)*sj2))+(((-0.0462077224556484)*x1808))+((x1815*x1818))+((x1811*x1817))+((x1810*x1811))+(((0.186959626834252)*cj2))+(((0.999999680000154)*x1807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1821.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1820.value)))+(x1821.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1822=IKcos(j1);
IkReal x1823=IKsin(j1);
IkReal x1824=(cj0*py);
IkReal x1825=(py*sj0);
IkReal x1826=(cj0*px);
IkReal x1827=(px*sj0);
IkReal x1828=(pz*x1822);
IkReal x1829=((0.819999476392458)*x1822);
IkReal x1830=(cj2*x1822);
IkReal x1831=((0.000799999488000328)*x1822);
IkReal x1832=((6.39999590400262e-7)*x1822);
IkReal x1833=((0.000363679731622504)*x1823);
IkReal x1834=((5.24799664891173e-7)*x1823);
IkReal x1835=((0.000799999488000328)*x1823);
IkReal x1836=((0.000655999581113967)*x1823);
IkReal x1837=((6.39999590400262e-7)*x1823);
IkReal x1838=((0.151999567696146)*x1823);
IkReal x1839=((0.99999936000041)*x1823);
IkReal x1840=((0.99999936000041)*x1822);
IkReal x1841=(sj2*x1822);
IkReal x1842=((0.000655999581113967)*x1822);
IkReal x1843=(pz*x1823);
evalcond[0]=((((0.409999870604041)*x1823))+(((-1.0)*sj2*x1833))+pz+(((-0.00032649)*x1822))+(((0.000363679731622504)*x1830))+(((-0.151999567696146)*x1841))+(((-1.0)*cj2*x1838)));
evalcond[1]=((((0.000799999744000123)*x1827))+((cj2*x1833))+(((0.000363679731622504)*x1841))+(((0.151999567696146)*x1830))+(((-1.0)*sj2*x1838))+(((-0.000799999744000123)*x1824))+(((-0.409999870604041)*x1822))+(((-0.00032649)*x1823))+(((-0.999999680000154)*x1825))+(((-0.999999680000154)*x1826)));
evalcond[2]=((((0.303999617864764)*sj2))+((x1826*x1839))+(((-1.0)*x1825*x1831))+(((7.29951532831019e-7)*x1823))+((x1824*x1835))+((x1827*x1832))+(((-1.0)*x1826*x1831))+(((-0.00024208)*cj2))+(((-0.000799999744000123)*x1843))+(((-1.0)*x1827*x1835))+((x1825*x1839))+(((-1.0)*x1824*x1832))+(((-0.999999680000154)*x1828)));
evalcond[3]=((-0.410000000596062)+(((0.000799999744000123)*x1828))+(((0.303999617864764)*cj2))+(((-7.29951532831019e-7)*x1822))+(((-0.999999680000154)*x1843))+(((-1.0)*x1825*x1835))+((x1827*x1837))+((x1827*x1831))+(((-1.0)*x1826*x1835))+(((-1.0)*x1825*x1840))+(((-1.0)*x1826*x1840))+(((-1.0)*x1824*x1831))+(((-1.0)*x1824*x1837))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749761762)+(((-0.819999738792249)*x1843))+(((1.16792170505974e-9)*x1827))+(((1.16792207879462e-9)*pz))+((x1827*x1842))+(((-1.0)*x1825*x1836))+((x1827*x1834))+(((-1.0)*x1824*x1842))+(((0.000655999791033799)*x1828))+(((-5.98560257791628e-7)*x1822))+(((-1.0)*x1826*x1829))+(((-1.0)*pp))+(((-1.0)*x1825*x1829))+(((-1.0)*x1826*x1836))+(((-1.45990213132467e-6)*x1825))+(((-1.45990213132467e-6)*x1826))+(((-1.16792170505974e-9)*x1824))+(((-1.0)*x1824*x1834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1844=(cj0*py);
IkReal x1845=(cj0*px);
IkReal x1846=((0.000121599615245046)*cj2);
IkReal x1847=((0.151999567696146)*pz);
IkReal x1848=(py*sj0);
IkReal x1849=((0.000363679615245046)*cj2);
IkReal x1850=((0.000363679615245046)*sj2);
IkReal x1851=((0.000121599615245046)*sj2);
IkReal x1852=((0.151999519056308)*cj2);
IkReal x1853=((0.151999519056308)*sj2);
IkReal x1854=(px*sj0);
IkReal x1855=((2.90943692196037e-7)*cj2);
IkReal x1856=((2.90943692196037e-7)*sj2);
IkReal x1857=((0.000363679731622504)*pz);
CheckValue<IkReal> x1858 = IKatan2WithCheck(IkReal(((((-1.0)*x1845*x1853))+(((-1.0)*x1848*x1853))+(((-0.409999870604041)*pz))+((x1851*x1854))+(((-0.00032648989552325)*x1848))+(((-0.00032648989552325)*x1845))+((x1845*x1849))+(((2.611919164186e-7)*x1854))+(((-2.611919164186e-7)*x1844))+((cj2*x1847))+((x1844*x1855))+((x1848*x1849))+((sj2*x1857))+(((-1.0)*x1854*x1855))+(((-1.0)*x1844*x1851)))),IkReal(((((-1.0)*cj2*x1857))+((x1848*x1852))+((x1848*x1850))+(((0.00032649)*pz))+(((-0.409999739404145)*x1848))+(((-0.409999739404145)*x1845))+(((-0.000327999791523316)*x1844))+((x1844*x1846))+((sj2*x1847))+((x1844*x1856))+((x1845*x1852))+((x1845*x1850))+(((0.000327999791523316)*x1854))+(((-1.0)*x1846*x1854))+(((-1.0)*x1854*x1856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1858.valid){
continue;
}
CheckValue<IkReal> x1859=IKPowWithIntegerCheck(IKsign(((0.191204001333813)+(((-0.124639843650171)*cj2))+(((-0.000198964608098849)*sj2)))),-1);
if(!x1859.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1858.value)+(((1.5707963267949)*(x1859.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1860=IKcos(j1);
IkReal x1861=IKsin(j1);
IkReal x1862=(cj0*py);
IkReal x1863=(py*sj0);
IkReal x1864=(cj0*px);
IkReal x1865=(px*sj0);
IkReal x1866=(pz*x1860);
IkReal x1867=((0.819999476392458)*x1860);
IkReal x1868=(cj2*x1860);
IkReal x1869=((0.000799999488000328)*x1860);
IkReal x1870=((6.39999590400262e-7)*x1860);
IkReal x1871=((0.000363679731622504)*x1861);
IkReal x1872=((5.24799664891173e-7)*x1861);
IkReal x1873=((0.000799999488000328)*x1861);
IkReal x1874=((0.000655999581113967)*x1861);
IkReal x1875=((6.39999590400262e-7)*x1861);
IkReal x1876=((0.151999567696146)*x1861);
IkReal x1877=((0.99999936000041)*x1861);
IkReal x1878=((0.99999936000041)*x1860);
IkReal x1879=(sj2*x1860);
IkReal x1880=((0.000655999581113967)*x1860);
IkReal x1881=(pz*x1861);
evalcond[0]=((((-0.00032649)*x1860))+(((-1.0)*cj2*x1876))+(((-1.0)*sj2*x1871))+pz+(((0.409999870604041)*x1861))+(((-0.151999567696146)*x1879))+(((0.000363679731622504)*x1868)));
evalcond[1]=((((-0.999999680000154)*x1864))+(((-0.999999680000154)*x1863))+(((-0.409999870604041)*x1860))+(((0.000363679731622504)*x1879))+(((-0.00032649)*x1861))+(((-1.0)*sj2*x1876))+((cj2*x1871))+(((0.000799999744000123)*x1865))+(((0.151999567696146)*x1868))+(((-0.000799999744000123)*x1862)));
evalcond[2]=((((-0.999999680000154)*x1866))+(((0.303999617864764)*sj2))+(((-1.0)*x1864*x1869))+((x1862*x1873))+((x1863*x1877))+((x1865*x1870))+(((-1.0)*x1863*x1869))+(((-0.00024208)*cj2))+(((7.29951532831019e-7)*x1861))+(((-1.0)*x1865*x1873))+(((-0.000799999744000123)*x1881))+(((-1.0)*x1862*x1870))+((x1864*x1877)));
evalcond[3]=((-0.410000000596062)+(((0.303999617864764)*cj2))+((x1865*x1875))+(((-1.0)*x1864*x1878))+(((-1.0)*x1864*x1873))+(((-1.0)*x1862*x1869))+(((-0.999999680000154)*x1881))+(((0.000799999744000123)*x1866))+((x1865*x1869))+(((-1.0)*x1863*x1873))+(((-1.0)*x1863*x1878))+(((-7.29951532831019e-7)*x1860))+(((-1.0)*x1862*x1875))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749761762)+(((-1.16792170505974e-9)*x1862))+(((-1.0)*x1864*x1867))+(((-5.98560257791628e-7)*x1860))+(((1.16792207879462e-9)*pz))+((x1865*x1880))+(((1.16792170505974e-9)*x1865))+((x1865*x1872))+(((-1.0)*x1864*x1874))+(((-1.0)*x1863*x1867))+(((-1.0)*pp))+(((-1.0)*x1863*x1874))+(((-1.0)*x1862*x1880))+(((-1.45990213132467e-6)*x1863))+(((-1.45990213132467e-6)*x1864))+(((-1.0)*x1862*x1872))+(((-0.819999738792249)*x1881))+(((0.000655999791033799)*x1866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1882=px*px;
IkReal x1883=py*py;
IkReal x1884=((0.000799999744000123)*px);
IkReal x1885=((0.999999680000154)*py);
IkReal x1886=(px*py);
IkReal x1887=((((0.000799999744000123)*py))+(((0.999999680000154)*px)));
IkReal x1888=((((1.16792133132497e-9)*py*pz))+(((0.000199423621978091)*cj2*px))+(((0.272615651527348)*py))+(((-0.000218092521221878)*px))+(((-0.000198505473245086)*py*sj2))+(((-0.99999936000041)*pp*py))+(((1.58804378596069e-7)*px*sj2))+(((0.000799999488000328)*pp*px))+(((-9.34337065059978e-13)*px*pz))+(((-0.249279527472614)*cj2*py)));
CheckValue<IkReal> x1889=IKPowWithIntegerCheck(IKsign((((x1887*(((((-1.45990026265114e-6)*x1886))+(((1.16792095759033e-9)*x1882))+(((-1.16792095759033e-9)*x1883))))))+((((x1885+(((-1.0)*x1884))))*(((((-1.45990119698791e-6)*x1883))+(((2.33584191518065e-9)*x1886))+(((-9.34336766072261e-13)*x1882)))))))),-1);
if(!x1889.valid){
continue;
}
CheckValue<IkReal> x1890 = IKatan2WithCheck(IkReal(((((1.60589023904593e-7)*x1886))+(((1.28471301345307e-10)*x1883))+(((-1.28471301345307e-10)*x1882))+((x1888*((x1884+(((-1.0)*x1885)))))))),IkReal(((((-1.60589126681634e-7)*x1883))+(((2.56942602690614e-10)*x1886))+(((-1.0)*x1887*x1888))+(((-1.02777041076246e-13)*x1882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1890.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1889.value)))+(x1890.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1891=IKcos(j0);
IkReal x1892=IKsin(j0);
IkReal x1893=px*px;
IkReal x1894=py*py;
IkReal x1895=((0.000218092521221878)*py);
IkReal x1896=((0.000218092521221878)*px);
IkReal x1897=(px*sj2);
IkReal x1898=(pp*py);
IkReal x1899=((9.34337065059978e-13)*pz);
IkReal x1900=(cj2*py);
IkReal x1901=(px*py);
IkReal x1902=(pp*px);
IkReal x1903=(px*pz);
IkReal x1904=(py*sj2);
IkReal x1905=(cj2*px);
IkReal x1906=(py*pz);
IkReal x1907=((1.16792095759033e-9)*x1894);
IkReal x1908=((9.34336766072261e-13)*x1893);
IkReal x1909=(py*x1899);
IkReal x1910=((9.34336766072261e-13)*x1894);
IkReal x1911=((2.33584191518065e-9)*x1901);
IkReal x1912=((0.000199423621978091)*x1900);
IkReal x1913=((1.58804378596069e-7)*x1904);
IkReal x1914=((0.000799999488000328)*x1898);
IkReal x1915=(px*x1899);
IkReal x1916=((1.16792095759033e-9)*x1893);
IkReal x1917=((1.86867353214452e-12)*x1901);
IkReal x1918=((0.000199423621978091)*x1905);
IkReal x1919=((1.58804378596069e-7)*x1897);
IkReal x1920=((0.000799999488000328)*x1902);
IkReal x1921=(x1915+x1896);
IkReal x1922=(x1909+x1895);
IkReal x1923=((((-1.45990026265114e-6)*x1901))+x1916+(((-1.0)*x1907)));
IkReal x1924=(x1908+(((-1.0)*x1910))+(((-1.16792021012091e-9)*x1901)));
IkReal x1925=(x1913+x1912+x1914);
IkReal x1926=(x1920+x1919+x1918);
evalcond[0]=((-0.109999996583991)+((x1892*(((((-0.000799999744000123)*py))+(((-0.999999680000154)*px))))))+((x1891*(((((-0.000799999744000123)*px))+(((0.999999680000154)*py)))))));
evalcond[1]=((((0.272615651527348)*py))+(((1.16792133132497e-9)*x1906))+(((-0.99999936000041)*x1898))+(((-1.0)*x1921))+x1926+(((-0.000198505473245086)*x1904))+((x1892*((x1911+(((-1.45990119698791e-6)*x1894))+(((-1.0)*x1908))))))+(((-0.249279527472614)*x1900))+((x1891*x1923)));
evalcond[2]=((((6.39999590400262e-7)*x1902))+(((1.59538897582473e-7)*x1905))+(((-7.47469652047983e-16)*x1903))+(((-1.74474016977503e-7)*px))+(((-1.0)*x1925))+x1922+(((1.27043502876855e-10)*x1897))+((x1892*(((((-7.47469412857809e-16)*x1893))+x1917+(((-1.0)*x1907))))))+((x1891*x1924)));
evalcond[3]=((((0.272615651527348)*px))+(((1.16792133132497e-9)*x1903))+(((-0.99999936000041)*x1902))+((x1892*x1923))+(((-1.0)*x1925))+x1922+((x1891*(((((-1.45990119698791e-6)*x1893))+(((-1.0)*x1910))+(((-1.0)*x1911))))))+(((-0.000198505473245086)*x1897))+(((-0.249279527472614)*x1905)));
evalcond[4]=((((-6.39999590400262e-7)*x1898))+(((-1.59538897582473e-7)*x1900))+((x1891*(((((-7.47469412857809e-16)*x1894))+(((-1.0)*x1916))+(((-1.0)*x1917))))))+((x1892*x1924))+(((-1.0)*x1926))+x1921+(((7.47469652047983e-16)*x1906))+(((-1.27043502876855e-10)*x1904))+(((1.74474016977503e-7)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
j1eval[0]=((960.99503907157)+(((-1.0)*sj2))+(((-626.442284590877)*cj2)));
j1eval[1]=IKsign(((0.191204001333813)+(((-0.124639843650171)*cj2))+(((-0.000198964608098849)*sj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1927=(px*sj0);
IkReal x1928=(cj0*px);
IkReal x1929=(py*sj0);
IkReal x1930=((572571574.227864)*cj2);
IkReal x1931=(pz*sj2);
IkReal x1932=((458057.259382291)*cj2);
IkReal x1933=((0.000242079922534437)*sj2);
IkReal x1934=((0.151999761360084)*cj2);
IkReal x1935=((0.000121599809088067)*cj2);
IkReal x1936=((911896.710193791)*sj2);
IkReal x1937=(cj2*pz);
IkReal x1938=(cj0*py);
IkReal x1939=(sj2*x1938);
j1eval[0]=((1127.36519237651)+(((-1.0)*x1928*x1936))+(((-1.0)*x1928*x1930))+(((-1.0)*sj2))+(((-911897.002000691)*x1937))+(((729.517368155033)*sj2*x1927))+(((-417.948965750778)*cj2))+(((-1.0)*x1932*x1938))+(((-729.517368155033)*x1939))+(((-1.0)*x1929*x1930))+(((-1.0)*x1929*x1936))+(((572571757.450738)*x1931))+(((-1235550.73272637)*x1927))+(((-5687.66373014312)*pz))+(((1544438415.90797)*x1929))+(((1544438415.90797)*x1928))+((x1927*x1932))+(((1235550.73272637)*x1938)));
j1eval[1]=IKsign(((2.99280034007939e-7)+(((-1.0)*x1928*x1934))+(((-1.0)*x1928*x1933))+(((-1.10952317429454e-7)*cj2))+(((0.409999869396124)*x1928))+(((0.409999869396124)*x1929))+(((1.9366393802755e-7)*sj2*x1927))+(((0.0003279998955169)*x1938))+(((-1.9366393802755e-7)*x1939))+(((-0.00024208)*x1937))+(((-1.50989600006603e-6)*pz))+(((-1.0)*x1929*x1934))+(((-1.0)*x1929*x1933))+(((-2.65468577557421e-10)*sj2))+((x1927*x1935))+(((0.15199981)*x1931))+(((-0.0003279998955169)*x1927))+(((-1.0)*x1935*x1938))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1940=(cj2*pz);
IkReal x1941=(cj0*py);
IkReal x1942=((510233.517595919)*sj2);
IkReal x1943=((812.615028529444)*cj2);
IkReal x1944=((0.151999761360084)*sj2);
IkReal x1945=(py*sj0);
IkReal x1946=(pz*sj2);
IkReal x1947=(px*sj0);
IkReal x1948=(cj0*px);
IkReal x1949=((1015768.7856618)*cj2);
IkReal x1950=((0.000121599809088067)*sj2);
IkReal x1951=((637791896.994898)*sj2);
IkReal x1952=((0.000242079922534437)*cj2);
IkReal x1953=((1.9366393802755e-7)*cj2);
j1eval[0]=((-1.0)+(((-1.0)*x1948*x1951))+((x1945*x1949))+(((-1015769.11070776)*x1946))+(((-637792101.088273)*x1940))+(((6335.5305124863)*x1948))+(((6335.5305124863)*x1945))+(((1720362425.62642)*pz))+(((-1.0)*x1943*x1947))+(((-1.0)*x1945*x1951))+(((-465.556579669044)*sj2))+((x1941*x1943))+(((1.11390772036664)*cj2))+((x1942*x1947))+(((-1.0)*x1941*x1942))+(((-5.06842440998904)*x1947))+((x1948*x1949))+(((5.06842440998904)*x1941)));
j1eval[1]=IKsign(((-2.38321875953999e-10)+((x1945*x1952))+(((-1.10952317429454e-7)*sj2))+(((0.410000000596062)*pz))+(((-1.0)*x1947*x1953))+(((-0.15199981)*x1940))+(((-1.0)*x1944*x1945))+(((-1.0)*x1944*x1948))+((x1941*x1953))+(((-1.0)*x1941*x1950))+((x1948*x1952))+(((2.65468577557421e-10)*cj2))+(((-0.00024208)*x1946))+(((-1.20791641351963e-9)*x1947))+((x1947*x1950))+(((1.50989551689954e-6)*x1945))+(((1.50989551689954e-6)*x1948))+(((1.20791641351963e-9)*x1941))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1954=pz*pz;
IkReal x1955=cj2*cj2;
IkReal x1956=(cj0*px);
IkReal x1957=((0.99999936000041)*pz);
IkReal x1958=((0.151999761360084)*sj2);
IkReal x1959=(cj0*py);
IkReal x1960=((0.000121599809088067)*sj2);
IkReal x1961=(py*sj0);
IkReal x1962=((0.000799999488000328)*pz);
IkReal x1963=((0.000242079922534437)*cj2);
IkReal x1964=((6.39999590400262e-7)*pz);
IkReal x1965=((1.9366393802755e-7)*cj2);
IkReal x1966=(px*sj0);
IkReal x1967=(cj2*sj2);
CheckValue<IkReal> x1968=IKPowWithIntegerCheck(IKsign(((-2.38321875953999e-10)+(((-1.0)*x1959*x1960))+((x1959*x1965))+((x1956*x1963))+(((-1.0)*x1958*x1961))+(((-1.10952317429454e-7)*sj2))+(((-1.0)*x1965*x1966))+(((0.410000000596062)*pz))+(((-1.20791641351963e-9)*x1966))+((x1961*x1963))+((x1960*x1966))+(((2.65468577557421e-10)*cj2))+(((1.20791641351963e-9)*x1959))+(((-0.15199981)*cj2*pz))+(((-0.00024208)*pz*sj2))+(((1.50989551689954e-6)*x1956))+(((-1.0)*x1956*x1958))+(((1.50989551689954e-6)*x1961)))),-1);
if(!x1968.valid){
continue;
}
CheckValue<IkReal> x1969 = IKatan2WithCheck(IkReal(((0.0462078104952378)+(((-1.0)*x1959*x1964))+(((-1.0)*x1956*x1962))+(((-7.90366992e-8)*cj2))+((x1964*x1966))+(((-0.999999680000154)*x1954))+(((-0.000147354554786284)*x1967))+(((-1.0)*x1961*x1962))+(((9.92528352366669e-5)*sj2))+(((-0.0462077224556484)*x1955)))),IkReal(((-0.000110558499438401)+(((-1.0)*x1957*x1961))+(((-1.0)*x1959*x1962))+(((-7.29951532831019e-7)*pz))+(((-9.92527686758262e-5)*cj2))+(((0.000147354554786284)*x1955))+(((0.124639803988231)*sj2))+((x1962*x1966))+(((0.000799999744000123)*x1954))+(((-0.0462077224556484)*x1967))+(((-1.0)*x1956*x1957)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1969.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1968.value)))+(x1969.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1970=IKcos(j1);
IkReal x1971=IKsin(j1);
IkReal x1972=(cj0*py);
IkReal x1973=(py*sj0);
IkReal x1974=(cj0*px);
IkReal x1975=(px*sj0);
IkReal x1976=(pz*x1970);
IkReal x1977=((0.819999476392458)*x1970);
IkReal x1978=(cj2*x1970);
IkReal x1979=((0.000799999488000328)*x1970);
IkReal x1980=((6.39999590400262e-7)*x1970);
IkReal x1981=((0.000363679731622504)*x1971);
IkReal x1982=((5.24799664891173e-7)*x1971);
IkReal x1983=((0.000799999488000328)*x1971);
IkReal x1984=((0.000655999581113967)*x1971);
IkReal x1985=((6.39999590400262e-7)*x1971);
IkReal x1986=((0.151999567696146)*x1971);
IkReal x1987=((0.99999936000041)*x1971);
IkReal x1988=((0.99999936000041)*x1970);
IkReal x1989=(sj2*x1970);
IkReal x1990=((0.000655999581113967)*x1970);
IkReal x1991=(pz*x1971);
evalcond[0]=((((-0.151999567696146)*x1989))+(((-1.0)*cj2*x1986))+(((-1.0)*sj2*x1981))+(((0.409999870604041)*x1971))+pz+(((-0.00032649)*x1970))+(((0.000363679731622504)*x1978)));
evalcond[1]=(((cj2*x1981))+(((0.151999567696146)*x1978))+(((-0.999999680000154)*x1973))+(((-0.999999680000154)*x1974))+(((-1.0)*sj2*x1986))+(((-0.000799999744000123)*x1972))+(((0.000799999744000123)*x1975))+(((-0.00032649)*x1971))+(((0.000363679731622504)*x1989))+(((-0.409999870604041)*x1970)));
evalcond[2]=(((x1972*x1983))+(((0.303999617864764)*sj2))+((x1975*x1980))+(((-0.999999680000154)*x1976))+(((7.29951532831019e-7)*x1971))+(((-1.0)*x1974*x1979))+(((-1.0)*x1972*x1980))+(((-1.0)*x1973*x1979))+(((-1.0)*x1975*x1983))+(((-0.00024208)*cj2))+((x1973*x1987))+(((-0.000799999744000123)*x1991))+((x1974*x1987)));
evalcond[3]=((-0.410000000596062)+(((-0.999999680000154)*x1991))+(((0.303999617864764)*cj2))+((x1975*x1985))+((x1975*x1979))+(((-1.0)*x1973*x1988))+(((-1.0)*x1973*x1983))+(((-1.0)*x1972*x1985))+(((-7.29951532831019e-7)*x1970))+(((-1.0)*x1974*x1983))+(((-1.0)*x1974*x1988))+(((-1.0)*x1972*x1979))+(((0.000799999744000123)*x1976))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749761762)+((x1975*x1990))+(((0.000655999791033799)*x1976))+(((1.16792207879462e-9)*pz))+((x1975*x1982))+(((-1.45990213132467e-6)*x1974))+(((-1.45990213132467e-6)*x1973))+(((-1.0)*x1974*x1977))+(((-1.0)*x1973*x1984))+(((-1.0)*x1972*x1982))+(((-1.0)*x1973*x1977))+(((-1.0)*x1974*x1984))+(((1.16792170505974e-9)*x1975))+(((-1.0)*pp))+(((-1.0)*x1972*x1990))+(((-1.16792170505974e-9)*x1972))+(((-5.98560257791628e-7)*x1970))+(((-0.819999738792249)*x1991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1992=pz*pz;
IkReal x1993=cj2*cj2;
IkReal x1994=(cj0*sj2);
IkReal x1995=(cj0*px);
IkReal x1996=((0.000799999488000328)*pz);
IkReal x1997=((0.151999761360084)*cj2);
IkReal x1998=(px*sj0);
IkReal x1999=((0.000121599809088067)*cj2);
IkReal x2000=(cj0*py);
IkReal x2001=((0.99999936000041)*pz);
IkReal x2002=(py*sj0);
IkReal x2003=((6.39999590400262e-7)*pz);
IkReal x2004=(cj2*sj2);
CheckValue<IkReal> x2005=IKPowWithIntegerCheck(IKsign(((2.99280034007939e-7)+(((-1.10952317429454e-7)*cj2))+(((-0.000242079922534437)*sj2*x2002))+(((0.409999869396124)*x1995))+(((0.409999869396124)*x2002))+(((-0.000242079922534437)*px*x1994))+(((1.9366393802755e-7)*sj2*x1998))+((x1998*x1999))+(((-1.50989600006603e-6)*pz))+(((0.0003279998955169)*x2000))+(((-1.9366393802755e-7)*py*x1994))+(((-0.00024208)*cj2*pz))+(((-1.0)*x1995*x1997))+(((-2.65468577557421e-10)*sj2))+(((0.15199981)*pz*sj2))+(((-1.0)*x1997*x2002))+(((-0.0003279998955169)*x1998))+(((-1.0)*x1999*x2000)))),-1);
if(!x2005.valid){
continue;
}
CheckValue<IkReal> x2006 = IKatan2WithCheck(IkReal(((-9.70648448467251e-5)+(((-0.0623197438093218)*sj2))+((x1996*x1998))+(((0.0462077224556484)*x2004))+(((-7.29951532831019e-7)*pz))+(((0.000248361525418669)*cj2))+(((0.000799999744000123)*x1992))+(((-1.0)*x1995*x2001))+(((-1.0)*x2001*x2002))+(((-1.0)*x1996*x2000))+(((-0.000147354554786284)*x1993)))),IkReal(((-0.168100035231631)+(((-1.0)*x1998*x2003))+((x2000*x2003))+(((-0.000147354554786284)*x2004))+(((0.000248361458857829)*sj2))+((x1995*x1996))+(((-0.0462077224556484)*x1993))+(((0.999999680000154)*x1992))+((x1996*x2002))+(((0.186959626834252)*cj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2006.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2005.value)))+(x2006.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2007=IKcos(j1);
IkReal x2008=IKsin(j1);
IkReal x2009=(cj0*py);
IkReal x2010=(py*sj0);
IkReal x2011=(cj0*px);
IkReal x2012=(px*sj0);
IkReal x2013=(pz*x2007);
IkReal x2014=((0.819999476392458)*x2007);
IkReal x2015=(cj2*x2007);
IkReal x2016=((0.000799999488000328)*x2007);
IkReal x2017=((6.39999590400262e-7)*x2007);
IkReal x2018=((0.000363679731622504)*x2008);
IkReal x2019=((5.24799664891173e-7)*x2008);
IkReal x2020=((0.000799999488000328)*x2008);
IkReal x2021=((0.000655999581113967)*x2008);
IkReal x2022=((6.39999590400262e-7)*x2008);
IkReal x2023=((0.151999567696146)*x2008);
IkReal x2024=((0.99999936000041)*x2008);
IkReal x2025=((0.99999936000041)*x2007);
IkReal x2026=(sj2*x2007);
IkReal x2027=((0.000655999581113967)*x2007);
IkReal x2028=(pz*x2008);
evalcond[0]=((((-1.0)*cj2*x2023))+(((-0.151999567696146)*x2026))+(((-0.00032649)*x2007))+(((0.409999870604041)*x2008))+(((0.000363679731622504)*x2015))+pz+(((-1.0)*sj2*x2018)));
evalcond[1]=((((0.000799999744000123)*x2012))+(((-0.999999680000154)*x2011))+(((-0.999999680000154)*x2010))+(((-0.000799999744000123)*x2009))+(((-0.00032649)*x2008))+(((0.151999567696146)*x2015))+(((-1.0)*sj2*x2023))+((cj2*x2018))+(((0.000363679731622504)*x2026))+(((-0.409999870604041)*x2007)));
evalcond[2]=((((0.303999617864764)*sj2))+(((-1.0)*x2010*x2016))+(((-1.0)*x2009*x2017))+(((-0.999999680000154)*x2013))+((x2009*x2020))+(((-0.000799999744000123)*x2028))+(((-0.00024208)*cj2))+(((-1.0)*x2011*x2016))+(((7.29951532831019e-7)*x2008))+((x2012*x2017))+((x2010*x2024))+((x2011*x2024))+(((-1.0)*x2012*x2020)));
evalcond[3]=((-0.410000000596062)+(((0.000799999744000123)*x2013))+(((0.303999617864764)*cj2))+(((-1.0)*x2009*x2016))+(((-7.29951532831019e-7)*x2007))+(((-1.0)*x2011*x2020))+(((-1.0)*x2011*x2025))+(((-1.0)*x2009*x2022))+(((-0.999999680000154)*x2028))+(((-1.0)*x2010*x2020))+(((-1.0)*x2010*x2025))+((x2012*x2022))+((x2012*x2016))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749761762)+(((-1.45990213132467e-6)*x2011))+(((-1.45990213132467e-6)*x2010))+(((0.000655999791033799)*x2013))+(((-1.0)*x2010*x2014))+(((-1.0)*x2009*x2019))+(((1.16792170505974e-9)*x2012))+(((1.16792207879462e-9)*pz))+(((-1.0)*x2011*x2021))+(((-1.0)*x2009*x2027))+(((-5.98560257791628e-7)*x2007))+(((-1.0)*x2010*x2021))+(((-1.0)*pp))+(((-0.819999738792249)*x2028))+((x2012*x2027))+(((-1.0)*x2011*x2014))+((x2012*x2019))+(((-1.16792170505974e-9)*x2009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2029=(cj0*py);
IkReal x2030=(cj0*px);
IkReal x2031=((0.000121599615245046)*cj2);
IkReal x2032=((0.151999567696146)*pz);
IkReal x2033=(py*sj0);
IkReal x2034=((0.000363679615245046)*cj2);
IkReal x2035=((0.000363679615245046)*sj2);
IkReal x2036=((0.000121599615245046)*sj2);
IkReal x2037=((0.151999519056308)*cj2);
IkReal x2038=((0.151999519056308)*sj2);
IkReal x2039=(px*sj0);
IkReal x2040=((2.90943692196037e-7)*cj2);
IkReal x2041=((2.90943692196037e-7)*sj2);
IkReal x2042=((0.000363679731622504)*pz);
CheckValue<IkReal> x2043 = IKatan2WithCheck(IkReal(((((-0.409999870604041)*pz))+((x2030*x2034))+((x2033*x2034))+(((-0.00032648989552325)*x2033))+(((-0.00032648989552325)*x2030))+(((-1.0)*x2039*x2040))+(((-2.611919164186e-7)*x2029))+(((-1.0)*x2029*x2036))+((x2029*x2040))+(((-1.0)*x2030*x2038))+((cj2*x2032))+((x2036*x2039))+((sj2*x2042))+(((2.611919164186e-7)*x2039))+(((-1.0)*x2033*x2038)))),IkReal(((((-1.0)*cj2*x2042))+((sj2*x2032))+((x2030*x2035))+((x2030*x2037))+((x2033*x2037))+((x2033*x2035))+(((0.00032649)*pz))+(((-1.0)*x2039*x2041))+((x2029*x2041))+(((-0.409999739404145)*x2030))+(((-0.409999739404145)*x2033))+((x2029*x2031))+(((0.000327999791523316)*x2039))+(((-1.0)*x2031*x2039))+(((-0.000327999791523316)*x2029)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2043.valid){
continue;
}
CheckValue<IkReal> x2044=IKPowWithIntegerCheck(IKsign(((0.191204001333813)+(((-0.124639843650171)*cj2))+(((-0.000198964608098849)*sj2)))),-1);
if(!x2044.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2043.value)+(((1.5707963267949)*(x2044.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2045=IKcos(j1);
IkReal x2046=IKsin(j1);
IkReal x2047=(cj0*py);
IkReal x2048=(py*sj0);
IkReal x2049=(cj0*px);
IkReal x2050=(px*sj0);
IkReal x2051=(pz*x2045);
IkReal x2052=((0.819999476392458)*x2045);
IkReal x2053=(cj2*x2045);
IkReal x2054=((0.000799999488000328)*x2045);
IkReal x2055=((6.39999590400262e-7)*x2045);
IkReal x2056=((0.000363679731622504)*x2046);
IkReal x2057=((5.24799664891173e-7)*x2046);
IkReal x2058=((0.000799999488000328)*x2046);
IkReal x2059=((0.000655999581113967)*x2046);
IkReal x2060=((6.39999590400262e-7)*x2046);
IkReal x2061=((0.151999567696146)*x2046);
IkReal x2062=((0.99999936000041)*x2046);
IkReal x2063=((0.99999936000041)*x2045);
IkReal x2064=(sj2*x2045);
IkReal x2065=((0.000655999581113967)*x2045);
IkReal x2066=(pz*x2046);
evalcond[0]=((((-0.151999567696146)*x2064))+(((-0.00032649)*x2045))+(((0.409999870604041)*x2046))+(((-1.0)*cj2*x2061))+(((-1.0)*sj2*x2056))+pz+(((0.000363679731622504)*x2053)));
evalcond[1]=((((0.000363679731622504)*x2064))+(((-0.00032649)*x2046))+(((0.000799999744000123)*x2050))+(((-1.0)*sj2*x2061))+(((0.151999567696146)*x2053))+(((-0.000799999744000123)*x2047))+(((-0.409999870604041)*x2045))+(((-0.999999680000154)*x2048))+(((-0.999999680000154)*x2049))+((cj2*x2056)));
evalcond[2]=((((0.303999617864764)*sj2))+((x2049*x2062))+((x2047*x2058))+(((-0.999999680000154)*x2051))+(((-0.00024208)*cj2))+(((-1.0)*x2048*x2054))+(((-1.0)*x2049*x2054))+(((-1.0)*x2050*x2058))+((x2048*x2062))+((x2050*x2055))+(((7.29951532831019e-7)*x2046))+(((-1.0)*x2047*x2055))+(((-0.000799999744000123)*x2066)));
evalcond[3]=((-0.410000000596062)+(((0.303999617864764)*cj2))+(((-7.29951532831019e-7)*x2045))+(((0.000799999744000123)*x2051))+(((-1.0)*x2047*x2060))+(((-1.0)*x2048*x2058))+(((-1.0)*x2049*x2058))+(((-1.0)*x2049*x2063))+(((-0.999999680000154)*x2066))+((x2050*x2060))+((x2050*x2054))+(((-1.0)*x2048*x2063))+(((-1.0)*x2047*x2054))+(((0.00024208)*sj2)));
evalcond[4]=((-0.0635841749761762)+(((-5.98560257791628e-7)*x2045))+(((-1.16792170505974e-9)*x2047))+(((-0.819999738792249)*x2066))+(((1.16792207879462e-9)*pz))+(((0.000655999791033799)*x2051))+(((-1.0)*x2047*x2065))+(((1.16792170505974e-9)*x2050))+(((-1.0)*pp))+(((-1.0)*x2048*x2052))+(((-1.0)*x2048*x2059))+(((-1.0)*x2049*x2052))+(((-1.0)*x2049*x2059))+(((-1.45990213132467e-6)*x2049))+(((-1.45990213132467e-6)*x2048))+((x2050*x2065))+((x2050*x2057))+(((-1.0)*x2047*x2057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x84=((0.00238999621412756)*cj2);
IkReal x85=((0.99999714395497)*sj2);
IkReal x86=((0.999999680000154)*sj0);
IkReal x87=((0.000799999744000123)*sj0);
IkReal x88=((0.999999680000154)*cj0);
IkReal x89=((0.000799999744000123)*cj0);
IkReal x90=(x87+(((-1.0)*x88)));
IkReal x91=(x85+(((-1.0)*x84)));
IkReal x92=(x84+(((-1.0)*x85)));
IkReal x93=((-0.000799999744000123)*sj0);
IkReal x94=((-1.0)*cj1);
IkReal x95=(x89+x86);
IkReal x96=((((0.00238999621412756)*sj2))+(((0.99999714395497)*cj2)));
IkReal x97=(sj1*x91);
IkReal x98=(sj1*x96);
IkReal x99=(cj1*x96);
IkReal x100=(x98+((cj1*x91)));
IkReal x101=(x99+((sj1*x92)));
IkReal x102=(x97+((x94*x96)));
IkReal x103=(((x92*x94))+x98);
IkReal x104=(cj0*x101);
IkReal x105=(x101*x88);
IkReal x106=(x105+(((-1.0)*x101*x87)));
IkReal x107=(((x100*x93))+((x100*x88)));
IkReal x108=(((x100*x86))+((x100*x89)));
IkReal x109=(((x101*x86))+((x101*x89)));
new_r00=(((r10*x90))+((r00*x95)));
new_r01=(((r11*x90))+((r01*x95)));
new_r02=(((r12*x90))+((r02*x95)));
new_r10=(((r20*((x97+(((-1.0)*x99))))))+((r10*x108))+((r00*x107)));
new_r11=(((r21*x102))+((r01*x107))+((r11*x108)));
new_r12=(((r02*x107))+((r22*x102))+((r12*x108)));
new_r20=(((r10*x109))+((r20*x103))+((r00*x106)));
new_r21=(((r21*x103))+((r01*x106))+((r11*x109)));
new_r22=(((r22*(((((-1.0)*cj1*x92))+x98))))+((r02*((((x101*x93))+x105))))+((r12*x109)));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=((-1.00000126404839)*new_r22);
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[3];
IkReal x110=cj4*cj4;
IkReal x111=((15900025.1863751)*cj4);
IkReal x112=((10000031681.0)*sj4);
j3eval[0]=((1.00000252809838)+(((-1.0)*x110)));
j3eval[1]=IKsign(((10000031681.0)+(((-10000006400.0)*x110))));
j3eval[2]=((IKabs((((new_r02*x112))+(((-1.0)*new_r12*x111)))))+(IKabs((((new_r02*x111))+((new_r12*x112))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x113=new_r02*new_r02;
IkReal x114=new_r12*new_r12;
IkReal x115=((10000031681.0)*sj4);
IkReal x116=((15900025.1863751)*cj4);
j3eval[0]=(x113+x114);
j3eval[1]=IKsign(((((10000031681.0)*x114))+(((10000031681.0)*x113))));
j3eval[2]=((IKabs((((new_r02*x115))+(((-1.0)*new_r12*x116)))))+(IKabs((((new_r02*x116))+((new_r12*x115))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x117=cj4*cj4;
IkReal x118=new_r21*new_r21;
IkReal x119=new_r20*new_r20;
IkReal x120=sj4*sj4;
IkReal x121=((395554.226494205)*x120);
j5eval[0]=((1.00000252809838)+(((-1.0)*x117)));
j5eval[1]=IKsign(((10000031681.0)+(((-10000006400.0)*x117))));
j5eval[2]=(x119+x118+((x119*x121))+((x118*x121)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159518168818)+(IKabs(((-1.0)+(IKsign(cj4)))))+(IKabs(sj4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((628.931813867135)*new_r02)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-628.931813867135)*new_r12)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((628.931813867135)*new_r02))+IKsqr(((-628.931813867135)*new_r12))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((628.931813867135)*new_r02), ((-628.931813867135)*new_r12));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x122=IKsin(j3);
IkReal x123=IKcos(j3);
IkReal x124=(new_r12*x123);
IkReal x125=(new_r02*x122);
IkReal x126=(new_r12*x122);
IkReal x127=(new_r02*x123);
evalcond[0]=((((-0.00158999748136648)*x122))+new_r02);
evalcond[1]=((((0.00158999748136648)*x123))+new_r12);
evalcond[2]=(x126+x127);
evalcond[3]=((0.00158999748136648)+x124+(((-1.0)*x125)));
evalcond[4]=((-0.00158999547153527)+(((0.999998735953206)*x125))+(((-0.999998735953206)*x124)));
evalcond[5]=((2.52809118176272e-6)+(((-0.00158999697256753)*x125))+(((0.00158999697256753)*x124))+(((0.000799999744000123)*x127))+(((0.000799999744000123)*x126)));
evalcond[6]=((2.02247294541017e-9)+(((1.27199757805403e-6)*x124))+(((-1.27199757805403e-6)*x125))+(((-0.999999680000154)*x127))+(((-0.999999680000154)*x126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((628.931813867135)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((628.931813867135)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((628.931813867135)*new_r20))+IKsqr(((628.931813867135)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((628.931813867135)*new_r20), ((628.931813867135)*new_r21));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x128=IKsin(j5);
IkReal x129=IKcos(j5);
IkReal x130=(cj3*new_r00);
IkReal x131=(cj3*new_r10);
IkReal x132=(cj3*new_r11);
IkReal x133=((0.999998735953206)*sj3);
IkReal x134=(new_r00*sj3);
IkReal x135=(new_r01*sj3);
IkReal x136=(new_r11*sj3);
IkReal x137=(new_r10*sj3);
IkReal x138=(cj3*new_r01);
IkReal x139=((1.0)*x129);
IkReal x140=((0.999998735953206)*x128);
IkReal x141=((0.999998735953206)*x129);
evalcond[0]=(x136+x138+x128);
evalcond[1]=((((-0.00158999748136648)*x128))+new_r20);
evalcond[2]=((((-0.00158999748136648)*x129))+new_r21);
evalcond[3]=(x137+x130+(((-1.0)*x139)));
evalcond[4]=(x140+x131+(((-1.0)*x134)));
evalcond[5]=(x141+x132+(((-1.0)*x135)));
evalcond[6]=(((cj3*x128))+(((-1.0)*x129*x133))+new_r01);
evalcond[7]=(((sj3*x128))+((cj3*x141))+new_r11);
evalcond[8]=((((-1.0)*cj3*x139))+(((-1.0)*x128*x133))+new_r00);
evalcond[9]=((((-1.0)*sj3*x139))+((cj3*x140))+new_r10);
evalcond[10]=((((-0.999998735953206)*x131))+(((0.00158999748136648)*new_r20))+((new_r00*x133))+(((-1.0)*x128)));
evalcond[11]=((((-0.999998735953206)*x132))+(((0.00158999748136648)*new_r21))+((new_r01*x133))+(((-1.0)*x139)));
evalcond[12]=((((0.00158999697256753)*x131))+(((0.999998415953764)*new_r20))+(((-0.00158999697256753)*x134))+(((-0.000799999744000123)*x129))+(((0.000799999744000123)*x137))+(((0.000799999744000123)*x130)));
evalcond[13]=((((0.00158999697256753)*x132))+(((0.999998415953764)*new_r21))+(((-0.00158999697256753)*x135))+(((0.000799999744000123)*x136))+(((0.000799999744000123)*x138))+(((0.000799999744000123)*x128)));
evalcond[14]=((((0.999999680000154)*x129))+(((0.000799998732763011)*new_r20))+(((1.27199757805403e-6)*x131))+(((-1.27199757805403e-6)*x134))+(((-0.999999680000154)*x137))+(((-0.999999680000154)*x130)));
evalcond[15]=((((0.000799998732763011)*new_r21))+(((1.27199757805403e-6)*x132))+(((-0.999999680000154)*x128))+(((-1.27199757805403e-6)*x135))+(((-0.999999680000154)*x136))+(((-0.999999680000154)*x138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159518168818)+(IKabs(((1.0)+(IKsign(cj4)))))+(IKabs(sj4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-628.931813867135)*new_r02)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((628.931813867135)*new_r12)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-628.931813867135)*new_r02))+IKsqr(((628.931813867135)*new_r12))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-628.931813867135)*new_r02), ((628.931813867135)*new_r12));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x142=IKsin(j3);
IkReal x143=IKcos(j3);
IkReal x144=(new_r12*x143);
IkReal x145=(new_r02*x142);
IkReal x146=(new_r12*x142);
IkReal x147=(new_r02*x143);
evalcond[0]=((((0.00158999748136648)*x142))+new_r02);
evalcond[1]=((((-0.00158999748136648)*x143))+new_r12);
evalcond[2]=(x146+x147);
evalcond[3]=((-0.00158999748136648)+x144+(((-1.0)*x145)));
evalcond[4]=((0.00158999547153527)+(((-0.999998735953206)*x144))+(((0.999998735953206)*x145)));
evalcond[5]=((2.52809118176272e-6)+(((-0.00158999697256753)*x144))+(((0.00158999697256753)*x145))+(((-0.000799999744000123)*x147))+(((-0.000799999744000123)*x146)));
evalcond[6]=((2.02247294541017e-9)+(((0.999999680000154)*x147))+(((0.999999680000154)*x146))+(((1.27199757805403e-6)*x145))+(((-1.27199757805403e-6)*x144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((628.931813867135)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((628.931813867135)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((628.931813867135)*new_r20))+IKsqr(((628.931813867135)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((628.931813867135)*new_r20), ((628.931813867135)*new_r21));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x148=IKcos(j5);
IkReal x149=IKsin(j5);
IkReal x150=(new_r10*sj3);
IkReal x151=(cj3*new_r00);
IkReal x152=(cj3*new_r10);
IkReal x153=((0.999998735953206)*sj3);
IkReal x154=(new_r00*sj3);
IkReal x155=(new_r01*sj3);
IkReal x156=(cj3*new_r11);
IkReal x157=(new_r11*sj3);
IkReal x158=(cj3*new_r01);
IkReal x159=((1.0)*x149);
IkReal x160=((0.999998735953206)*x149);
IkReal x161=(cj3*x148);
evalcond[0]=(x151+x150+x148);
evalcond[1]=((((-0.00158999748136648)*x149))+new_r20);
evalcond[2]=((((-0.00158999748136648)*x148))+new_r21);
evalcond[3]=((((-1.0)*x159))+x157+x158);
evalcond[4]=(x160+x152+(((-1.0)*x154)));
evalcond[5]=((((0.999998735953206)*x148))+x156+(((-1.0)*x155)));
evalcond[6]=(x161+new_r00+(((-1.0)*x149*x153)));
evalcond[7]=(((cj3*x160))+new_r10+((sj3*x148)));
evalcond[8]=((((-1.0)*cj3*x159))+(((-1.0)*x148*x153))+new_r01);
evalcond[9]=((((0.999998735953206)*x161))+(((-1.0)*sj3*x159))+new_r11);
evalcond[10]=((((-1.0)*x159))+(((0.00158999748136648)*new_r20))+(((-0.999998735953206)*x152))+((new_r00*x153)));
evalcond[11]=(((new_r01*x153))+(((0.00158999748136648)*new_r21))+(((-0.999998735953206)*x156))+(((-1.0)*x148)));
evalcond[12]=((((0.00158999697256753)*x154))+(((-0.00158999697256753)*x152))+(((-0.999998415953764)*new_r20))+(((-0.000799999744000123)*x148))+(((-0.000799999744000123)*x150))+(((-0.000799999744000123)*x151)));
evalcond[13]=((((0.00158999697256753)*x155))+(((-0.00158999697256753)*x156))+(((-0.999998415953764)*new_r21))+(((-0.000799999744000123)*x157))+(((-0.000799999744000123)*x158))+(((0.000799999744000123)*x149)));
evalcond[14]=((((0.999999680000154)*x148))+(((1.27199757805403e-6)*x154))+(((-0.000799998732763011)*new_r20))+(((-1.27199757805403e-6)*x152))+(((0.999999680000154)*x150))+(((0.999999680000154)*x151)));
evalcond[15]=((((-0.999999680000154)*x149))+(((1.27199757805403e-6)*x155))+(((-0.000799998732763011)*new_r21))+(((-1.27199757805403e-6)*x156))+(((0.999999680000154)*x157))+(((0.999999680000154)*x158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r12*new_r12)+(new_r02*new_r02));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((628.931813867135)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((628.931813867135)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((628.931813867135)*new_r20))+IKsqr(((628.931813867135)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((628.931813867135)*new_r20), ((628.931813867135)*new_r21));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x162=IKcos(j5);
IkReal x163=IKsin(j5);
evalcond[0]=((-0.000799999744000123)*x162);
evalcond[1]=((0.000799999744000123)*x163);
evalcond[2]=((0.999999680000154)*x162);
evalcond[3]=((-0.999999680000154)*x163);
evalcond[4]=(new_r20+(((-0.00158999748136648)*x163)));
evalcond[5]=(new_r21+(((-0.00158999748136648)*x162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
new_r12=0;
new_r02=0;
j3eval[0]=cj5;
j3eval[1]=((new_r01*new_r01)+(new_r11*new_r11));
j3eval[2]=IKsign(cj5);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
new_r12=0;
new_r02=0;
j3eval[0]=sj5;
j3eval[1]=new_r01;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
new_r12=0;
new_r02=0;
j3eval[0]=new_r11;
j3eval[1]=sj5;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r00;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((1.00000126404839)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000126404839)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.00000126404839)*new_r01))+IKsqr(((-1.00000126404839)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((1.00000126404839)*new_r01), ((-1.00000126404839)*new_r11));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x164=IKcos(j3);
IkReal x165=IKsin(j3);
IkReal x166=((0.999998735953206)*x165);
IkReal x167=(new_r11*x164);
evalcond[0]=((((-1.0)*x166))+new_r01);
evalcond[1]=((((0.999998735953206)*x164))+new_r11);
evalcond[2]=(((new_r01*x164))+((new_r11*x165)));
evalcond[3]=((0.999998735953206)+(((-1.0)*new_r01*x165))+x167);
evalcond[4]=((-0.999997471908009)+((new_r01*x166))+(((-0.999998735953206)*x167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r00;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.00000126404839)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.00000126404839)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.00000126404839)*new_r01))+IKsqr(((1.00000126404839)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.00000126404839)*new_r01), ((1.00000126404839)*new_r11));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x168=IKcos(j3);
IkReal x169=IKsin(j3);
IkReal x170=((0.999998735953206)*x169);
IkReal x171=(new_r11*x168);
evalcond[0]=(x170+new_r01);
evalcond[1]=((((-0.999998735953206)*x168))+new_r11);
evalcond[2]=(((new_r01*x168))+((new_r11*x169)));
evalcond[3]=((-0.999998735953206)+(((-1.0)*new_r01*x169))+x171);
evalcond[4]=((0.999997471908009)+((new_r01*x170))+(((-0.999998735953206)*x171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r01;
evalcond[3]=new_r11;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((1.00000126404839)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000126404839)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.00000126404839)*new_r00))+IKsqr(((-1.00000126404839)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((1.00000126404839)*new_r00), ((-1.00000126404839)*new_r10));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x172=IKsin(j3);
IkReal x173=IKcos(j3);
IkReal x174=(new_r10*x173);
IkReal x175=((0.999998735953206)*x172);
evalcond[0]=((((-1.0)*x175))+new_r00);
evalcond[1]=((((0.999998735953206)*x173))+new_r10);
evalcond[2]=(((new_r00*x173))+((new_r10*x172)));
evalcond[3]=((0.999998735953206)+x174+(((-1.0)*new_r00*x172)));
evalcond[4]=((-0.999997471908009)+((new_r00*x175))+(((-0.999998735953206)*x174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r01;
evalcond[3]=new_r11;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.00000126404839)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.00000126404839)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.00000126404839)*new_r00))+IKsqr(((1.00000126404839)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.00000126404839)*new_r00), ((1.00000126404839)*new_r10));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x176=IKsin(j3);
IkReal x177=IKcos(j3);
IkReal x178=(new_r10*x177);
IkReal x179=((0.999998735953206)*x176);
evalcond[0]=(x179+new_r00);
evalcond[1]=((((-0.999998735953206)*x177))+new_r10);
evalcond[2]=(((new_r00*x177))+((new_r10*x176)));
evalcond[3]=((-0.999998735953206)+x178+(((-1.0)*new_r00*x176)));
evalcond[4]=((0.999997471908009)+((new_r00*x179))+(((-0.999998735953206)*x178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[4];
new_r12=0;
new_r02=0;
new_r01=0;
new_r11=0;
IkReal x180=new_r00*new_r00;
IkReal x181=new_r10*new_r10;
j3eval[0]=((((-1.0)*x181))+(((-1.0)*x180)));
j3eval[1]=IKsign(((((-1.25000476012753e+18)*x180))+(((-1.25000476012753e+18)*x181))));
j3eval[2]=9.98642804481707e+24;
j3eval[3]=sj5;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  || IKabs(j3eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x182=IKPowWithIntegerCheck(IKsign(((((-1.25000476012753e+18)*(new_r10*new_r10)))+(((-1.25000476012753e+18)*(new_r00*new_r00))))),-1);
if(!x182.valid){
continue;
}
CheckValue<IkReal> x183 = IKatan2WithCheck(IkReal(((3160131017033.48)*new_r00*sj5)),IkReal(((-3160131017033.48)*new_r10*sj5)),IKFAST_ATAN2_MAGTHRESH);
if(!x183.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x182.value)))+(x183.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x184=IKcos(j3);
IkReal x185=IKsin(j3);
IkReal x186=(new_r10*x184);
IkReal x187=(new_r00*x185);
evalcond[0]=(((new_r10*x185))+((new_r00*x184)));
evalcond[1]=((((-1.0)*x187))+x186);
evalcond[2]=((((-0.999998735953206)*x186))+(((0.999998735953206)*x187))+(((2.52809199075176e-6)*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x190=IKPowWithIntegerCheck(sj5,-1);
if(!x190.valid){
continue;
}
IkReal x188=x190.value;
IkReal x189=(new_r10*x188);
CheckValue<IkReal> x191=IKPowWithIntegerCheck(new_r11,-1);
if(!x191.valid){
continue;
}
if( IKabs(((1.00000126404839)*new_r01*x189*(x191.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000126404839)*x189)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.00000126404839)*new_r01*x189*(x191.value)))+IKsqr(((-1.00000126404839)*x189))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((1.00000126404839)*new_r01*x189*(x191.value)), ((-1.00000126404839)*x189));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x192=IKsin(j3);
IkReal x193=IKcos(j3);
IkReal x194=((0.999998735953206)*x192);
IkReal x195=(new_r11*x193);
IkReal x196=((0.999998735953206)*x193);
IkReal x197=((1.0)*x192);
evalcond[0]=(((new_r11*x192))+((new_r01*x193)));
evalcond[1]=(((new_r10*x192))+((new_r00*x193)));
evalcond[2]=((((-1.0)*cj5*x194))+new_r01);
evalcond[3]=(((cj5*x196))+new_r11);
evalcond[4]=((((-1.0)*sj5*x194))+new_r00);
evalcond[5]=(new_r10+((sj5*x196)));
evalcond[6]=(((new_r10*x193))+(((0.999998735953206)*sj5))+(((-1.0)*new_r00*x197)));
evalcond[7]=((((0.999998735953206)*cj5))+x195+(((-1.0)*new_r01*x197)));
evalcond[8]=((((-1.0)*sj5))+(((0.00158999748136648)*new_r20))+((new_r00*x194))+(((-1.0)*new_r10*x196)));
evalcond[9]=(((new_r01*x194))+(((0.00158999748136648)*new_r21))+(((-0.999998735953206)*x195))+(((-1.0)*cj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x200=IKPowWithIntegerCheck(sj5,-1);
if(!x200.valid){
continue;
}
IkReal x198=x200.value;
IkReal x199=(new_r00*x198);
CheckValue<IkReal> x201=IKPowWithIntegerCheck(new_r01,-1);
if(!x201.valid){
continue;
}
if( IKabs(((1.00000126404839)*x199)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000126404839)*new_r11*x199*(x201.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.00000126404839)*x199))+IKsqr(((-1.00000126404839)*new_r11*x199*(x201.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((1.00000126404839)*x199), ((-1.00000126404839)*new_r11*x199*(x201.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x202=IKsin(j3);
IkReal x203=IKcos(j3);
IkReal x204=((0.999998735953206)*x202);
IkReal x205=(new_r11*x203);
IkReal x206=((0.999998735953206)*x203);
IkReal x207=((1.0)*x202);
evalcond[0]=(((new_r11*x202))+((new_r01*x203)));
evalcond[1]=(((new_r10*x202))+((new_r00*x203)));
evalcond[2]=((((-1.0)*cj5*x204))+new_r01);
evalcond[3]=(((cj5*x206))+new_r11);
evalcond[4]=((((-1.0)*sj5*x204))+new_r00);
evalcond[5]=(new_r10+((sj5*x206)));
evalcond[6]=((((-1.0)*new_r00*x207))+((new_r10*x203))+(((0.999998735953206)*sj5)));
evalcond[7]=((((0.999998735953206)*cj5))+x205+(((-1.0)*new_r01*x207)));
evalcond[8]=((((-1.0)*sj5))+(((0.00158999748136648)*new_r20))+((new_r00*x204))+(((-1.0)*new_r10*x206)));
evalcond[9]=((((0.00158999748136648)*new_r21))+((new_r01*x204))+(((-0.999998735953206)*x205))+(((-1.0)*cj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x208 = IKatan2WithCheck(IkReal(((125000238.00615)*new_r01)),IkReal(((-125000238.00615)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x208.valid){
continue;
}
CheckValue<IkReal> x209=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x209.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x208.value)+(((1.5707963267949)*(x209.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x210=IKsin(j3);
IkReal x211=IKcos(j3);
IkReal x212=((0.999998735953206)*x210);
IkReal x213=(new_r11*x211);
IkReal x214=((0.999998735953206)*x211);
IkReal x215=((1.0)*x210);
evalcond[0]=(((new_r01*x211))+((new_r11*x210)));
evalcond[1]=(((new_r00*x211))+((new_r10*x210)));
evalcond[2]=((((-1.0)*cj5*x212))+new_r01);
evalcond[3]=(((cj5*x214))+new_r11);
evalcond[4]=((((-1.0)*sj5*x212))+new_r00);
evalcond[5]=(((sj5*x214))+new_r10);
evalcond[6]=((((0.999998735953206)*sj5))+(((-1.0)*new_r00*x215))+((new_r10*x211)));
evalcond[7]=((((0.999998735953206)*cj5))+x213+(((-1.0)*new_r01*x215)));
evalcond[8]=((((-1.0)*sj5))+(((0.00158999748136648)*new_r20))+(((-1.0)*new_r10*x214))+((new_r00*x212)));
evalcond[9]=((((-0.999998735953206)*x213))+(((0.00158999748136648)*new_r21))+((new_r01*x212))+(((-1.0)*cj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=1.0;
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j3eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3, j5]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x217 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x217.valid){
continue;
}
IkReal x216=x217.value;
j3array[0]=((-1.0)*x216);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x216)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=(((new_r01*(IKcos(j3))))+((new_r11*(IKsin(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=sj3;
j5eval[1]=1.0;
j5eval[2]=IKsign(sj3);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=cj3;
j5eval[1]=IKsign(cj3);
j5eval[2]=((1.0)+(new_r11*new_r11)+(((-1.0)*(new_r00*new_r00))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=cj3;
j5eval[1]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r11;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((0.999998735953206)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.999998735953206)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.999998735953206)*new_r00))+IKsqr(((0.999998735953206)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((0.999998735953206)*new_r00), ((0.999998735953206)*new_r01));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x218=IKcos(j5);
IkReal x219=IKsin(j5);
evalcond[0]=((-0.00158999748136648)*x219);
evalcond[1]=((-0.00158999748136648)*x218);
evalcond[2]=((-0.000799999744000123)*x218);
evalcond[3]=((0.000799999744000123)*x219);
evalcond[4]=((0.999999680000154)*x218);
evalcond[5]=((-0.999999680000154)*x219);
evalcond[6]=((((0.999998735953206)*new_r00))+(((-1.0)*x219)));
evalcond[7]=((((0.999998735953206)*new_r01))+(((-1.0)*x218)));
evalcond[8]=((((0.999998735953206)*x219))+(((-1.0)*new_r00)));
evalcond[9]=((((0.999998735953206)*x218))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r11;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.00000126404839)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000126404839)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.00000126404839)*new_r00))+IKsqr(((-1.00000126404839)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.00000126404839)*new_r00), ((-1.00000126404839)*new_r01));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x220=IKcos(j5);
IkReal x221=IKsin(j5);
evalcond[0]=((-0.00158999748136648)*x221);
evalcond[1]=((-0.00158999748136648)*x220);
evalcond[2]=((-0.000799999744000123)*x220);
evalcond[3]=((0.000799999744000123)*x221);
evalcond[4]=((0.999999680000154)*x220);
evalcond[5]=((-0.999999680000154)*x221);
evalcond[6]=((((0.999998735953206)*x221))+new_r00);
evalcond[7]=((((0.999998735953206)*x220))+new_r01);
evalcond[8]=((((-0.999998735953206)*new_r00))+(((-1.0)*x221)));
evalcond[9]=((((-0.999998735953206)*new_r01))+(((-1.0)*x220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.00000126404839)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000126404839)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.00000126404839)*new_r10))+IKsqr(((-1.00000126404839)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.00000126404839)*new_r10), ((-1.00000126404839)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x222=IKcos(j5);
IkReal x223=IKsin(j5);
evalcond[0]=((-0.00158999748136648)*x223);
evalcond[1]=((-0.00158999748136648)*x222);
evalcond[2]=((-0.000799999744000123)*x222);
evalcond[3]=((0.000799999744000123)*x223);
evalcond[4]=((0.999999680000154)*x222);
evalcond[5]=((-0.999999680000154)*x223);
evalcond[6]=((((0.999998735953206)*x223))+new_r10);
evalcond[7]=((((0.999998735953206)*x222))+new_r11);
evalcond[8]=((((-1.0)*x223))+(((-0.999998735953206)*new_r10)));
evalcond[9]=((((-1.0)*x222))+(((-0.999998735953206)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((0.999998735953206)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.999998735953206)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.999998735953206)*new_r10))+IKsqr(((0.999998735953206)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((0.999998735953206)*new_r10), ((0.999998735953206)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x224=IKcos(j5);
IkReal x225=IKsin(j5);
evalcond[0]=((-0.00158999748136648)*x225);
evalcond[1]=((-0.00158999748136648)*x224);
evalcond[2]=((-0.000799999744000123)*x224);
evalcond[3]=((0.000799999744000123)*x225);
evalcond[4]=((0.999999680000154)*x224);
evalcond[5]=((-0.999999680000154)*x225);
evalcond[6]=((((0.999998735953206)*new_r10))+(((-1.0)*x225)));
evalcond[7]=((((0.999998735953206)*new_r11))+(((-1.0)*x224)));
evalcond[8]=((((0.999998735953206)*x225))+(((-1.0)*new_r10)));
evalcond[9]=((((0.999998735953206)*x224))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x226=IKPowWithIntegerCheck(cj3,-1);
if(!x226.valid){
continue;
}
CheckValue<IkReal> x227=IKPowWithIntegerCheck(sj3,-1);
if(!x227.valid){
continue;
}
if( IKabs(((-1.00000126404839)*new_r10*(x226.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.00000126404839)*new_r01*(x227.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.00000126404839)*new_r10*(x226.value)))+IKsqr(((1.00000126404839)*new_r01*(x227.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.00000126404839)*new_r10*(x226.value)), ((1.00000126404839)*new_r01*(x227.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x228=IKcos(j5);
IkReal x229=IKsin(j5);
IkReal x230=(cj3*new_r10);
IkReal x231=(cj3*new_r11);
IkReal x232=((0.999998735953206)*sj3);
IkReal x233=((1.0)*sj3);
IkReal x234=((0.999998735953206)*x229);
IkReal x235=((0.999998735953206)*x228);
evalcond[0]=((-0.00158999748136648)*x229);
evalcond[1]=((-0.00158999748136648)*x228);
evalcond[2]=((-0.000799999744000123)*x228);
evalcond[3]=((0.000799999744000123)*x229);
evalcond[4]=((0.999999680000154)*x228);
evalcond[5]=((-0.999999680000154)*x229);
evalcond[6]=(new_r01+(((-1.0)*x228*x232)));
evalcond[7]=(((cj3*x235))+new_r11);
evalcond[8]=(new_r00+(((-1.0)*x229*x232)));
evalcond[9]=(((cj3*x234))+new_r10);
evalcond[10]=(x230+x234+(((-1.0)*new_r00*x233)));
evalcond[11]=(x231+x235+(((-1.0)*new_r01*x233)));
evalcond[12]=(((new_r00*x232))+(((-0.999998735953206)*x230))+(((-1.0)*x229)));
evalcond[13]=(((new_r01*x232))+(((-0.999998735953206)*x231))+(((-1.0)*x228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x236 = IKatan2WithCheck(IkReal(((-125000238.00615)*new_r10)),IkReal(((-125000238.00615)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x236.valid){
continue;
}
CheckValue<IkReal> x237=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x237.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x236.value)+(((1.5707963267949)*(x237.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x238=IKcos(j5);
IkReal x239=IKsin(j5);
IkReal x240=(cj3*new_r10);
IkReal x241=(cj3*new_r11);
IkReal x242=((0.999998735953206)*sj3);
IkReal x243=((1.0)*sj3);
IkReal x244=((0.999998735953206)*x239);
IkReal x245=((0.999998735953206)*x238);
evalcond[0]=((-0.00158999748136648)*x239);
evalcond[1]=((-0.00158999748136648)*x238);
evalcond[2]=((-0.000799999744000123)*x238);
evalcond[3]=((0.000799999744000123)*x239);
evalcond[4]=((0.999999680000154)*x238);
evalcond[5]=((-0.999999680000154)*x239);
evalcond[6]=((((-1.0)*x238*x242))+new_r01);
evalcond[7]=(new_r11+((cj3*x245)));
evalcond[8]=(new_r00+(((-1.0)*x239*x242)));
evalcond[9]=(new_r10+((cj3*x244)));
evalcond[10]=((((-1.0)*new_r00*x243))+x240+x244);
evalcond[11]=((((-1.0)*new_r01*x243))+x241+x245);
evalcond[12]=((((-0.999998735953206)*x240))+((new_r00*x242))+(((-1.0)*x239)));
evalcond[13]=((((-0.999998735953206)*x241))+((new_r01*x242))+(((-1.0)*x238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x246=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x246.valid){
continue;
}
CheckValue<IkReal> x247 = IKatan2WithCheck(IkReal(((125000238.00615)*new_r00)),IkReal(((125000238.00615)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x247.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x246.value)))+(x247.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x248=IKcos(j5);
IkReal x249=IKsin(j5);
IkReal x250=(cj3*new_r10);
IkReal x251=(cj3*new_r11);
IkReal x252=((0.999998735953206)*sj3);
IkReal x253=((1.0)*sj3);
IkReal x254=((0.999998735953206)*x249);
IkReal x255=((0.999998735953206)*x248);
evalcond[0]=((-0.00158999748136648)*x249);
evalcond[1]=((-0.00158999748136648)*x248);
evalcond[2]=((-0.000799999744000123)*x248);
evalcond[3]=((0.000799999744000123)*x249);
evalcond[4]=((0.999999680000154)*x248);
evalcond[5]=((-0.999999680000154)*x249);
evalcond[6]=((((-1.0)*x248*x252))+new_r01);
evalcond[7]=(((cj3*x255))+new_r11);
evalcond[8]=((((-1.0)*x249*x252))+new_r00);
evalcond[9]=(((cj3*x254))+new_r10);
evalcond[10]=(x254+x250+(((-1.0)*new_r00*x253)));
evalcond[11]=((((-1.0)*new_r01*x253))+x255+x251);
evalcond[12]=(((new_r00*x252))+(((-1.0)*x249))+(((-0.999998735953206)*x250)));
evalcond[13]=(((new_r01*x252))+(((-1.0)*x248))+(((-0.999998735953206)*x251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x257 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x257.valid){
continue;
}
IkReal x256=x257.value;
j3array[0]=((-1.0)*x256);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x256)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKsin(j3))))+((new_r00*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=sj3;
j5eval[1]=1.0;
j5eval[2]=IKsign(sj3);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=cj3;
j5eval[1]=IKsign(cj3);
j5eval[2]=((1.0)+(new_r11*new_r11)+(((-1.0)*(new_r00*new_r00))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=cj3;
j5eval[1]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r11;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((0.999998735953206)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.999998735953206)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.999998735953206)*new_r00))+IKsqr(((0.999998735953206)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((0.999998735953206)*new_r00), ((0.999998735953206)*new_r01));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x258=IKcos(j5);
IkReal x259=IKsin(j5);
evalcond[0]=((-0.00158999748136648)*x259);
evalcond[1]=((-0.00158999748136648)*x258);
evalcond[2]=((-0.000799999744000123)*x258);
evalcond[3]=((0.000799999744000123)*x259);
evalcond[4]=((0.999999680000154)*x258);
evalcond[5]=((-0.999999680000154)*x259);
evalcond[6]=((((0.999998735953206)*new_r00))+(((-1.0)*x259)));
evalcond[7]=((((0.999998735953206)*new_r01))+(((-1.0)*x258)));
evalcond[8]=((((0.999998735953206)*x259))+(((-1.0)*new_r00)));
evalcond[9]=((((0.999998735953206)*x258))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=new_r11;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.00000126404839)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000126404839)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.00000126404839)*new_r00))+IKsqr(((-1.00000126404839)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.00000126404839)*new_r00), ((-1.00000126404839)*new_r01));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x260=IKcos(j5);
IkReal x261=IKsin(j5);
evalcond[0]=((-0.00158999748136648)*x261);
evalcond[1]=((-0.00158999748136648)*x260);
evalcond[2]=((-0.000799999744000123)*x260);
evalcond[3]=((0.000799999744000123)*x261);
evalcond[4]=((0.999999680000154)*x260);
evalcond[5]=((-0.999999680000154)*x261);
evalcond[6]=((((0.999998735953206)*x261))+new_r00);
evalcond[7]=((((0.999998735953206)*x260))+new_r01);
evalcond[8]=((((-1.0)*x261))+(((-0.999998735953206)*new_r00)));
evalcond[9]=((((-1.0)*x260))+(((-0.999998735953206)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.00000126404839)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000126404839)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.00000126404839)*new_r10))+IKsqr(((-1.00000126404839)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.00000126404839)*new_r10), ((-1.00000126404839)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x262=IKcos(j5);
IkReal x263=IKsin(j5);
evalcond[0]=((-0.00158999748136648)*x263);
evalcond[1]=((-0.00158999748136648)*x262);
evalcond[2]=((-0.000799999744000123)*x262);
evalcond[3]=((0.000799999744000123)*x263);
evalcond[4]=((0.999999680000154)*x262);
evalcond[5]=((-0.999999680000154)*x263);
evalcond[6]=((((0.999998735953206)*x263))+new_r10);
evalcond[7]=((((0.999998735953206)*x262))+new_r11);
evalcond[8]=((((-1.0)*x263))+(((-0.999998735953206)*new_r10)));
evalcond[9]=((((-1.0)*x262))+(((-0.999998735953206)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((0.999998735953206)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.999998735953206)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.999998735953206)*new_r10))+IKsqr(((0.999998735953206)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((0.999998735953206)*new_r10), ((0.999998735953206)*new_r11));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[10];
IkReal x264=IKcos(j5);
IkReal x265=IKsin(j5);
evalcond[0]=((-0.00158999748136648)*x265);
evalcond[1]=((-0.00158999748136648)*x264);
evalcond[2]=((-0.000799999744000123)*x264);
evalcond[3]=((0.000799999744000123)*x265);
evalcond[4]=((0.999999680000154)*x264);
evalcond[5]=((-0.999999680000154)*x265);
evalcond[6]=((((-1.0)*x265))+(((0.999998735953206)*new_r10)));
evalcond[7]=((((-1.0)*x264))+(((0.999998735953206)*new_r11)));
evalcond[8]=((((0.999998735953206)*x265))+(((-1.0)*new_r10)));
evalcond[9]=((((0.999998735953206)*x264))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x266=IKPowWithIntegerCheck(cj3,-1);
if(!x266.valid){
continue;
}
CheckValue<IkReal> x267=IKPowWithIntegerCheck(sj3,-1);
if(!x267.valid){
continue;
}
if( IKabs(((-1.00000126404839)*new_r10*(x266.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.00000126404839)*new_r01*(x267.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.00000126404839)*new_r10*(x266.value)))+IKsqr(((1.00000126404839)*new_r01*(x267.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.00000126404839)*new_r10*(x266.value)), ((1.00000126404839)*new_r01*(x267.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x268=IKcos(j5);
IkReal x269=IKsin(j5);
IkReal x270=(cj3*new_r10);
IkReal x271=(cj3*new_r11);
IkReal x272=((0.999998735953206)*sj3);
IkReal x273=((1.0)*sj3);
IkReal x274=((0.999998735953206)*x269);
IkReal x275=((0.999998735953206)*x268);
evalcond[0]=((-0.00158999748136648)*x269);
evalcond[1]=((-0.00158999748136648)*x268);
evalcond[2]=((-0.000799999744000123)*x268);
evalcond[3]=((0.000799999744000123)*x269);
evalcond[4]=((0.999999680000154)*x268);
evalcond[5]=((-0.999999680000154)*x269);
evalcond[6]=((((-1.0)*x268*x272))+new_r01);
evalcond[7]=(new_r11+((cj3*x275)));
evalcond[8]=((((-1.0)*x269*x272))+new_r00);
evalcond[9]=(new_r10+((cj3*x274)));
evalcond[10]=((((-1.0)*new_r00*x273))+x274+x270);
evalcond[11]=((((-1.0)*new_r01*x273))+x275+x271);
evalcond[12]=((((-1.0)*x269))+(((-0.999998735953206)*x270))+((new_r00*x272)));
evalcond[13]=((((-1.0)*x268))+(((-0.999998735953206)*x271))+((new_r01*x272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x276 = IKatan2WithCheck(IkReal(((-125000238.00615)*new_r10)),IkReal(((-125000238.00615)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x276.valid){
continue;
}
CheckValue<IkReal> x277=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x277.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x276.value)+(((1.5707963267949)*(x277.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x278=IKcos(j5);
IkReal x279=IKsin(j5);
IkReal x280=(cj3*new_r10);
IkReal x281=(cj3*new_r11);
IkReal x282=((0.999998735953206)*sj3);
IkReal x283=((1.0)*sj3);
IkReal x284=((0.999998735953206)*x279);
IkReal x285=((0.999998735953206)*x278);
evalcond[0]=((-0.00158999748136648)*x279);
evalcond[1]=((-0.00158999748136648)*x278);
evalcond[2]=((-0.000799999744000123)*x278);
evalcond[3]=((0.000799999744000123)*x279);
evalcond[4]=((0.999999680000154)*x278);
evalcond[5]=((-0.999999680000154)*x279);
evalcond[6]=(new_r01+(((-1.0)*x278*x282)));
evalcond[7]=(((cj3*x285))+new_r11);
evalcond[8]=(new_r00+(((-1.0)*x279*x282)));
evalcond[9]=(((cj3*x284))+new_r10);
evalcond[10]=((((-1.0)*new_r00*x283))+x284+x280);
evalcond[11]=(x285+x281+(((-1.0)*new_r01*x283)));
evalcond[12]=((((-1.0)*x279))+((new_r00*x282))+(((-0.999998735953206)*x280)));
evalcond[13]=((((-1.0)*x278))+(((-0.999998735953206)*x281))+((new_r01*x282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x286=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x286.valid){
continue;
}
CheckValue<IkReal> x287 = IKatan2WithCheck(IkReal(((125000238.00615)*new_r00)),IkReal(((125000238.00615)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x287.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x286.value)))+(x287.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x288=IKcos(j5);
IkReal x289=IKsin(j5);
IkReal x290=(cj3*new_r10);
IkReal x291=(cj3*new_r11);
IkReal x292=((0.999998735953206)*sj3);
IkReal x293=((1.0)*sj3);
IkReal x294=((0.999998735953206)*x289);
IkReal x295=((0.999998735953206)*x288);
evalcond[0]=((-0.00158999748136648)*x289);
evalcond[1]=((-0.00158999748136648)*x288);
evalcond[2]=((-0.000799999744000123)*x288);
evalcond[3]=((0.000799999744000123)*x289);
evalcond[4]=((0.999999680000154)*x288);
evalcond[5]=((-0.999999680000154)*x289);
evalcond[6]=((((-1.0)*x288*x292))+new_r01);
evalcond[7]=(((cj3*x295))+new_r11);
evalcond[8]=((((-1.0)*x289*x292))+new_r00);
evalcond[9]=(((cj3*x294))+new_r10);
evalcond[10]=(x290+x294+(((-1.0)*new_r00*x293)));
evalcond[11]=((((-1.0)*new_r01*x293))+x291+x295);
evalcond[12]=(((new_r00*x292))+(((-0.999998735953206)*x290))+(((-1.0)*x289)));
evalcond[13]=(((new_r01*x292))+(((-0.999998735953206)*x291))+(((-1.0)*x288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j3eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=cj5;
j3eval[1]=((1.0)+(new_r11*new_r11)+(((-1.0)*(new_r00*new_r00))));
j3eval[2]=IKsign(cj5);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=sj5;
j3eval[1]=new_r01;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=new_r11;
j3eval[1]=sj5;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r00;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((1.00000126404839)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000126404839)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.00000126404839)*new_r01))+IKsqr(((-1.00000126404839)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((1.00000126404839)*new_r01), ((-1.00000126404839)*new_r11));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x296=IKcos(j3);
IkReal x297=IKsin(j3);
IkReal x298=((0.999998735953206)*x297);
IkReal x299=(new_r11*x296);
evalcond[0]=((((-1.0)*x298))+new_r01);
evalcond[1]=((((0.999998735953206)*x296))+new_r11);
evalcond[2]=(((new_r11*x297))+((new_r01*x296)));
evalcond[3]=((0.999998735953206)+(((-1.0)*new_r01*x297))+x299);
evalcond[4]=((-1.0)+((new_r01*x298))+(((-0.999998735953206)*x299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r00;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.00000126404839)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.00000126404839)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.00000126404839)*new_r01))+IKsqr(((1.00000126404839)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.00000126404839)*new_r01), ((1.00000126404839)*new_r11));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x300=IKcos(j3);
IkReal x301=IKsin(j3);
IkReal x302=((0.999998735953206)*x301);
IkReal x303=(new_r11*x300);
evalcond[0]=(x302+new_r01);
evalcond[1]=((((-0.999998735953206)*x300))+new_r11);
evalcond[2]=(((new_r01*x300))+((new_r11*x301)));
evalcond[3]=((-0.999998735953206)+(((-1.0)*new_r01*x301))+x303);
evalcond[4]=((1.0)+((new_r01*x302))+(((-0.999998735953206)*x303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r01;
evalcond[2]=new_r11;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((1.00000126404839)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000126404839)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.00000126404839)*new_r00))+IKsqr(((-1.00000126404839)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((1.00000126404839)*new_r00), ((-1.00000126404839)*new_r10));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x304=IKsin(j3);
IkReal x305=IKcos(j3);
IkReal x306=(new_r10*x305);
IkReal x307=((0.999998735953206)*x304);
evalcond[0]=(new_r00+(((-1.0)*x307)));
evalcond[1]=(new_r10+(((0.999998735953206)*x305)));
evalcond[2]=(((new_r00*x305))+((new_r10*x304)));
evalcond[3]=((0.999998735953206)+(((-1.0)*new_r00*x304))+x306);
evalcond[4]=((-1.0)+((new_r00*x307))+(((-0.999998735953206)*x306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r01;
evalcond[2]=new_r11;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.00000126404839)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.00000126404839)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.00000126404839)*new_r00))+IKsqr(((1.00000126404839)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.00000126404839)*new_r00), ((1.00000126404839)*new_r10));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x308=IKsin(j3);
IkReal x309=IKcos(j3);
IkReal x310=(new_r10*x309);
IkReal x311=((0.999998735953206)*x308);
evalcond[0]=(x311+new_r00);
evalcond[1]=((((-0.999998735953206)*x309))+new_r10);
evalcond[2]=(((new_r00*x309))+((new_r10*x308)));
evalcond[3]=((-0.999998735953206)+(((-1.0)*new_r00*x308))+x310);
evalcond[4]=((1.0)+((new_r00*x311))+(((-0.999998735953206)*x310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x314=IKPowWithIntegerCheck(sj5,-1);
if(!x314.valid){
continue;
}
IkReal x312=x314.value;
IkReal x313=(new_r10*x312);
CheckValue<IkReal> x315=IKPowWithIntegerCheck(new_r11,-1);
if(!x315.valid){
continue;
}
if( IKabs(((1.00000126404839)*new_r01*x313*(x315.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000126404839)*x313)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.00000126404839)*new_r01*x313*(x315.value)))+IKsqr(((-1.00000126404839)*x313))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((1.00000126404839)*new_r01*x313*(x315.value)), ((-1.00000126404839)*x313));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x316=IKsin(j3);
IkReal x317=IKcos(j3);
IkReal x318=((0.999998735953206)*cj5);
IkReal x319=((0.999998735953206)*sj5);
IkReal x320=((0.999998735953206)*x316);
IkReal x321=(new_r11*x317);
IkReal x322=(new_r10*x317);
IkReal x323=((1.0)*x316);
evalcond[0]=(((new_r01*x317))+((new_r11*x316)));
evalcond[1]=(((new_r00*x317))+((new_r10*x316)));
evalcond[2]=(new_r01+(((-1.0)*x316*x318)));
evalcond[3]=(((x317*x318))+new_r11);
evalcond[4]=(new_r00+(((-1.0)*x316*x319)));
evalcond[5]=(((x317*x319))+new_r10);
evalcond[6]=(x322+x319+(((-1.0)*new_r00*x323)));
evalcond[7]=(x321+x318+(((-1.0)*new_r01*x323)));
evalcond[8]=(((new_r00*x320))+(((-1.0)*sj5))+(((-0.999998735953206)*x322)));
evalcond[9]=(((new_r01*x320))+(((-0.999998735953206)*x321))+(((-1.0)*cj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x326=IKPowWithIntegerCheck(sj5,-1);
if(!x326.valid){
continue;
}
IkReal x324=x326.value;
IkReal x325=(new_r00*x324);
CheckValue<IkReal> x327=IKPowWithIntegerCheck(new_r01,-1);
if(!x327.valid){
continue;
}
if( IKabs(((1.00000126404839)*x325)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000126404839)*new_r11*x325*(x327.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.00000126404839)*x325))+IKsqr(((-1.00000126404839)*new_r11*x325*(x327.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((1.00000126404839)*x325), ((-1.00000126404839)*new_r11*x325*(x327.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x328=IKsin(j3);
IkReal x329=IKcos(j3);
IkReal x330=((0.999998735953206)*cj5);
IkReal x331=((0.999998735953206)*sj5);
IkReal x332=((0.999998735953206)*x328);
IkReal x333=(new_r11*x329);
IkReal x334=(new_r10*x329);
IkReal x335=((1.0)*x328);
evalcond[0]=(((new_r01*x329))+((new_r11*x328)));
evalcond[1]=(((new_r00*x329))+((new_r10*x328)));
evalcond[2]=((((-1.0)*x328*x330))+new_r01);
evalcond[3]=(((x329*x330))+new_r11);
evalcond[4]=((((-1.0)*x328*x331))+new_r00);
evalcond[5]=(((x329*x331))+new_r10);
evalcond[6]=(x331+x334+(((-1.0)*new_r00*x335)));
evalcond[7]=(x333+x330+(((-1.0)*new_r01*x335)));
evalcond[8]=((((-0.999998735953206)*x334))+(((-1.0)*sj5))+((new_r00*x332)));
evalcond[9]=((((-0.999998735953206)*x333))+((new_r01*x332))+(((-1.0)*cj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x336 = IKatan2WithCheck(IkReal(((125000238.00615)*new_r01)),IkReal(((-125000238.00615)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x336.valid){
continue;
}
CheckValue<IkReal> x337=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x337.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x336.value)+(((1.5707963267949)*(x337.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x338=IKsin(j3);
IkReal x339=IKcos(j3);
IkReal x340=((0.999998735953206)*cj5);
IkReal x341=((0.999998735953206)*sj5);
IkReal x342=((0.999998735953206)*x338);
IkReal x343=(new_r11*x339);
IkReal x344=(new_r10*x339);
IkReal x345=((1.0)*x338);
evalcond[0]=(((new_r01*x339))+((new_r11*x338)));
evalcond[1]=(((new_r00*x339))+((new_r10*x338)));
evalcond[2]=(new_r01+(((-1.0)*x338*x340)));
evalcond[3]=(new_r11+((x339*x340)));
evalcond[4]=(new_r00+(((-1.0)*x338*x341)));
evalcond[5]=(new_r10+((x339*x341)));
evalcond[6]=(x341+x344+(((-1.0)*new_r00*x345)));
evalcond[7]=(x343+x340+(((-1.0)*new_r01*x345)));
evalcond[8]=((((-1.0)*sj5))+((new_r00*x342))+(((-0.999998735953206)*x344)));
evalcond[9]=(((new_r01*x342))+(((-0.999998735953206)*x343))+(((-1.0)*cj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x346=((10000019040.492)*sj4);
CheckValue<IkReal> x347 = IKatan2WithCheck(IkReal(((((15900025.1863751)*new_r20))+(((-1.0)*new_r21*x346)))),IkReal(((((15900025.1863751)*new_r21))+((new_r20*x346)))),IKFAST_ATAN2_MAGTHRESH);
if(!x347.valid){
continue;
}
CheckValue<IkReal> x348=IKPowWithIntegerCheck(IKsign(((10000031681.0)+(((-10000006400.0)*(cj4*cj4))))),-1);
if(!x348.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x347.value)+(((1.5707963267949)*(x348.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x349=IKsin(j5);
IkReal x350=IKcos(j5);
IkReal x351=((0.999998735953206)*sj4);
evalcond[0]=((((-0.00158999748136648)*x349))+new_r20+(((-1.0)*x350*x351)));
evalcond[1]=((((-0.00158999748136648)*x350))+((x349*x351))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
IkReal x352=((1.0)*new_r11);
IkReal x353=(cj4*sj5);
IkReal x354=((((-1.0)*new_r02*x352))+((new_r01*new_r12)));
j3eval[0]=x354;
j3eval[1]=IKsign(x354);
j3eval[2]=((IKabs((((new_r01*sj4))+((new_r02*x353)))))+(IKabs(((((-1.0)*new_r12*x353))+(((-1.0)*sj4*x352))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x355=(cj4*cj5);
IkReal x356=((1.0)*new_r02);
IkReal x357=(((new_r00*new_r12))+(((-1.0)*new_r10*x356)));
j3eval[0]=x357;
j3eval[1]=IKsign(x357);
j3eval[2]=((IKabs((((new_r00*sj4))+(((-1.0)*x355*x356)))))+(IKabs(((((-1.0)*new_r10*sj4))+((new_r12*x355))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x358=(cj4*cj5);
IkReal x359=(cj4*sj5);
IkReal x360=((1.0)*new_r11);
IkReal x361=((((-1.0)*new_r00*x360))+((new_r01*new_r10)));
j3eval[0]=x361;
j3eval[1]=IKsign(x361);
j3eval[2]=((IKabs((((new_r01*x358))+((new_r00*x359)))))+(IKabs(((((-1.0)*x358*x360))+(((-1.0)*new_r10*x359))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r12)+IKsqr(new_r02)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(new_r12, new_r02);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[21];
IkReal x362=IKcos(j3);
IkReal x363=IKsin(j3);
IkReal x364=((0.00158999748136648)*sj5);
IkReal x365=((0.00158999748136648)*cj5);
IkReal x366=((0.999998735953206)*x363);
IkReal x367=(new_r11*x362);
IkReal x368=((1.27199757805403e-6)*x362);
IkReal x369=(new_r12*x363);
IkReal x370=((0.999998735953206)*x362);
IkReal x371=((1.27199757805403e-6)*x363);
IkReal x372=((0.000799999744000123)*x362);
IkReal x373=(new_r01*x362);
IkReal x374=(new_r11*x363);
IkReal x375=(new_r00*x363);
IkReal x376=(new_r10*x363);
IkReal x377=(new_r12*x362);
IkReal x378=(new_r00*x362);
IkReal x379=((0.00158999697256753)*x363);
IkReal x380=((1.0)*x363);
IkReal x381=(new_r02*x362);
IkReal x382=(new_r10*x362);
evalcond[0]=((((-1.0)*x362))+new_r02);
evalcond[1]=((((-1.0)*x380))+new_r12);
evalcond[2]=(x374+x373);
evalcond[3]=(x378+x376);
evalcond[4]=((-1.0)+x381+x369);
evalcond[5]=((((-1.0)*new_r02*x380))+x377);
evalcond[6]=((((-1.0)*new_r12*x370))+((new_r02*x366)));
evalcond[7]=((((-1.0)*x363*x364))+(((-1.0)*cj5*x366))+new_r01);
evalcond[8]=(((cj5*x370))+new_r11+((x362*x364)));
evalcond[9]=((((-1.0)*sj5*x366))+new_r00+((x363*x365)));
evalcond[10]=((((-1.0)*x362*x365))+((sj5*x370))+new_r10);
evalcond[11]=((((-1.0)*x375))+(((-1.0)*x365))+(((0.999998735953206)*sj5))+x382);
evalcond[12]=((((0.999998735953206)*cj5))+(((-1.0)*new_r01*x380))+x364+x367);
evalcond[13]=((((-1.0)*sj5))+(((0.00158999748136648)*new_r20))+((new_r00*x366))+(((-1.0)*new_r10*x370)));
evalcond[14]=((((0.00158999748136648)*new_r21))+((new_r01*x366))+(((-0.999998735953206)*x367))+(((-1.0)*cj5)));
evalcond[15]=((0.999999680000154)+(((-0.999999680000154)*x381))+(((-0.999999680000154)*x369))+(((-1.0)*new_r02*x371))+((new_r12*x368)));
evalcond[16]=((0.000799999744000123)+(((-0.00158999697256753)*x377))+(((-0.000799999744000123)*x369))+((new_r02*x379))+(((-1.0)*new_r02*x372)));
evalcond[17]=((((-1.0)*new_r00*x371))+(((0.000799998732763011)*new_r20))+(((-0.000799999744000123)*cj5))+(((-0.999999680000154)*x378))+(((-0.999999680000154)*x376))+((new_r10*x368)));
evalcond[18]=((((0.000799998732763011)*new_r21))+(((0.000799999744000123)*sj5))+(((1.27199757805403e-6)*x367))+(((-1.0)*new_r01*x371))+(((-0.999999680000154)*x373))+(((-0.999999680000154)*x374)));
evalcond[19]=((((-1.0)*new_r00*x372))+(((0.999999680000154)*cj5))+(((0.00158999697256753)*x375))+(((-0.999998415953764)*new_r20))+(((-0.000799999744000123)*x376))+(((-0.00158999697256753)*x382)));
evalcond[20]=((((-0.00158999697256753)*x367))+(((-0.999999680000154)*sj5))+((new_r01*x379))+(((-0.999998415953764)*new_r21))+(((-0.000799999744000123)*x374))+(((-1.0)*new_r01*x372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.0)*new_r12)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r12))+IKsqr(((-1.0)*new_r02))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*new_r12), ((-1.0)*new_r02));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[21];
IkReal x383=IKcos(j3);
IkReal x384=IKsin(j3);
IkReal x385=((0.00158999748136648)*sj5);
IkReal x386=((0.00158999748136648)*cj5);
IkReal x387=((0.999998735953206)*x384);
IkReal x388=(new_r11*x383);
IkReal x389=((1.27199757805403e-6)*x383);
IkReal x390=(new_r12*x384);
IkReal x391=((0.999998735953206)*x383);
IkReal x392=((1.27199757805403e-6)*x384);
IkReal x393=((0.000799999744000123)*x383);
IkReal x394=(new_r01*x383);
IkReal x395=(new_r11*x384);
IkReal x396=(new_r00*x384);
IkReal x397=(new_r10*x384);
IkReal x398=(new_r12*x383);
IkReal x399=(new_r00*x383);
IkReal x400=((0.00158999697256753)*x384);
IkReal x401=(new_r02*x383);
IkReal x402=(new_r10*x383);
IkReal x403=((1.0)*x384);
evalcond[0]=(x383+new_r02);
evalcond[1]=(x384+new_r12);
evalcond[2]=(x395+x394);
evalcond[3]=(x397+x399);
evalcond[4]=((1.0)+x390+x401);
evalcond[5]=(x398+(((-1.0)*new_r02*x403)));
evalcond[6]=(((new_r02*x387))+(((-1.0)*new_r12*x391)));
evalcond[7]=(((x384*x385))+(((-1.0)*cj5*x387))+new_r01);
evalcond[8]=(((cj5*x391))+new_r11+(((-1.0)*x383*x385)));
evalcond[9]=((((-1.0)*sj5*x387))+(((-1.0)*x384*x386))+new_r00);
evalcond[10]=(((x383*x386))+((sj5*x391))+new_r10);
evalcond[11]=((((-1.0)*x396))+(((0.999998735953206)*sj5))+x386+x402);
evalcond[12]=((((0.999998735953206)*cj5))+x388+(((-1.0)*x385))+(((-1.0)*new_r01*x403)));
evalcond[13]=((((-1.0)*sj5))+(((0.00158999748136648)*new_r20))+((new_r00*x387))+(((-1.0)*new_r10*x391)));
evalcond[14]=((((-0.999998735953206)*x388))+(((0.00158999748136648)*new_r21))+((new_r01*x387))+(((-1.0)*cj5)));
evalcond[15]=((0.999999680000154)+(((-1.0)*new_r12*x389))+(((0.999999680000154)*x390))+(((0.999999680000154)*x401))+((new_r02*x392)));
evalcond[16]=((0.000799999744000123)+(((0.000799999744000123)*x390))+(((0.00158999697256753)*x398))+((new_r02*x393))+(((-1.0)*new_r02*x400)));
evalcond[17]=((((0.999999680000154)*x397))+(((0.999999680000154)*x399))+(((-1.0)*new_r10*x389))+(((-0.000799998732763011)*new_r20))+(((-0.000799999744000123)*cj5))+((new_r00*x392)));
evalcond[18]=((((0.999999680000154)*x394))+(((0.999999680000154)*x395))+(((0.000799999744000123)*sj5))+(((-1.27199757805403e-6)*x388))+(((-0.000799998732763011)*new_r21))+((new_r01*x392)));
evalcond[19]=((((0.999999680000154)*cj5))+(((0.000799999744000123)*x397))+(((-0.00158999697256753)*x396))+(((0.00158999697256753)*x402))+(((0.999998415953764)*new_r20))+((new_r00*x393)));
evalcond[20]=((((0.00158999697256753)*x388))+(((0.000799999744000123)*x395))+(((-0.999999680000154)*sj5))+(((0.999998415953764)*new_r21))+((new_r01*x393))+(((-1.0)*new_r01*x400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
j3eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j3eval[0]=new_r10;
j3eval[1]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j3eval[0]=sj4;
j3eval[1]=new_r00;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
sj4=0;
cj4=1.0;
j4=0;
j3eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
sj4=0;
cj4=1.0;
j4=0;
j3eval[0]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x405 = IKatan2WithCheck(IkReal(((-0.999998735953206)*new_r10)),IkReal(((0.999998735953206)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x405.valid){
continue;
}
IkReal x404=x405.value;
j3array[0]=((-1.0)*x404);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x404)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x406=IKcos(j3);
IkReal x407=IKsin(j3);
evalcond[0]=(((new_r10*x407))+((new_r00*x406)));
evalcond[1]=((((-1.0)*new_r00*x407))+((new_r10*x406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x409 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x409.valid){
continue;
}
IkReal x408=x409.value;
j3array[0]=((-1.0)*x408);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x408)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x410=IKsin(j3);
IkReal x411=IKcos(j3);
IkReal x412=(new_r10*x411);
IkReal x413=(new_r00*x410);
evalcond[0]=(x412+(((-1.0)*x413)));
evalcond[1]=((((-0.999998735953206)*x412))+(((0.999998735953206)*x413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j3eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j3eval[0]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x415 = IKatan2WithCheck(IkReal(((-0.999998735953206)*new_r10)),IkReal(((0.999998735953206)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x415.valid){
continue;
}
IkReal x414=x415.value;
j3array[0]=((-1.0)*x414);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x414)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x416=IKcos(j3);
IkReal x417=IKsin(j3);
evalcond[0]=(((new_r10*x417))+((new_r00*x416)));
evalcond[1]=((((-1.0)*new_r00*x417))+((new_r10*x416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x419 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x419.valid){
continue;
}
IkReal x418=x419.value;
j3array[0]=((-1.0)*x418);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x418)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x420=IKsin(j3);
IkReal x421=IKcos(j3);
IkReal x422=(new_r10*x421);
IkReal x423=(new_r00*x420);
evalcond[0]=((((-1.0)*x423))+x422);
evalcond[1]=((((0.999998735953206)*x423))+(((-0.999998735953206)*x422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x426=IKPowWithIntegerCheck(sj4,-1);
if(!x426.valid){
continue;
}
IkReal x424=x426.value;
IkReal x425=(new_r12*x424);
CheckValue<IkReal> x427=IKPowWithIntegerCheck(new_r00,-1);
if(!x427.valid){
continue;
}
if( IKabs(x425) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10*x425*(x427.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x425)+IKsqr(((-1.0)*new_r10*x425*(x427.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(x425, ((-1.0)*new_r10*x425*(x427.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[16];
IkReal x428=IKsin(j3);
IkReal x429=IKcos(j3);
IkReal x430=((1.27199757805403e-6)*sj4);
IkReal x431=((0.00158999697256753)*sj4);
IkReal x432=((1.0)*sj4);
IkReal x433=((2.52809518638238e-6)*sj5);
IkReal x434=((0.999999680000154)*sj4);
IkReal x435=((0.000799999744000123)*sj4);
IkReal x436=(new_r10*x429);
IkReal x437=(new_r00*x428);
IkReal x438=(new_r12*x429);
IkReal x439=(new_r02*x428);
IkReal x440=(new_r10*x428);
IkReal x441=(new_r12*x428);
IkReal x442=(new_r00*x429);
IkReal x443=(new_r02*x429);
evalcond[0]=((((-1.0)*x429*x432))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x428*x432)));
evalcond[2]=((-0.00158999547153527)*new_r21*x428);
evalcond[3]=((0.00158999547153527)*new_r21*x429);
evalcond[4]=(x440+x442);
evalcond[5]=(new_r00+(((-1.0)*x428*x433)));
evalcond[6]=(((x429*x433))+new_r10);
evalcond[7]=((((-1.0)*x439))+x438);
evalcond[8]=((((-1.0)*x432))+x441+x443);
evalcond[9]=((((-1.0)*x437))+x433+x436);
evalcond[10]=((((0.999998735953206)*x439))+(((-0.999998735953206)*x438)));
evalcond[11]=((((0.999998735953206)*x437))+(((-0.999998735953206)*x436)));
evalcond[12]=((0.999999680000154)+(((-1.0)*x430*x439))+(((-1.0)*x434*x441))+(((-1.0)*x434*x443))+((x430*x438)));
evalcond[13]=((0.000799999744000123)+(((-1.0)*x435*x443))+(((-1.0)*x435*x441))+(((-1.0)*x431*x438))+((x431*x439)));
evalcond[14]=((((-1.0)*x430*x437))+(((-1.0)*x434*x440))+(((-1.0)*x434*x442))+(((-0.000799999744000123)*cj5))+((x430*x436)));
evalcond[15]=((((0.999999680000154)*cj5))+(((-1.0)*x435*x442))+(((-1.0)*x435*x440))+(((-1.0)*x431*x436))+((x431*x437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x446=IKPowWithIntegerCheck(sj4,-1);
if(!x446.valid){
continue;
}
IkReal x444=x446.value;
IkReal x445=(new_r02*x444);
CheckValue<IkReal> x447=IKPowWithIntegerCheck(new_r10,-1);
if(!x447.valid){
continue;
}
if( IKabs(((-1.0)*new_r00*x445*(x447.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x445) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00*x445*(x447.value)))+IKsqr(x445)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*new_r00*x445*(x447.value)), x445);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[16];
IkReal x448=IKsin(j3);
IkReal x449=IKcos(j3);
IkReal x450=((1.27199757805403e-6)*sj4);
IkReal x451=((0.00158999697256753)*sj4);
IkReal x452=((1.0)*sj4);
IkReal x453=((2.52809518638238e-6)*sj5);
IkReal x454=((0.999999680000154)*sj4);
IkReal x455=((0.000799999744000123)*sj4);
IkReal x456=(new_r10*x449);
IkReal x457=(new_r00*x448);
IkReal x458=(new_r12*x449);
IkReal x459=(new_r02*x448);
IkReal x460=(new_r10*x448);
IkReal x461=(new_r12*x448);
IkReal x462=(new_r00*x449);
IkReal x463=(new_r02*x449);
evalcond[0]=(new_r02+(((-1.0)*x449*x452)));
evalcond[1]=(new_r12+(((-1.0)*x448*x452)));
evalcond[2]=((-0.00158999547153527)*new_r21*x448);
evalcond[3]=((0.00158999547153527)*new_r21*x449);
evalcond[4]=(x462+x460);
evalcond[5]=(new_r00+(((-1.0)*x448*x453)));
evalcond[6]=(((x449*x453))+new_r10);
evalcond[7]=((((-1.0)*x459))+x458);
evalcond[8]=((((-1.0)*x452))+x463+x461);
evalcond[9]=((((-1.0)*x457))+x456+x453);
evalcond[10]=((((0.999998735953206)*x459))+(((-0.999998735953206)*x458)));
evalcond[11]=((((0.999998735953206)*x457))+(((-0.999998735953206)*x456)));
evalcond[12]=((0.999999680000154)+(((-1.0)*x454*x461))+(((-1.0)*x454*x463))+(((-1.0)*x450*x459))+((x450*x458)));
evalcond[13]=((0.000799999744000123)+(((-1.0)*x455*x463))+(((-1.0)*x455*x461))+(((-1.0)*x451*x458))+((x451*x459)));
evalcond[14]=((((-1.0)*x454*x460))+(((-1.0)*x454*x462))+(((-0.000799999744000123)*cj5))+(((-1.0)*x450*x457))+((x450*x456)));
evalcond[15]=((((0.999999680000154)*cj5))+(((-1.0)*x455*x460))+(((-1.0)*x455*x462))+(((-1.0)*x451*x456))+((x451*x457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x464=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x464.valid){
continue;
}
CheckValue<IkReal> x465 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x465.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x464.value)))+(x465.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[16];
IkReal x466=IKsin(j3);
IkReal x467=IKcos(j3);
IkReal x468=((1.27199757805403e-6)*sj4);
IkReal x469=((0.00158999697256753)*sj4);
IkReal x470=((1.0)*sj4);
IkReal x471=((2.52809518638238e-6)*sj5);
IkReal x472=((0.999999680000154)*sj4);
IkReal x473=((0.000799999744000123)*sj4);
IkReal x474=(new_r10*x467);
IkReal x475=(new_r00*x466);
IkReal x476=(new_r12*x467);
IkReal x477=(new_r02*x466);
IkReal x478=(new_r10*x466);
IkReal x479=(new_r12*x466);
IkReal x480=(new_r00*x467);
IkReal x481=(new_r02*x467);
evalcond[0]=((((-1.0)*x467*x470))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x466*x470)));
evalcond[2]=((-0.00158999547153527)*new_r21*x466);
evalcond[3]=((0.00158999547153527)*new_r21*x467);
evalcond[4]=(x480+x478);
evalcond[5]=(new_r00+(((-1.0)*x466*x471)));
evalcond[6]=(((x467*x471))+new_r10);
evalcond[7]=((((-1.0)*x477))+x476);
evalcond[8]=((((-1.0)*x470))+x481+x479);
evalcond[9]=((((-1.0)*x475))+x474+x471);
evalcond[10]=((((0.999998735953206)*x477))+(((-0.999998735953206)*x476)));
evalcond[11]=((((0.999998735953206)*x475))+(((-0.999998735953206)*x474)));
evalcond[12]=((0.999999680000154)+(((-1.0)*x468*x477))+(((-1.0)*x472*x479))+((x468*x476))+(((-1.0)*x472*x481)));
evalcond[13]=((0.000799999744000123)+((x469*x477))+(((-1.0)*x469*x476))+(((-1.0)*x473*x479))+(((-1.0)*x473*x481)));
evalcond[14]=((((-1.0)*x468*x475))+(((-1.0)*x472*x478))+(((-0.000799999744000123)*cj5))+((x468*x474))+(((-1.0)*x472*x480)));
evalcond[15]=((((0.999999680000154)*cj5))+((x469*x475))+(((-1.0)*x469*x474))+(((-1.0)*x473*x478))+(((-1.0)*x473*x480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[2];
new_r11=0;
new_r12=0;
new_r20=0;
new_r00=0;
j3eval[0]=new_r10;
j3eval[1]=new_r02;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
new_r11=0;
new_r12=0;
new_r20=0;
new_r00=0;
j3eval[0]=new_r10;
j3eval[1]=new_r01;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
new_r11=0;
new_r12=0;
new_r20=0;
new_r00=0;
j3eval[0]=new_r02;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x483=IKPowWithIntegerCheck(new_r02,-1);
if(!x483.valid){
continue;
}
IkReal x482=x483.value;
if( IKabs(((0.00158999748136648)*cj4*x482)) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj4*x482)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00158999748136648)*cj4*x482))+IKsqr((sj4*x482))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.00158999748136648)*cj4*x482), (sj4*x482));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[21];
IkReal x484=IKcos(j3);
IkReal x485=IKsin(j3);
IkReal x486=((1.27199757805403e-6)*new_r10);
IkReal x487=((0.999999680000154)*new_r01);
IkReal x488=(cj4*new_r22);
IkReal x489=((0.000799999744000123)*new_r01);
IkReal x490=((628.931813867135)*cj5);
IkReal x491=((1.27199757805403e-6)*new_r02);
IkReal x492=((1.0)*cj5);
IkReal x493=((0.999999680000154)*new_r10);
IkReal x494=((0.999998415953764)*sj4);
IkReal x495=((0.00158999697256753)*new_r01);
IkReal x496=((0.000799998732763011)*new_r21);
IkReal x497=((1.27199757805403e-6)*new_r01);
IkReal x498=((0.999999680000154)*new_r02);
IkReal x499=((0.00158999697256753)*new_r10);
IkReal x500=((0.00158999748136648)*sj5);
IkReal x501=((0.000799999744000123)*new_r10);
IkReal x502=((0.00158999697256753)*new_r02);
IkReal x503=((0.000799999744000123)*new_r02);
IkReal x504=((0.999998735953206)*x485);
IkReal x505=(sj4*x484);
IkReal x506=(cj4*x484);
IkReal x507=(sj4*x485);
IkReal x508=((0.999998735953206)*x484);
IkReal x509=(cj4*x485);
IkReal x510=((1.0)*x485);
evalcond[0]=((((-1.0)*sj4))+((new_r02*x484)));
evalcond[1]=(((cj4*sj5))+((new_r01*x484)));
evalcond[2]=(((new_r10*x485))+(((-1.0)*cj4*x492)));
evalcond[3]=((((-1.0)*new_r02*x510))+(((0.00158999748136648)*cj4)));
evalcond[4]=((((-1.0)*sj5))+(((-1.0)*new_r10*x508)));
evalcond[5]=(((new_r10*x484))+(((-1.0)*sj4*x490)));
evalcond[6]=((((0.00158999748136648)*x506))+(((-1.0)*x507)));
evalcond[7]=((((0.00158999748136648)*new_r22))+((new_r02*x504)));
evalcond[8]=(new_r02+(((-1.0)*x505))+(((-0.00158999748136648)*x509)));
evalcond[9]=(((x490*x507))+(((-1.0)*x492*x506)));
evalcond[10]=((((-1.0)*x492))+(((0.00158999748136648)*new_r21))+((new_r01*x504)));
evalcond[11]=((((-1.0)*x490*x505))+(((-1.0)*x492*x509))+new_r10);
evalcond[12]=((((0.999998735953206)*cj5))+(((-1.0)*new_r01*x510))+((sj4*x500)));
evalcond[13]=(((sj5*x509))+((x500*x505))+((cj5*x508)));
evalcond[14]=(((sj5*x506))+(((-1.0)*cj5*x504))+new_r01+(((-1.0)*x500*x507)));
evalcond[15]=(((x501*x509))+(((-0.000799999744000123)*cj5))+(((-1.0)*x493*x507))+((x499*x506))+((x486*x505)));
evalcond[16]=((((0.999999680000154)*cj5))+(((-1.0)*x499*x505))+(((-1.0)*x501*x507))+(((-1.0)*x493*x509))+((x486*x506)));
evalcond[17]=((0.999999680000154)+(((0.000799998732763011)*new_r22*sj4))+(((-1.0)*x502*x509))+(((-1.0)*x491*x507))+(((0.999998415953764)*x488))+((x503*x506))+(((-1.0)*x498*x505)));
evalcond[18]=((0.000799999744000123)+(((0.000799998732763011)*x488))+(((-1.0)*x491*x509))+(((-1.0)*x503*x505))+((x502*x507))+(((-1.0)*new_r22*x494))+(((-1.0)*x498*x506)));
evalcond[19]=(((x489*x506))+((sj4*x496))+(((-1.0)*x497*x507))+(((0.000799999744000123)*sj5))+(((-1.0)*x495*x509))+(((-1.0)*x487*x505))+(((0.999998415953764)*cj4*new_r21)));
evalcond[20]=((((-1.0)*x489*x505))+(((-1.0)*x497*x509))+(((-1.0)*new_r21*x494))+(((-0.999999680000154)*sj5))+((x495*x507))+((cj4*x496))+(((-1.0)*x487*x506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x511=IKPowWithIntegerCheck(new_r10,-1);
if(!x511.valid){
continue;
}
CheckValue<IkReal> x512=IKPowWithIntegerCheck(new_r01,-1);
if(!x512.valid){
continue;
}
if( IKabs((cj4*cj5*(x511.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj4*sj5*(x512.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj4*cj5*(x511.value)))+IKsqr(((-1.0)*cj4*sj5*(x512.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((cj4*cj5*(x511.value)), ((-1.0)*cj4*sj5*(x512.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[21];
IkReal x513=IKcos(j3);
IkReal x514=IKsin(j3);
IkReal x515=((1.27199757805403e-6)*new_r10);
IkReal x516=((0.999999680000154)*new_r01);
IkReal x517=(cj4*new_r22);
IkReal x518=((0.000799999744000123)*new_r01);
IkReal x519=((628.931813867135)*cj5);
IkReal x520=((1.27199757805403e-6)*new_r02);
IkReal x521=((1.0)*cj5);
IkReal x522=((0.999999680000154)*new_r10);
IkReal x523=((0.999998415953764)*sj4);
IkReal x524=((0.00158999697256753)*new_r01);
IkReal x525=((0.000799998732763011)*new_r21);
IkReal x526=((1.27199757805403e-6)*new_r01);
IkReal x527=((0.999999680000154)*new_r02);
IkReal x528=((0.00158999697256753)*new_r10);
IkReal x529=((0.00158999748136648)*sj5);
IkReal x530=((0.000799999744000123)*new_r10);
IkReal x531=((0.00158999697256753)*new_r02);
IkReal x532=((0.000799999744000123)*new_r02);
IkReal x533=((0.999998735953206)*x514);
IkReal x534=(sj4*x513);
IkReal x535=(cj4*x513);
IkReal x536=(sj4*x514);
IkReal x537=((0.999998735953206)*x513);
IkReal x538=(cj4*x514);
IkReal x539=((1.0)*x514);
evalcond[0]=(((new_r02*x513))+(((-1.0)*sj4)));
evalcond[1]=(((new_r01*x513))+((cj4*sj5)));
evalcond[2]=(((new_r10*x514))+(((-1.0)*cj4*x521)));
evalcond[3]=((((-1.0)*new_r02*x539))+(((0.00158999748136648)*cj4)));
evalcond[4]=((((-1.0)*sj5))+(((-1.0)*new_r10*x537)));
evalcond[5]=(((new_r10*x513))+(((-1.0)*sj4*x519)));
evalcond[6]=((((0.00158999748136648)*x535))+(((-1.0)*x536)));
evalcond[7]=(((new_r02*x533))+(((0.00158999748136648)*new_r22)));
evalcond[8]=((((-1.0)*x534))+(((-0.00158999748136648)*x538))+new_r02);
evalcond[9]=(((x519*x536))+(((-1.0)*x521*x535)));
evalcond[10]=(((new_r01*x533))+(((0.00158999748136648)*new_r21))+(((-1.0)*x521)));
evalcond[11]=((((-1.0)*x521*x538))+new_r10+(((-1.0)*x519*x534)));
evalcond[12]=((((0.999998735953206)*cj5))+(((-1.0)*new_r01*x539))+((sj4*x529)));
evalcond[13]=(((cj5*x537))+((sj5*x538))+((x529*x534)));
evalcond[14]=((((-1.0)*x529*x536))+((sj5*x535))+new_r01+(((-1.0)*cj5*x533)));
evalcond[15]=(((x515*x534))+(((-0.000799999744000123)*cj5))+(((-1.0)*x522*x536))+((x528*x535))+((x530*x538)));
evalcond[16]=((((0.999999680000154)*cj5))+(((-1.0)*x530*x536))+((x515*x535))+(((-1.0)*x528*x534))+(((-1.0)*x522*x538)));
evalcond[17]=((0.999999680000154)+(((0.000799998732763011)*new_r22*sj4))+(((-1.0)*x520*x536))+(((-1.0)*x527*x534))+(((-1.0)*x531*x538))+(((0.999998415953764)*x517))+((x532*x535)));
evalcond[18]=((0.000799999744000123)+(((-1.0)*x532*x534))+(((-1.0)*new_r22*x523))+(((-1.0)*x520*x538))+(((-1.0)*x527*x535))+((x531*x536))+(((0.000799998732763011)*x517)));
evalcond[19]=((((-1.0)*x524*x538))+(((-1.0)*x526*x536))+(((0.000799999744000123)*sj5))+((x518*x535))+(((-1.0)*x516*x534))+(((0.999998415953764)*cj4*new_r21))+((sj4*x525)));
evalcond[20]=(((cj4*x525))+(((-1.0)*x526*x538))+(((-0.999999680000154)*sj5))+(((-1.0)*new_r21*x523))+(((-1.0)*x518*x534))+(((-1.0)*x516*x535))+((x524*x536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x540=IKPowWithIntegerCheck(new_r10,-1);
if(!x540.valid){
continue;
}
CheckValue<IkReal> x541=IKPowWithIntegerCheck(new_r02,-1);
if(!x541.valid){
continue;
}
if( IKabs((cj4*cj5*(x540.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj4*(x541.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj4*cj5*(x540.value)))+IKsqr((sj4*(x541.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((cj4*cj5*(x540.value)), (sj4*(x541.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[21];
IkReal x542=IKcos(j3);
IkReal x543=IKsin(j3);
IkReal x544=((1.27199757805403e-6)*new_r10);
IkReal x545=((0.999999680000154)*new_r01);
IkReal x546=(cj4*new_r22);
IkReal x547=((0.000799999744000123)*new_r01);
IkReal x548=((628.931813867135)*cj5);
IkReal x549=((1.27199757805403e-6)*new_r02);
IkReal x550=((1.0)*cj5);
IkReal x551=((0.999999680000154)*new_r10);
IkReal x552=((0.999998415953764)*sj4);
IkReal x553=((0.00158999697256753)*new_r01);
IkReal x554=((0.000799998732763011)*new_r21);
IkReal x555=((1.27199757805403e-6)*new_r01);
IkReal x556=((0.999999680000154)*new_r02);
IkReal x557=((0.00158999697256753)*new_r10);
IkReal x558=((0.00158999748136648)*sj5);
IkReal x559=((0.000799999744000123)*new_r10);
IkReal x560=((0.00158999697256753)*new_r02);
IkReal x561=((0.000799999744000123)*new_r02);
IkReal x562=((0.999998735953206)*x543);
IkReal x563=(sj4*x542);
IkReal x564=(cj4*x542);
IkReal x565=(sj4*x543);
IkReal x566=((0.999998735953206)*x542);
IkReal x567=(cj4*x543);
IkReal x568=((1.0)*x543);
evalcond[0]=((((-1.0)*sj4))+((new_r02*x542)));
evalcond[1]=(((cj4*sj5))+((new_r01*x542)));
evalcond[2]=(((new_r10*x543))+(((-1.0)*cj4*x550)));
evalcond[3]=((((-1.0)*new_r02*x568))+(((0.00158999748136648)*cj4)));
evalcond[4]=((((-1.0)*sj5))+(((-1.0)*new_r10*x566)));
evalcond[5]=(((new_r10*x542))+(((-1.0)*sj4*x548)));
evalcond[6]=((((0.00158999748136648)*x564))+(((-1.0)*x565)));
evalcond[7]=((((0.00158999748136648)*new_r22))+((new_r02*x562)));
evalcond[8]=((((-0.00158999748136648)*x567))+(((-1.0)*x563))+new_r02);
evalcond[9]=(((x548*x565))+(((-1.0)*x550*x564)));
evalcond[10]=((((0.00158999748136648)*new_r21))+((new_r01*x562))+(((-1.0)*x550)));
evalcond[11]=((((-1.0)*x550*x567))+new_r10+(((-1.0)*x548*x563)));
evalcond[12]=(((sj4*x558))+(((0.999998735953206)*cj5))+(((-1.0)*new_r01*x568)));
evalcond[13]=(((x558*x563))+((sj5*x567))+((cj5*x566)));
evalcond[14]=((((-1.0)*x558*x565))+(((-1.0)*cj5*x562))+new_r01+((sj5*x564)));
evalcond[15]=((((-0.000799999744000123)*cj5))+((x544*x563))+(((-1.0)*x551*x565))+((x557*x564))+((x559*x567)));
evalcond[16]=((((0.999999680000154)*cj5))+(((-1.0)*x557*x563))+(((-1.0)*x559*x565))+((x544*x564))+(((-1.0)*x551*x567)));
evalcond[17]=((0.999999680000154)+(((0.999998415953764)*x546))+(((-1.0)*x549*x565))+(((0.000799998732763011)*new_r22*sj4))+((x561*x564))+(((-1.0)*x556*x563))+(((-1.0)*x560*x567)));
evalcond[18]=((0.000799999744000123)+(((-1.0)*x549*x567))+(((-1.0)*new_r22*x552))+(((-1.0)*x556*x564))+((x560*x565))+(((0.000799998732763011)*x546))+(((-1.0)*x561*x563)));
evalcond[19]=(((sj4*x554))+(((0.000799999744000123)*sj5))+(((-1.0)*x555*x565))+(((0.999998415953764)*cj4*new_r21))+(((-1.0)*x545*x563))+(((-1.0)*x553*x567))+((x547*x564)));
evalcond[20]=(((cj4*x554))+(((-1.0)*new_r21*x552))+(((-0.999999680000154)*sj5))+(((-1.0)*x555*x567))+((x553*x565))+(((-1.0)*x547*x563))+(((-1.0)*x545*x564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r01))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[2];
new_r01=0;
new_r02=0;
new_r10=0;
new_r20=0;
j3eval[0]=new_r12;
j3eval[1]=new_r00;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
new_r01=0;
new_r02=0;
new_r10=0;
new_r20=0;
j3eval[0]=new_r11;
j3eval[1]=new_r00;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
new_r01=0;
new_r02=0;
new_r10=0;
new_r20=0;
j3eval[0]=new_r12;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x570=IKPowWithIntegerCheck(new_r12,-1);
if(!x570.valid){
continue;
}
IkReal x569=x570.value;
if( IKabs((sj4*x569)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.00158999748136648)*cj4*x569)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj4*x569))+IKsqr(((-0.00158999748136648)*cj4*x569))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((sj4*x569), ((-0.00158999748136648)*cj4*x569));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[21];
IkReal x571=IKsin(j3);
IkReal x572=IKcos(j3);
IkReal x573=((1.27199757805403e-6)*sj4);
IkReal x574=((0.999999680000154)*new_r00);
IkReal x575=((0.00158999697256753)*cj4);
IkReal x576=((0.00158999697256753)*sj4);
IkReal x577=(cj4*new_r22);
IkReal x578=((1.0)*cj5);
IkReal x579=((0.999998415953764)*sj4);
IkReal x580=((0.999999680000154)*sj4);
IkReal x581=((1.27199757805403e-6)*cj4);
IkReal x582=((0.000799998732763011)*new_r21);
IkReal x583=((0.000799999744000123)*new_r00);
IkReal x584=((0.000799999744000123)*sj4);
IkReal x585=((0.999998735953206)*cj5);
IkReal x586=((1.0)*sj4);
IkReal x587=(new_r11*x572);
IkReal x588=(cj4*x572);
IkReal x589=(new_r00*x571);
IkReal x590=((628.931813867135)*cj5*sj4);
IkReal x591=((0.999998735953206)*x572);
IkReal x592=(cj4*x571);
IkReal x593=(new_r11*x571);
IkReal x594=(sj4*x572);
IkReal x595=(new_r12*x571);
IkReal x596=(new_r12*x572);
IkReal x597=((0.00158999748136648)*sj4*sj5);
evalcond[0]=(x595+(((-1.0)*x586)));
evalcond[1]=(((cj4*sj5))+x593);
evalcond[2]=(((new_r00*x572))+(((-1.0)*cj4*x578)));
evalcond[3]=(x596+(((0.00158999748136648)*cj4)));
evalcond[4]=((((-1.0)*sj5))+(((0.999998735953206)*x589)));
evalcond[5]=((((-1.0)*x589))+(((-1.0)*x590)));
evalcond[6]=((((-0.00158999748136648)*x592))+(((-1.0)*x572*x586)));
evalcond[7]=((((0.00158999748136648)*new_r22))+(((-1.0)*new_r12*x591)));
evalcond[8]=((((-1.0)*x571*x586))+(((0.00158999748136648)*x588))+new_r12);
evalcond[9]=((((-1.0)*x572*x590))+(((-1.0)*x578*x592)));
evalcond[10]=((((0.00158999748136648)*new_r21))+(((-1.0)*x578))+(((-0.999998735953206)*x587)));
evalcond[11]=(x585+x587+x597);
evalcond[12]=(((x571*x590))+(((-1.0)*x578*x588))+new_r00);
evalcond[13]=((((-1.0)*x571*x597))+((sj5*x588))+(((-1.0)*x571*x585)));
evalcond[14]=((((0.00158999748136648)*sj5*x594))+((x572*x585))+new_r11+((sj5*x592)));
evalcond[15]=(((x583*x588))+(((-1.0)*x573*x589))+(((-0.000799999744000123)*cj5))+(((-1.0)*x575*x589))+(((-1.0)*x574*x594)));
evalcond[16]=((((0.999999680000154)*cj5))+(((-1.0)*x583*x594))+(((-1.0)*x574*x588))+((x576*x589))+(((-1.0)*x581*x589)));
evalcond[17]=((0.999999680000154)+(((0.000799999744000123)*new_r12*x592))+((x573*x596))+(((0.000799998732763011)*new_r22*sj4))+(((-1.0)*x580*x595))+(((0.999998415953764)*x577))+((x575*x596)));
evalcond[18]=((0.000799999744000123)+(((-1.0)*new_r22*x579))+(((-1.0)*x576*x596))+((x581*x596))+(((-1.0)*x584*x595))+(((0.000799998732763011)*x577))+(((-0.999999680000154)*new_r12*x592)));
evalcond[19]=((((0.000799999744000123)*sj5))+(((0.000799999744000123)*new_r11*x592))+((x575*x587))+((x573*x587))+(((-1.0)*x580*x593))+(((0.999998415953764)*cj4*new_r21))+((sj4*x582)));
evalcond[20]=(((x581*x587))+(((-0.999999680000154)*sj5))+((cj4*x582))+(((-1.0)*x584*x593))+(((-1.0)*x576*x587))+(((-1.0)*new_r21*x579))+(((-0.999999680000154)*new_r11*x592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x598=IKPowWithIntegerCheck(new_r11,-1);
if(!x598.valid){
continue;
}
CheckValue<IkReal> x599=IKPowWithIntegerCheck(new_r00,-1);
if(!x599.valid){
continue;
}
if( IKabs(((-1.0)*cj4*sj5*(x598.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj4*cj5*(x599.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj4*sj5*(x598.value)))+IKsqr((cj4*cj5*(x599.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*cj4*sj5*(x598.value)), (cj4*cj5*(x599.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[21];
IkReal x600=IKsin(j3);
IkReal x601=IKcos(j3);
IkReal x602=((1.27199757805403e-6)*sj4);
IkReal x603=((0.999999680000154)*new_r00);
IkReal x604=((0.00158999697256753)*cj4);
IkReal x605=((0.00158999697256753)*sj4);
IkReal x606=(cj4*new_r22);
IkReal x607=((1.0)*cj5);
IkReal x608=((0.999998415953764)*sj4);
IkReal x609=((0.999999680000154)*sj4);
IkReal x610=((1.27199757805403e-6)*cj4);
IkReal x611=((0.000799998732763011)*new_r21);
IkReal x612=((0.000799999744000123)*new_r00);
IkReal x613=((0.000799999744000123)*sj4);
IkReal x614=((0.999998735953206)*cj5);
IkReal x615=((1.0)*sj4);
IkReal x616=(new_r11*x601);
IkReal x617=(cj4*x601);
IkReal x618=(new_r00*x600);
IkReal x619=((628.931813867135)*cj5*sj4);
IkReal x620=((0.999998735953206)*x601);
IkReal x621=(cj4*x600);
IkReal x622=(new_r11*x600);
IkReal x623=(sj4*x601);
IkReal x624=(new_r12*x600);
IkReal x625=(new_r12*x601);
IkReal x626=((0.00158999748136648)*sj4*sj5);
evalcond[0]=((((-1.0)*x615))+x624);
evalcond[1]=(((cj4*sj5))+x622);
evalcond[2]=((((-1.0)*cj4*x607))+((new_r00*x601)));
evalcond[3]=(x625+(((0.00158999748136648)*cj4)));
evalcond[4]=((((0.999998735953206)*x618))+(((-1.0)*sj5)));
evalcond[5]=((((-1.0)*x618))+(((-1.0)*x619)));
evalcond[6]=((((-0.00158999748136648)*x621))+(((-1.0)*x601*x615)));
evalcond[7]=((((-1.0)*new_r12*x620))+(((0.00158999748136648)*new_r22)));
evalcond[8]=((((0.00158999748136648)*x617))+(((-1.0)*x600*x615))+new_r12);
evalcond[9]=((((-1.0)*x607*x621))+(((-1.0)*x601*x619)));
evalcond[10]=((((0.00158999748136648)*new_r21))+(((-0.999998735953206)*x616))+(((-1.0)*x607)));
evalcond[11]=(x614+x616+x626);
evalcond[12]=(((x600*x619))+(((-1.0)*x607*x617))+new_r00);
evalcond[13]=((((-1.0)*x600*x626))+(((-1.0)*x600*x614))+((sj5*x617)));
evalcond[14]=(((sj5*x621))+((x601*x614))+(((0.00158999748136648)*sj5*x623))+new_r11);
evalcond[15]=(((x612*x617))+(((-1.0)*x604*x618))+(((-0.000799999744000123)*cj5))+(((-1.0)*x603*x623))+(((-1.0)*x602*x618)));
evalcond[16]=((((0.999999680000154)*cj5))+(((-1.0)*x610*x618))+((x605*x618))+(((-1.0)*x612*x623))+(((-1.0)*x603*x617)));
evalcond[17]=((0.999999680000154)+(((0.000799999744000123)*new_r12*x621))+(((0.000799998732763011)*new_r22*sj4))+((x602*x625))+(((0.999998415953764)*x606))+(((-1.0)*x609*x624))+((x604*x625)));
evalcond[18]=((0.000799999744000123)+(((-1.0)*new_r22*x608))+(((-1.0)*x605*x625))+(((0.000799998732763011)*x606))+(((-0.999999680000154)*new_r12*x621))+((x610*x625))+(((-1.0)*x613*x624)));
evalcond[19]=(((sj4*x611))+(((0.000799999744000123)*sj5))+(((0.999998415953764)*cj4*new_r21))+(((-1.0)*x609*x622))+(((0.000799999744000123)*new_r11*x621))+((x602*x616))+((x604*x616)));
evalcond[20]=((((-0.999999680000154)*sj5))+(((-1.0)*x605*x616))+((x610*x616))+(((-0.999999680000154)*new_r11*x621))+((cj4*x611))+(((-1.0)*new_r21*x608))+(((-1.0)*x613*x622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x627=IKPowWithIntegerCheck(new_r12,-1);
if(!x627.valid){
continue;
}
CheckValue<IkReal> x628=IKPowWithIntegerCheck(new_r00,-1);
if(!x628.valid){
continue;
}
if( IKabs((sj4*(x627.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj4*cj5*(x628.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj4*(x627.value)))+IKsqr((cj4*cj5*(x628.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((sj4*(x627.value)), (cj4*cj5*(x628.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[21];
IkReal x629=IKsin(j3);
IkReal x630=IKcos(j3);
IkReal x631=((1.27199757805403e-6)*sj4);
IkReal x632=((0.999999680000154)*new_r00);
IkReal x633=((0.00158999697256753)*cj4);
IkReal x634=((0.00158999697256753)*sj4);
IkReal x635=(cj4*new_r22);
IkReal x636=((1.0)*cj5);
IkReal x637=((0.999998415953764)*sj4);
IkReal x638=((0.999999680000154)*sj4);
IkReal x639=((1.27199757805403e-6)*cj4);
IkReal x640=((0.000799998732763011)*new_r21);
IkReal x641=((0.000799999744000123)*new_r00);
IkReal x642=((0.000799999744000123)*sj4);
IkReal x643=((0.999998735953206)*cj5);
IkReal x644=((1.0)*sj4);
IkReal x645=(new_r11*x630);
IkReal x646=(cj4*x630);
IkReal x647=(new_r00*x629);
IkReal x648=((628.931813867135)*cj5*sj4);
IkReal x649=((0.999998735953206)*x630);
IkReal x650=(cj4*x629);
IkReal x651=(new_r11*x629);
IkReal x652=(sj4*x630);
IkReal x653=(new_r12*x629);
IkReal x654=(new_r12*x630);
IkReal x655=((0.00158999748136648)*sj4*sj5);
evalcond[0]=((((-1.0)*x644))+x653);
evalcond[1]=(((cj4*sj5))+x651);
evalcond[2]=(((new_r00*x630))+(((-1.0)*cj4*x636)));
evalcond[3]=(x654+(((0.00158999748136648)*cj4)));
evalcond[4]=((((-1.0)*sj5))+(((0.999998735953206)*x647)));
evalcond[5]=((((-1.0)*x647))+(((-1.0)*x648)));
evalcond[6]=((((-1.0)*x630*x644))+(((-0.00158999748136648)*x650)));
evalcond[7]=((((0.00158999748136648)*new_r22))+(((-1.0)*new_r12*x649)));
evalcond[8]=((((-1.0)*x629*x644))+(((0.00158999748136648)*x646))+new_r12);
evalcond[9]=((((-1.0)*x630*x648))+(((-1.0)*x636*x650)));
evalcond[10]=((((0.00158999748136648)*new_r21))+(((-1.0)*x636))+(((-0.999998735953206)*x645)));
evalcond[11]=(x645+x643+x655);
evalcond[12]=(((x629*x648))+(((-1.0)*x636*x646))+new_r00);
evalcond[13]=((((-1.0)*x629*x655))+(((-1.0)*x629*x643))+((sj5*x646)));
evalcond[14]=((((0.00158999748136648)*sj5*x652))+((sj5*x650))+((x630*x643))+new_r11);
evalcond[15]=((((-1.0)*x631*x647))+(((-1.0)*x633*x647))+(((-1.0)*x632*x652))+((x641*x646))+(((-0.000799999744000123)*cj5)));
evalcond[16]=((((0.999999680000154)*cj5))+(((-1.0)*x641*x652))+(((-1.0)*x639*x647))+((x634*x647))+(((-1.0)*x632*x646)));
evalcond[17]=((0.999999680000154)+(((0.000799998732763011)*new_r22*sj4))+(((0.999998415953764)*x635))+((x633*x654))+((x631*x654))+(((0.000799999744000123)*new_r12*x650))+(((-1.0)*x638*x653)));
evalcond[18]=((0.000799999744000123)+(((-0.999999680000154)*new_r12*x650))+((x639*x654))+(((-1.0)*x642*x653))+(((-1.0)*new_r22*x637))+(((-1.0)*x634*x654))+(((0.000799998732763011)*x635)));
evalcond[19]=((((0.000799999744000123)*new_r11*x650))+((sj4*x640))+(((0.000799999744000123)*sj5))+((x631*x645))+(((0.999998415953764)*cj4*new_r21))+((x633*x645))+(((-1.0)*x638*x651)));
evalcond[20]=(((cj4*x640))+((x639*x645))+(((-0.999999680000154)*sj5))+(((-1.0)*x642*x651))+(((-1.0)*new_r21*x637))+(((-0.999999680000154)*new_r11*x650))+(((-1.0)*x634*x645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=cj5;
j3eval[1]=((1.0)+(new_r11*new_r11)+(((-1.0)*(new_r00*new_r00))));
j3eval[2]=IKsign(cj5);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=sj5;
j3eval[1]=new_r01;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=new_r11;
j3eval[1]=sj5;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r00;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((1.00000126404839)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000126404839)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.00000126404839)*new_r01))+IKsqr(((-1.00000126404839)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((1.00000126404839)*new_r01), ((-1.00000126404839)*new_r11));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x656=IKcos(j3);
IkReal x657=IKsin(j3);
IkReal x658=((0.999998735953206)*x657);
IkReal x659=(new_r11*x656);
evalcond[0]=((((-1.0)*x658))+new_r01);
evalcond[1]=(new_r11+(((0.999998735953206)*x656)));
evalcond[2]=(((new_r01*x656))+((new_r11*x657)));
evalcond[3]=((0.999998735953206)+(((-1.0)*new_r01*x657))+x659);
evalcond[4]=((-1.0)+((new_r01*x658))+(((-0.999998735953206)*x659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r00;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.00000126404839)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.00000126404839)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.00000126404839)*new_r01))+IKsqr(((1.00000126404839)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.00000126404839)*new_r01), ((1.00000126404839)*new_r11));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x660=IKcos(j3);
IkReal x661=IKsin(j3);
IkReal x662=((0.999998735953206)*x661);
IkReal x663=(new_r11*x660);
evalcond[0]=(x662+new_r01);
evalcond[1]=((((-0.999998735953206)*x660))+new_r11);
evalcond[2]=(((new_r11*x661))+((new_r01*x660)));
evalcond[3]=((-0.999998735953206)+(((-1.0)*new_r01*x661))+x663);
evalcond[4]=((1.0)+(((-0.999998735953206)*x663))+((new_r01*x662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r01;
evalcond[2]=new_r11;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((1.00000126404839)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000126404839)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.00000126404839)*new_r00))+IKsqr(((-1.00000126404839)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((1.00000126404839)*new_r00), ((-1.00000126404839)*new_r10));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x664=IKsin(j3);
IkReal x665=IKcos(j3);
IkReal x666=(new_r10*x665);
IkReal x667=((0.999998735953206)*x664);
evalcond[0]=((((-1.0)*x667))+new_r00);
evalcond[1]=((((0.999998735953206)*x665))+new_r10);
evalcond[2]=(((new_r10*x664))+((new_r00*x665)));
evalcond[3]=((0.999998735953206)+x666+(((-1.0)*new_r00*x664)));
evalcond[4]=((-1.0)+(((-0.999998735953206)*x666))+((new_r00*x667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r01;
evalcond[2]=new_r11;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.00000126404839)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.00000126404839)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.00000126404839)*new_r00))+IKsqr(((1.00000126404839)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.00000126404839)*new_r00), ((1.00000126404839)*new_r10));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x668=IKsin(j3);
IkReal x669=IKcos(j3);
IkReal x670=(new_r10*x669);
IkReal x671=((0.999998735953206)*x668);
evalcond[0]=(x671+new_r00);
evalcond[1]=((((-0.999998735953206)*x669))+new_r10);
evalcond[2]=(((new_r10*x668))+((new_r00*x669)));
evalcond[3]=((-0.999998735953206)+x670+(((-1.0)*new_r00*x668)));
evalcond[4]=((1.0)+((new_r00*x671))+(((-0.999998735953206)*x670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x674=IKPowWithIntegerCheck(sj5,-1);
if(!x674.valid){
continue;
}
IkReal x672=x674.value;
IkReal x673=(new_r10*x672);
CheckValue<IkReal> x675=IKPowWithIntegerCheck(new_r11,-1);
if(!x675.valid){
continue;
}
if( IKabs(((1.00000126404839)*new_r01*x673*(x675.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000126404839)*x673)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.00000126404839)*new_r01*x673*(x675.value)))+IKsqr(((-1.00000126404839)*x673))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((1.00000126404839)*new_r01*x673*(x675.value)), ((-1.00000126404839)*x673));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x676=IKsin(j3);
IkReal x677=IKcos(j3);
IkReal x678=((0.999998735953206)*cj5);
IkReal x679=((0.999998735953206)*sj5);
IkReal x680=((0.999998735953206)*x676);
IkReal x681=(new_r11*x677);
IkReal x682=(new_r10*x677);
IkReal x683=((1.0)*x676);
evalcond[0]=(((new_r11*x676))+((new_r01*x677)));
evalcond[1]=(((new_r00*x677))+((new_r10*x676)));
evalcond[2]=((((-1.0)*x676*x678))+new_r01);
evalcond[3]=(((x677*x678))+new_r11);
evalcond[4]=((((-1.0)*x676*x679))+new_r00);
evalcond[5]=(((x677*x679))+new_r10);
evalcond[6]=(x679+x682+(((-1.0)*new_r00*x683)));
evalcond[7]=((((-1.0)*new_r01*x683))+x678+x681);
evalcond[8]=((((-0.999998735953206)*x682))+(((-1.0)*sj5))+((new_r00*x680)));
evalcond[9]=((((-0.999998735953206)*x681))+((new_r01*x680))+(((-1.0)*cj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x686=IKPowWithIntegerCheck(sj5,-1);
if(!x686.valid){
continue;
}
IkReal x684=x686.value;
IkReal x685=(new_r00*x684);
CheckValue<IkReal> x687=IKPowWithIntegerCheck(new_r01,-1);
if(!x687.valid){
continue;
}
if( IKabs(((1.00000126404839)*x685)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.00000126404839)*new_r11*x685*(x687.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.00000126404839)*x685))+IKsqr(((-1.00000126404839)*new_r11*x685*(x687.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((1.00000126404839)*x685), ((-1.00000126404839)*new_r11*x685*(x687.value)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x688=IKsin(j3);
IkReal x689=IKcos(j3);
IkReal x690=((0.999998735953206)*cj5);
IkReal x691=((0.999998735953206)*sj5);
IkReal x692=((0.999998735953206)*x688);
IkReal x693=(new_r11*x689);
IkReal x694=(new_r10*x689);
IkReal x695=((1.0)*x688);
evalcond[0]=(((new_r01*x689))+((new_r11*x688)));
evalcond[1]=(((new_r00*x689))+((new_r10*x688)));
evalcond[2]=((((-1.0)*x688*x690))+new_r01);
evalcond[3]=(((x689*x690))+new_r11);
evalcond[4]=((((-1.0)*x688*x691))+new_r00);
evalcond[5]=(((x689*x691))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x695))+x694+x691);
evalcond[7]=((((-1.0)*new_r01*x695))+x690+x693);
evalcond[8]=((((-1.0)*sj5))+((new_r00*x692))+(((-0.999998735953206)*x694)));
evalcond[9]=(((new_r01*x692))+(((-1.0)*cj5))+(((-0.999998735953206)*x693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x696 = IKatan2WithCheck(IkReal(((125000238.00615)*new_r01)),IkReal(((-125000238.00615)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x696.valid){
continue;
}
CheckValue<IkReal> x697=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x697.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x696.value)+(((1.5707963267949)*(x697.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[10];
IkReal x698=IKsin(j3);
IkReal x699=IKcos(j3);
IkReal x700=((0.999998735953206)*cj5);
IkReal x701=((0.999998735953206)*sj5);
IkReal x702=((0.999998735953206)*x698);
IkReal x703=(new_r11*x699);
IkReal x704=(new_r10*x699);
IkReal x705=((1.0)*x698);
evalcond[0]=(((new_r11*x698))+((new_r01*x699)));
evalcond[1]=(((new_r10*x698))+((new_r00*x699)));
evalcond[2]=((((-1.0)*x698*x700))+new_r01);
evalcond[3]=(new_r11+((x699*x700)));
evalcond[4]=((((-1.0)*x698*x701))+new_r00);
evalcond[5]=(new_r10+((x699*x701)));
evalcond[6]=(x701+x704+(((-1.0)*new_r00*x705)));
evalcond[7]=(x703+x700+(((-1.0)*new_r01*x705)));
evalcond[8]=((((-1.0)*sj5))+((new_r00*x702))+(((-0.999998735953206)*x704)));
evalcond[9]=(((new_r01*x702))+(((-0.999998735953206)*x703))+(((-1.0)*cj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j5), 6.28318530717959))))));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(new_r10, new_r00);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[21];
IkReal x706=IKsin(j3);
IkReal x707=IKcos(j3);
IkReal x708=(new_r11*x707);
IkReal x709=(new_r01*x706);
IkReal x710=(new_r10*x707);
IkReal x711=((0.999998735953206)*x707);
IkReal x712=(new_r02*x706);
IkReal x713=((0.000799999744000123)*x707);
IkReal x714=(new_r01*x707);
IkReal x715=(new_r11*x706);
IkReal x716=(new_r12*x706);
IkReal x717=(new_r00*x706);
IkReal x718=(new_r10*x706);
IkReal x719=(new_r12*x707);
IkReal x720=(new_r00*x707);
IkReal x721=(new_r02*x707);
evalcond[0]=((((-1.0)*x707))+new_r00);
evalcond[1]=((((-1.0)*x706))+new_r10);
evalcond[2]=((((-0.00158999748136648)*x706))+new_r02);
evalcond[3]=((((0.00158999748136648)*x707))+new_r12);
evalcond[4]=((((-0.999998735953206)*x706))+new_r01);
evalcond[5]=(x711+new_r11);
evalcond[6]=(x716+x721);
evalcond[7]=(x715+x714);
evalcond[8]=((-1.0)+x718+x720);
evalcond[9]=((((-1.0)*x717))+x710);
evalcond[10]=((0.00158999748136648)+(((-1.0)*x712))+x719);
evalcond[11]=((0.999998735953206)+(((-1.0)*x709))+x708);
evalcond[12]=((((-0.999998735953206)*x710))+(((0.999998735953206)*x717)));
evalcond[13]=((-0.999997471908009)+(((-0.999998735953206)*x708))+(((0.999998735953206)*x709)));
evalcond[14]=((-0.00158999547153527)+(((0.999998735953206)*x712))+(((-1.0)*new_r12*x711)));
evalcond[15]=((0.00158999496273696)+(((0.000799999744000123)*x715))+((new_r01*x713))+(((-0.00158999697256753)*x709))+(((0.00158999697256753)*x708)));
evalcond[16]=((1.27199597018957e-6)+(((1.27199757805403e-6)*x708))+(((-1.27199757805403e-6)*x709))+(((-0.999999680000154)*x714))+(((-0.999999680000154)*x715)));
evalcond[17]=((2.52809118176272e-6)+((new_r02*x713))+(((0.000799999744000123)*x716))+(((-0.00158999697256753)*x712))+(((0.00158999697256753)*x719)));
evalcond[18]=((2.02247294541017e-9)+(((-1.27199757805403e-6)*x712))+(((1.27199757805403e-6)*x719))+(((-0.999999680000154)*x716))+(((-0.999999680000154)*x721)));
evalcond[19]=((-0.000799999744000123)+((new_r00*x713))+(((0.000799999744000123)*x718))+(((-0.00158999697256753)*x717))+(((0.00158999697256753)*x710)));
evalcond[20]=((0.999999680000154)+(((-1.27199757805403e-6)*x717))+(((1.27199757805403e-6)*x710))+(((-0.999999680000154)*x718))+(((-0.999999680000154)*x720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j5, 6.28318530717959))))));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[21];
IkReal x722=IKsin(j3);
IkReal x723=IKcos(j3);
IkReal x724=(new_r11*x723);
IkReal x725=(new_r01*x722);
IkReal x726=(new_r10*x723);
IkReal x727=(new_r12*x723);
IkReal x728=(new_r02*x722);
IkReal x729=((0.000799999744000123)*x723);
IkReal x730=(new_r01*x723);
IkReal x731=(new_r11*x722);
IkReal x732=(new_r12*x722);
IkReal x733=(new_r00*x722);
IkReal x734=(new_r10*x722);
IkReal x735=(new_r00*x723);
IkReal x736=(new_r02*x723);
evalcond[0]=(x723+new_r00);
evalcond[1]=(x722+new_r10);
evalcond[2]=((((-0.00158999748136648)*x722))+new_r02);
evalcond[3]=(new_r12+(((0.00158999748136648)*x723)));
evalcond[4]=((((0.999998735953206)*x722))+new_r01);
evalcond[5]=((((-0.999998735953206)*x723))+new_r11);
evalcond[6]=(x736+x732);
evalcond[7]=(x731+x730);
evalcond[8]=((1.0)+x735+x734);
evalcond[9]=((((-1.0)*x733))+x726);
evalcond[10]=((0.00158999748136648)+(((-1.0)*x728))+x727);
evalcond[11]=((-0.999998735953206)+(((-1.0)*x725))+x724);
evalcond[12]=((((-0.999998735953206)*x726))+(((0.999998735953206)*x733)));
evalcond[13]=((0.999997471908009)+(((-0.999998735953206)*x724))+(((0.999998735953206)*x725)));
evalcond[14]=((-0.00158999547153527)+(((-0.999998735953206)*x727))+(((0.999998735953206)*x728)));
evalcond[15]=((-0.00158999496273696)+(((0.00158999697256753)*x724))+((new_r01*x729))+(((-0.00158999697256753)*x725))+(((0.000799999744000123)*x731)));
evalcond[16]=((-1.27199597018957e-6)+(((-1.27199757805403e-6)*x725))+(((1.27199757805403e-6)*x724))+(((-0.999999680000154)*x731))+(((-0.999999680000154)*x730)));
evalcond[17]=((2.52809118176272e-6)+(((0.00158999697256753)*x727))+((new_r02*x729))+(((-0.00158999697256753)*x728))+(((0.000799999744000123)*x732)));
evalcond[18]=((2.02247294541017e-9)+(((-1.27199757805403e-6)*x728))+(((1.27199757805403e-6)*x727))+(((-0.999999680000154)*x736))+(((-0.999999680000154)*x732)));
evalcond[19]=((0.000799999744000123)+(((0.00158999697256753)*x726))+((new_r00*x729))+(((-0.00158999697256753)*x733))+(((0.000799999744000123)*x734)));
evalcond[20]=((-0.999999680000154)+(((-1.27199757805403e-6)*x733))+(((1.27199757805403e-6)*x726))+(((-0.999999680000154)*x735))+(((-0.999999680000154)*x734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j4, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j5), 6.28318530717959))))));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[21];
IkReal x737=IKsin(j3);
IkReal x738=IKcos(j3);
IkReal x739=(new_r11*x738);
IkReal x740=(new_r01*x737);
IkReal x741=(new_r10*x738);
IkReal x742=(new_r12*x738);
IkReal x743=(new_r02*x737);
IkReal x744=((0.000799999744000123)*x738);
IkReal x745=(new_r01*x738);
IkReal x746=(new_r11*x737);
IkReal x747=(new_r12*x737);
IkReal x748=(new_r00*x737);
IkReal x749=(new_r10*x737);
IkReal x750=(new_r00*x738);
IkReal x751=(new_r02*x738);
evalcond[0]=(x738+new_r00);
evalcond[1]=(x737+new_r10);
evalcond[2]=(new_r02+(((0.00158999748136648)*x737)));
evalcond[3]=((((-0.00158999748136648)*x738))+new_r12);
evalcond[4]=((((-0.999998735953206)*x737))+new_r01);
evalcond[5]=((((0.999998735953206)*x738))+new_r11);
evalcond[6]=(x751+x747);
evalcond[7]=(x746+x745);
evalcond[8]=((1.0)+x750+x749);
evalcond[9]=((((-1.0)*x748))+x741);
evalcond[10]=((-0.00158999748136648)+(((-1.0)*x743))+x742);
evalcond[11]=((0.999998735953206)+(((-1.0)*x740))+x739);
evalcond[12]=((((-0.999998735953206)*x741))+(((0.999998735953206)*x748)));
evalcond[13]=((-0.999997471908009)+(((-0.999998735953206)*x739))+(((0.999998735953206)*x740)));
evalcond[14]=((0.00158999547153527)+(((-0.999998735953206)*x742))+(((0.999998735953206)*x743)));
evalcond[15]=((-0.00158999496273696)+(((-0.000799999744000123)*x746))+(((-1.0)*new_r01*x744))+(((0.00158999697256753)*x740))+(((-0.00158999697256753)*x739)));
evalcond[16]=((-1.27199597018957e-6)+(((0.999999680000154)*x746))+(((0.999999680000154)*x745))+(((-1.27199757805403e-6)*x739))+(((1.27199757805403e-6)*x740)));
evalcond[17]=((2.52809118176272e-6)+(((-0.000799999744000123)*x747))+(((0.00158999697256753)*x743))+(((-1.0)*new_r02*x744))+(((-0.00158999697256753)*x742)));
evalcond[18]=((2.02247294541017e-9)+(((-1.27199757805403e-6)*x742))+(((0.999999680000154)*x751))+(((0.999999680000154)*x747))+(((1.27199757805403e-6)*x743)));
evalcond[19]=((-0.000799999744000123)+(((-1.0)*new_r00*x744))+(((-0.000799999744000123)*x749))+(((0.00158999697256753)*x748))+(((-0.00158999697256753)*x741)));
evalcond[20]=((0.999999680000154)+(((-1.27199757805403e-6)*x741))+(((0.999999680000154)*x750))+(((0.999999680000154)*x749))+(((1.27199757805403e-6)*x748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j4, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j5, 6.28318530717959))))));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(new_r10, new_r00);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[21];
IkReal x752=IKsin(j3);
IkReal x753=IKcos(j3);
IkReal x754=(new_r11*x753);
IkReal x755=(new_r01*x752);
IkReal x756=(new_r10*x753);
IkReal x757=((0.999998735953206)*x753);
IkReal x758=(new_r02*x752);
IkReal x759=((0.000799999744000123)*x753);
IkReal x760=(new_r01*x753);
IkReal x761=(new_r11*x752);
IkReal x762=(new_r12*x752);
IkReal x763=(new_r00*x752);
IkReal x764=(new_r10*x752);
IkReal x765=(new_r12*x753);
IkReal x766=(new_r00*x753);
IkReal x767=(new_r02*x753);
evalcond[0]=((((-1.0)*x753))+new_r00);
evalcond[1]=((((-1.0)*x752))+new_r10);
evalcond[2]=(new_r02+(((0.00158999748136648)*x752)));
evalcond[3]=(new_r12+(((-0.00158999748136648)*x753)));
evalcond[4]=(new_r01+(((0.999998735953206)*x752)));
evalcond[5]=(new_r11+(((-1.0)*x757)));
evalcond[6]=(x767+x762);
evalcond[7]=(x760+x761);
evalcond[8]=((-1.0)+x764+x766);
evalcond[9]=((((-1.0)*x763))+x756);
evalcond[10]=((-0.00158999748136648)+(((-1.0)*x758))+x765);
evalcond[11]=((-0.999998735953206)+(((-1.0)*x755))+x754);
evalcond[12]=((((-0.999998735953206)*x756))+(((0.999998735953206)*x763)));
evalcond[13]=((0.999997471908009)+(((-0.999998735953206)*x754))+(((0.999998735953206)*x755)));
evalcond[14]=((0.00158999547153527)+(((-1.0)*new_r12*x757))+(((0.999998735953206)*x758)));
evalcond[15]=((0.00158999496273696)+(((-1.0)*new_r01*x759))+(((0.00158999697256753)*x755))+(((-0.00158999697256753)*x754))+(((-0.000799999744000123)*x761)));
evalcond[16]=((1.27199597018957e-6)+(((-1.27199757805403e-6)*x754))+(((1.27199757805403e-6)*x755))+(((0.999999680000154)*x761))+(((0.999999680000154)*x760)));
evalcond[17]=((2.52809118176272e-6)+(((0.00158999697256753)*x758))+(((-0.00158999697256753)*x765))+(((-1.0)*new_r02*x759))+(((-0.000799999744000123)*x762)));
evalcond[18]=((2.02247294541017e-9)+(((1.27199757805403e-6)*x758))+(((0.999999680000154)*x767))+(((0.999999680000154)*x762))+(((-1.27199757805403e-6)*x765)));
evalcond[19]=((0.000799999744000123)+(((-1.0)*new_r00*x759))+(((-0.00158999697256753)*x756))+(((-0.000799999744000123)*x764))+(((0.00158999697256753)*x763)));
evalcond[20]=((-0.999999680000154)+(((-1.27199757805403e-6)*x756))+(((1.27199757805403e-6)*x763))+(((0.999999680000154)*x764))+(((0.999999680000154)*x766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x768=(cj4*cj5);
IkReal x769=(cj4*sj5);
IkReal x770=((1.0)*new_r11);
CheckValue<IkReal> x771 = IKatan2WithCheck(IkReal((((new_r01*x768))+((new_r00*x769)))),IkReal(((((-1.0)*new_r10*x769))+(((-1.0)*x768*x770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x771.valid){
continue;
}
CheckValue<IkReal> x772=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r00*x770))+((new_r01*new_r10)))),-1);
if(!x772.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x771.value)+(((1.5707963267949)*(x772.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[21];
IkReal x773=IKcos(j3);
IkReal x774=IKsin(j3);
IkReal x775=((0.000799998732763011)*cj4);
IkReal x776=((0.00158999748136648)*sj5);
IkReal x777=((1.0)*sj4);
IkReal x778=(cj4*cj5);
IkReal x779=((0.999999680000154)*new_r11);
IkReal x780=((0.00158999748136648)*cj5);
IkReal x781=((0.00158999697256753)*new_r00);
IkReal x782=((0.999999680000154)*new_r10);
IkReal x783=((0.999998415953764)*new_r21);
IkReal x784=((0.00158999697256753)*new_r01);
IkReal x785=((0.000799998732763011)*sj4);
IkReal x786=((0.999998735953206)*cj5);
IkReal x787=((0.00158999697256753)*new_r02);
IkReal x788=((1.27199757805403e-6)*new_r00);
IkReal x789=((0.00158999697256753)*sj4);
IkReal x790=((0.000799999744000123)*new_r12);
IkReal x791=((0.000799999744000123)*new_r10);
IkReal x792=((0.000799999744000123)*new_r11);
IkReal x793=((1.27199757805403e-6)*new_r01);
IkReal x794=((0.999998415953764)*new_r20);
IkReal x795=((1.27199757805403e-6)*new_r12);
IkReal x796=((0.00158999748136648)*cj4);
IkReal x797=((1.27199757805403e-6)*cj4);
IkReal x798=((1.27199757805403e-6)*new_r02);
IkReal x799=((0.999999680000154)*new_r12);
IkReal x800=((1.27199757805403e-6)*sj4);
IkReal x801=((0.999998415953764)*new_r22);
IkReal x802=(sj4*x774);
IkReal x803=((0.999998735953206)*x773);
IkReal x804=((1.0)*x774);
IkReal x805=(cj4*x774);
IkReal x806=(new_r10*x773);
IkReal x807=((0.999998735953206)*x774);
IkReal x808=(new_r11*x773);
IkReal x809=(sj4*x773);
IkReal x810=(cj4*x773);
IkReal x811=(new_r12*x773);
IkReal x812=((0.00158999697256753)*x810);
IkReal x813=((0.999999680000154)*x809);
IkReal x814=((0.000799999744000123)*x810);
evalcond[0]=(((new_r12*x774))+((new_r02*x773))+(((-1.0)*x777)));
evalcond[1]=(((cj4*sj5))+((new_r11*x774))+((new_r01*x773)));
evalcond[2]=(((new_r00*x773))+((new_r10*x774))+(((-1.0)*x778)));
evalcond[3]=((((-1.0)*x774*x796))+(((-1.0)*x773*x777))+new_r02);
evalcond[4]=(((x773*x796))+(((-1.0)*x774*x777))+new_r12);
evalcond[5]=((((-1.0)*new_r02*x804))+x796+x811);
evalcond[6]=(((new_r02*x807))+(((0.00158999748136648)*new_r22))+(((-1.0)*new_r12*x803)));
evalcond[7]=((((-1.0)*new_r00*x804))+(((0.999998735953206)*sj5))+(((-1.0)*sj4*x780))+x806);
evalcond[8]=(((sj4*x776))+(((-1.0)*new_r01*x804))+x786+x808);
evalcond[9]=((((-1.0)*x776*x802))+((sj5*x810))+(((-1.0)*x774*x786))+new_r01);
evalcond[10]=(((x773*x786))+((x776*x809))+new_r11+((sj5*x805)));
evalcond[11]=((((-1.0)*sj5))+(((0.00158999748136648)*new_r20))+((new_r00*x807))+(((-1.0)*new_r10*x803)));
evalcond[12]=((((0.00158999748136648)*new_r21))+((new_r01*x807))+(((-1.0)*new_r11*x803))+(((-1.0)*cj5)));
evalcond[13]=((((-1.0)*sj5*x807))+((x780*x802))+new_r00+(((-1.0)*x773*x778)));
evalcond[14]=((((-1.0)*x780*x809))+(((-1.0)*x778*x804))+new_r10+((sj5*x803)));
evalcond[15]=((0.999999680000154)+((x790*x805))+((cj4*x801))+((new_r22*x785))+(((-1.0)*x798*x802))+(((-1.0)*x799*x802))+((new_r12*x812))+(((-1.0)*x787*x805))+((x795*x809))+((new_r02*x814))+(((-1.0)*new_r02*x813)));
evalcond[16]=((0.000799999744000123)+(((-1.0)*sj4*x801))+(((-0.999999680000154)*new_r02*x810))+(((-1.0)*x789*x811))+(((-0.000799999744000123)*new_r02*x809))+(((-1.0)*x799*x805))+(((-1.0)*new_r02*x774*x797))+(((-1.0)*x790*x802))+((new_r22*x775))+((x787*x802))+((x795*x810)));
evalcond[17]=(((new_r00*x814))+(((-1.0)*x782*x802))+((x800*x806))+((cj4*x794))+((x791*x805))+(((0.00158999697256753)*cj4*x806))+(((-1.0)*x781*x805))+(((-1.0)*x788*x802))+((new_r20*x785))+(((-0.000799999744000123)*cj5))+(((-1.0)*new_r00*x813)));
evalcond[18]=(((new_r21*x785))+((new_r01*x814))+(((-1.0)*x784*x805))+((x800*x808))+(((0.000799999744000123)*sj5))+((cj4*x783))+(((-1.0)*x779*x802))+(((-1.0)*x793*x802))+(((-1.0)*new_r01*x813))+(((0.00158999697256753)*cj4*x808))+((x792*x805)));
evalcond[19]=((((0.999999680000154)*cj5))+((x781*x802))+(((-0.000799999744000123)*new_r00*x809))+(((-1.0)*x782*x805))+(((-1.0)*x791*x802))+((x797*x806))+(((-1.0)*x789*x806))+(((-0.999999680000154)*new_r00*x810))+(((-1.0)*x788*x805))+((new_r20*x775))+(((-1.0)*sj4*x794)));
evalcond[20]=((((-0.999999680000154)*sj5))+((x797*x808))+(((-1.0)*x789*x808))+(((-1.0)*x779*x805))+(((-1.0)*x793*x805))+(((-0.000799999744000123)*new_r01*x809))+(((-1.0)*x792*x802))+(((-1.0)*sj4*x783))+((new_r21*x775))+((x784*x802))+(((-0.999999680000154)*new_r01*x810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x815=(cj4*cj5);
IkReal x816=((1.0)*new_r02);
CheckValue<IkReal> x817=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x816))+((new_r00*new_r12)))),-1);
if(!x817.valid){
continue;
}
CheckValue<IkReal> x818 = IKatan2WithCheck(IkReal((((new_r00*sj4))+(((-1.0)*x815*x816)))),IkReal((((new_r12*x815))+(((-1.0)*new_r10*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x818.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x817.value)))+(x818.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[21];
IkReal x819=IKcos(j3);
IkReal x820=IKsin(j3);
IkReal x821=((0.000799998732763011)*cj4);
IkReal x822=((0.00158999748136648)*sj5);
IkReal x823=((1.0)*sj4);
IkReal x824=(cj4*cj5);
IkReal x825=((0.999999680000154)*new_r11);
IkReal x826=((0.00158999748136648)*cj5);
IkReal x827=((0.00158999697256753)*new_r00);
IkReal x828=((0.999999680000154)*new_r10);
IkReal x829=((0.999998415953764)*new_r21);
IkReal x830=((0.00158999697256753)*new_r01);
IkReal x831=((0.000799998732763011)*sj4);
IkReal x832=((0.999998735953206)*cj5);
IkReal x833=((0.00158999697256753)*new_r02);
IkReal x834=((1.27199757805403e-6)*new_r00);
IkReal x835=((0.00158999697256753)*sj4);
IkReal x836=((0.000799999744000123)*new_r12);
IkReal x837=((0.000799999744000123)*new_r10);
IkReal x838=((0.000799999744000123)*new_r11);
IkReal x839=((1.27199757805403e-6)*new_r01);
IkReal x840=((0.999998415953764)*new_r20);
IkReal x841=((1.27199757805403e-6)*new_r12);
IkReal x842=((0.00158999748136648)*cj4);
IkReal x843=((1.27199757805403e-6)*cj4);
IkReal x844=((1.27199757805403e-6)*new_r02);
IkReal x845=((0.999999680000154)*new_r12);
IkReal x846=((1.27199757805403e-6)*sj4);
IkReal x847=((0.999998415953764)*new_r22);
IkReal x848=(sj4*x820);
IkReal x849=((0.999998735953206)*x819);
IkReal x850=((1.0)*x820);
IkReal x851=(cj4*x820);
IkReal x852=(new_r10*x819);
IkReal x853=((0.999998735953206)*x820);
IkReal x854=(new_r11*x819);
IkReal x855=(sj4*x819);
IkReal x856=(cj4*x819);
IkReal x857=(new_r12*x819);
IkReal x858=((0.00158999697256753)*x856);
IkReal x859=((0.999999680000154)*x855);
IkReal x860=((0.000799999744000123)*x856);
evalcond[0]=(((new_r12*x820))+(((-1.0)*x823))+((new_r02*x819)));
evalcond[1]=(((new_r01*x819))+((new_r11*x820))+((cj4*sj5)));
evalcond[2]=(((new_r00*x819))+((new_r10*x820))+(((-1.0)*x824)));
evalcond[3]=((((-1.0)*x819*x823))+new_r02+(((-1.0)*x820*x842)));
evalcond[4]=(((x819*x842))+(((-1.0)*x820*x823))+new_r12);
evalcond[5]=(x857+x842+(((-1.0)*new_r02*x850)));
evalcond[6]=((((0.00158999748136648)*new_r22))+(((-1.0)*new_r12*x849))+((new_r02*x853)));
evalcond[7]=((((0.999998735953206)*sj5))+(((-1.0)*sj4*x826))+(((-1.0)*new_r00*x850))+x852);
evalcond[8]=((((-1.0)*new_r01*x850))+x854+x832+((sj4*x822)));
evalcond[9]=(((sj5*x856))+(((-1.0)*x820*x832))+(((-1.0)*x822*x848))+new_r01);
evalcond[10]=(((sj5*x851))+((x819*x832))+((x822*x855))+new_r11);
evalcond[11]=((((-1.0)*sj5))+(((0.00158999748136648)*new_r20))+(((-1.0)*new_r10*x849))+((new_r00*x853)));
evalcond[12]=((((0.00158999748136648)*new_r21))+(((-1.0)*new_r11*x849))+((new_r01*x853))+(((-1.0)*cj5)));
evalcond[13]=(((x826*x848))+(((-1.0)*sj5*x853))+(((-1.0)*x819*x824))+new_r00);
evalcond[14]=((((-1.0)*x826*x855))+((sj5*x849))+new_r10+(((-1.0)*x824*x850)));
evalcond[15]=((0.999999680000154)+((new_r22*x831))+((cj4*x847))+((x841*x855))+((new_r12*x858))+((new_r02*x860))+(((-1.0)*x844*x848))+(((-1.0)*x833*x851))+(((-1.0)*x845*x848))+((x836*x851))+(((-1.0)*new_r02*x859)));
evalcond[16]=((0.000799999744000123)+(((-1.0)*x836*x848))+((x833*x848))+(((-1.0)*x845*x851))+((new_r22*x821))+(((-0.999999680000154)*new_r02*x856))+(((-1.0)*x835*x857))+((x841*x856))+(((-1.0)*new_r02*x820*x843))+(((-1.0)*sj4*x847))+(((-0.000799999744000123)*new_r02*x855)));
evalcond[17]=(((new_r00*x860))+(((-1.0)*x828*x848))+(((-1.0)*new_r00*x859))+((cj4*x840))+(((-1.0)*x834*x848))+(((-1.0)*x827*x851))+(((-0.000799999744000123)*cj5))+((new_r20*x831))+((x846*x852))+(((0.00158999697256753)*cj4*x852))+((x837*x851)));
evalcond[18]=(((new_r01*x860))+(((-1.0)*new_r01*x859))+(((0.000799999744000123)*sj5))+((cj4*x829))+((x838*x851))+((new_r21*x831))+((x846*x854))+(((-1.0)*x825*x848))+(((0.00158999697256753)*cj4*x854))+(((-1.0)*x839*x848))+(((-1.0)*x830*x851)));
evalcond[19]=(((new_r20*x821))+(((0.999999680000154)*cj5))+(((-1.0)*x834*x851))+(((-0.999999680000154)*new_r00*x856))+((x827*x848))+(((-1.0)*x837*x848))+(((-1.0)*x835*x852))+(((-1.0)*x828*x851))+(((-1.0)*sj4*x840))+((x843*x852))+(((-0.000799999744000123)*new_r00*x855)));
evalcond[20]=(((new_r21*x821))+(((-1.0)*x839*x851))+(((-0.999999680000154)*new_r01*x856))+(((-1.0)*x825*x851))+(((-0.999999680000154)*sj5))+(((-1.0)*sj4*x829))+(((-1.0)*x835*x854))+((x830*x848))+(((-0.000799999744000123)*new_r01*x855))+(((-1.0)*x838*x848))+((x843*x854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x861=((1.0)*new_r11);
IkReal x862=(cj4*sj5);
CheckValue<IkReal> x863 = IKatan2WithCheck(IkReal((((new_r01*sj4))+((new_r02*x862)))),IkReal(((((-1.0)*sj4*x861))+(((-1.0)*new_r12*x862)))),IKFAST_ATAN2_MAGTHRESH);
if(!x863.valid){
continue;
}
CheckValue<IkReal> x864=IKPowWithIntegerCheck(IKsign((((new_r01*new_r12))+(((-1.0)*new_r02*x861)))),-1);
if(!x864.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x863.value)+(((1.5707963267949)*(x864.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[21];
IkReal x865=IKcos(j3);
IkReal x866=IKsin(j3);
IkReal x867=((0.000799998732763011)*cj4);
IkReal x868=((0.00158999748136648)*sj5);
IkReal x869=((1.0)*sj4);
IkReal x870=(cj4*cj5);
IkReal x871=((0.999999680000154)*new_r11);
IkReal x872=((0.00158999748136648)*cj5);
IkReal x873=((0.00158999697256753)*new_r00);
IkReal x874=((0.999999680000154)*new_r10);
IkReal x875=((0.999998415953764)*new_r21);
IkReal x876=((0.00158999697256753)*new_r01);
IkReal x877=((0.000799998732763011)*sj4);
IkReal x878=((0.999998735953206)*cj5);
IkReal x879=((0.00158999697256753)*new_r02);
IkReal x880=((1.27199757805403e-6)*new_r00);
IkReal x881=((0.00158999697256753)*sj4);
IkReal x882=((0.000799999744000123)*new_r12);
IkReal x883=((0.000799999744000123)*new_r10);
IkReal x884=((0.000799999744000123)*new_r11);
IkReal x885=((1.27199757805403e-6)*new_r01);
IkReal x886=((0.999998415953764)*new_r20);
IkReal x887=((1.27199757805403e-6)*new_r12);
IkReal x888=((0.00158999748136648)*cj4);
IkReal x889=((1.27199757805403e-6)*cj4);
IkReal x890=((1.27199757805403e-6)*new_r02);
IkReal x891=((0.999999680000154)*new_r12);
IkReal x892=((1.27199757805403e-6)*sj4);
IkReal x893=((0.999998415953764)*new_r22);
IkReal x894=(sj4*x866);
IkReal x895=((0.999998735953206)*x865);
IkReal x896=((1.0)*x866);
IkReal x897=(cj4*x866);
IkReal x898=(new_r10*x865);
IkReal x899=((0.999998735953206)*x866);
IkReal x900=(new_r11*x865);
IkReal x901=(sj4*x865);
IkReal x902=(cj4*x865);
IkReal x903=(new_r12*x865);
IkReal x904=((0.00158999697256753)*x902);
IkReal x905=((0.999999680000154)*x901);
IkReal x906=((0.000799999744000123)*x902);
evalcond[0]=((((-1.0)*x869))+((new_r12*x866))+((new_r02*x865)));
evalcond[1]=(((new_r01*x865))+((cj4*sj5))+((new_r11*x866)));
evalcond[2]=(((new_r00*x865))+(((-1.0)*x870))+((new_r10*x866)));
evalcond[3]=((((-1.0)*x865*x869))+(((-1.0)*x866*x888))+new_r02);
evalcond[4]=((((-1.0)*x866*x869))+((x865*x888))+new_r12);
evalcond[5]=((((-1.0)*new_r02*x896))+x888+x903);
evalcond[6]=((((0.00158999748136648)*new_r22))+(((-1.0)*new_r12*x895))+((new_r02*x899)));
evalcond[7]=((((-1.0)*sj4*x872))+(((0.999998735953206)*sj5))+(((-1.0)*new_r00*x896))+x898);
evalcond[8]=((((-1.0)*new_r01*x896))+((sj4*x868))+x878+x900);
evalcond[9]=((((-1.0)*x866*x878))+((sj5*x902))+(((-1.0)*x868*x894))+new_r01);
evalcond[10]=(((sj5*x897))+new_r11+((x865*x878))+((x868*x901)));
evalcond[11]=((((-1.0)*sj5))+(((0.00158999748136648)*new_r20))+((new_r00*x899))+(((-1.0)*new_r10*x895)));
evalcond[12]=((((0.00158999748136648)*new_r21))+((new_r01*x899))+(((-1.0)*new_r11*x895))+(((-1.0)*cj5)));
evalcond[13]=((((-1.0)*sj5*x899))+(((-1.0)*x865*x870))+new_r00+((x872*x894)));
evalcond[14]=((((-1.0)*x870*x896))+((sj5*x895))+new_r10+(((-1.0)*x872*x901)));
evalcond[15]=((0.999999680000154)+(((-1.0)*x879*x897))+((x887*x901))+(((-1.0)*new_r02*x905))+((x882*x897))+((new_r12*x904))+((cj4*x893))+((new_r22*x877))+((new_r02*x906))+(((-1.0)*x890*x894))+(((-1.0)*x891*x894)));
evalcond[16]=((0.000799999744000123)+(((-0.999999680000154)*new_r02*x902))+(((-1.0)*new_r02*x866*x889))+(((-1.0)*x882*x894))+((x879*x894))+((x887*x902))+(((-0.000799999744000123)*new_r02*x901))+(((-1.0)*sj4*x893))+((new_r22*x867))+(((-1.0)*x881*x903))+(((-1.0)*x891*x897)));
evalcond[17]=((((-1.0)*x873*x897))+((new_r20*x877))+((x883*x897))+(((-1.0)*new_r00*x905))+(((-0.000799999744000123)*cj5))+((x892*x898))+((cj4*x886))+((new_r00*x906))+(((-1.0)*x880*x894))+(((-1.0)*x874*x894))+(((0.00158999697256753)*cj4*x898)));
evalcond[18]=(((x884*x897))+(((0.000799999744000123)*sj5))+((x892*x900))+(((-1.0)*x876*x897))+((cj4*x875))+((new_r01*x906))+(((-1.0)*x885*x894))+(((-1.0)*x871*x894))+((new_r21*x877))+(((-1.0)*new_r01*x905))+(((0.00158999697256753)*cj4*x900)));
evalcond[19]=(((x873*x894))+(((0.999999680000154)*cj5))+(((-1.0)*x883*x894))+(((-0.999999680000154)*new_r00*x902))+(((-0.000799999744000123)*new_r00*x901))+((new_r20*x867))+(((-1.0)*x881*x898))+(((-1.0)*sj4*x886))+((x889*x898))+(((-1.0)*x880*x897))+(((-1.0)*x874*x897)));
evalcond[20]=((((-1.0)*sj4*x875))+(((-1.0)*x884*x894))+(((-0.999999680000154)*new_r01*x902))+((x876*x894))+(((-0.999999680000154)*sj5))+(((-0.000799999744000123)*new_r01*x901))+(((-1.0)*x885*x897))+(((-1.0)*x871*x897))+(((-1.0)*x881*x900))+((new_r21*x867))+((x889*x900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x907=((10000031681.0)*sj4);
IkReal x908=((15900025.1863751)*cj4);
CheckValue<IkReal> x909=IKPowWithIntegerCheck(IKsign(((((10000031681.0)*(new_r02*new_r02)))+(((10000031681.0)*(new_r12*new_r12))))),-1);
if(!x909.valid){
continue;
}
CheckValue<IkReal> x910 = IKatan2WithCheck(IkReal((((new_r12*x907))+((new_r02*x908)))),IkReal(((((-1.0)*new_r12*x908))+((new_r02*x907)))),IKFAST_ATAN2_MAGTHRESH);
if(!x910.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x909.value)))+(x910.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x911=IKsin(j3);
IkReal x912=IKcos(j3);
IkReal x913=((0.000799999744000123)*new_r02);
IkReal x914=((1.27199757805403e-6)*new_r12);
IkReal x915=((1.0)*sj4);
IkReal x916=(new_r22*sj4);
IkReal x917=(cj4*new_r22);
IkReal x918=((0.999999680000154)*sj4);
IkReal x919=((0.00158999697256753)*sj4);
IkReal x920=((0.00158999748136648)*cj4);
IkReal x921=(cj4*x912);
IkReal x922=(new_r12*x912);
IkReal x923=(new_r02*x911);
IkReal x924=(new_r12*x911);
IkReal x925=(new_r02*x912);
IkReal x926=(sj4*x912);
evalcond[0]=((((-1.0)*x915))+x924+x925);
evalcond[1]=((((-1.0)*x912*x915))+new_r02+(((-1.0)*x911*x920)));
evalcond[2]=(new_r12+(((-1.0)*x911*x915))+((x912*x920)));
evalcond[3]=((((-1.0)*x923))+x922+x920);
evalcond[4]=((((0.00158999748136648)*new_r22))+(((-0.999998735953206)*x922))+(((0.999998735953206)*x923)));
evalcond[5]=((0.999999680000154)+(((0.00158999697256753)*new_r12*x921))+(((-1.27199757805403e-6)*sj4*x923))+(((0.999998415953764)*x917))+((x914*x926))+(((-1.0)*x918*x925))+(((-1.0)*x918*x924))+(((-0.00158999697256753)*cj4*x923))+(((0.000799998732763011)*x916))+(((0.000799999744000123)*cj4*x924))+((x913*x921)));
evalcond[6]=((0.000799999744000123)+(((-0.999999680000154)*cj4*x924))+((x919*x923))+(((-0.999999680000154)*new_r02*x921))+(((-0.000799999744000123)*sj4*x924))+((x914*x921))+(((-1.0)*x913*x926))+(((-1.0)*x919*x922))+(((-1.27199757805403e-6)*cj4*x923))+(((0.000799998732763011)*x917))+(((-0.999998415953764)*x916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
j5eval[0]=cj4;
j5eval[1]=((IKabs((((new_r10*sj3))+((cj3*new_r00)))))+(IKabs(((((-1.0)*cj3*new_r01))+(((-1.0)*new_r11*sj3))))));
j5eval[2]=IKsign(cj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=cj4;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((-0.999998735953206)*new_r21))+(((0.00158999748136648)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.999998735953206)*new_r20))+(((0.00158999748136648)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.999998735953206)*new_r21))+(((0.00158999748136648)*new_r20))))+IKsqr(((((0.999998735953206)*new_r20))+(((0.00158999748136648)*new_r21))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-0.999998735953206)*new_r21))+(((0.00158999748136648)*new_r20))), ((((0.999998735953206)*new_r20))+(((0.00158999748136648)*new_r21))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x927=IKsin(j5);
IkReal x928=IKcos(j5);
CheckValue<IkReal> x948=IKPowWithIntegerCheck(new_r02,-1);
if(!x948.valid){
continue;
}
IkReal x929=x948.value;
IkReal x930=sj3*sj3;
IkReal x931=new_r02*new_r02;
CheckValue<IkReal> x949=IKPowWithIntegerCheck(sj3,-1);
if(!x949.valid){
continue;
}
IkReal x932=x949.value;
IkReal x933=((1.27199757805403e-6)*new_r10);
IkReal x934=(cj3*new_r10);
IkReal x935=(cj3*new_r11);
IkReal x936=((0.999998735953206)*sj3);
IkReal x937=((0.00158999697256753)*new_r10);
IkReal x938=((1.0)*sj3);
IkReal x939=((0.00158999697256753)*new_r01);
IkReal x940=((1.27199757805403e-6)*new_r01);
IkReal x941=((0.999998735953206)*x927);
IkReal x942=((0.00158999748136648)*x928);
IkReal x943=((0.999998735953206)*x928);
IkReal x944=((0.00158999748136648)*x927);
IkReal x945=(x929*x930);
IkReal x946=(x931*x932);
IkReal x947=(x943+x944);
evalcond[0]=((((-1.0)*x947))+new_r20);
evalcond[1]=((((-1.0)*x942))+new_r21+x941);
evalcond[2]=((((-1.0)*x928*x936))+new_r01+(((-1.0)*sj3*x944)));
evalcond[3]=(((cj3*x944))+((cj3*x943))+new_r11);
evalcond[4]=(((sj3*x942))+(((-1.0)*x927*x936))+new_r00);
evalcond[5]=(((new_r02*x941))+(((-1.0)*new_r02*x942))+new_r10);
evalcond[6]=((((-1.0)*x942))+(((-1.0)*new_r00*x938))+x934+x941);
evalcond[7]=((((-1.0)*new_r01*x938))+x935+x947);
evalcond[8]=((((0.00158999748136648)*new_r20))+((new_r00*x936))+(((-1.0)*x927))+(((-0.999998735953206)*x934)));
evalcond[9]=((((0.00158999748136648)*new_r21))+(((-1.0)*x928))+((new_r01*x936))+(((-0.999998735953206)*x935)));
evalcond[10]=(((new_r02*x933))+((x933*x945))+(((-0.000799999744000123)*x928))+(((0.000799998732763011)*new_r20)));
evalcond[11]=((((0.000799998732763011)*new_r21))+(((-1.0)*x940*x946))+(((-1.0)*sj3*x940))+(((0.000799999744000123)*x927)));
evalcond[12]=((((-1.0)*new_r02*x937))+(((-0.999998415953764)*new_r20))+(((-1.0)*x937*x945))+(((0.999999680000154)*x928)));
evalcond[13]=(((x939*x946))+(((-0.999999680000154)*x927))+(((-0.999998415953764)*new_r21))+((sj3*x939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((0.999998735953206)*new_r21))+(((0.00158999748136648)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.999998735953206)*new_r20))+(((0.00158999748136648)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.999998735953206)*new_r21))+(((0.00158999748136648)*new_r20))))+IKsqr(((((-0.999998735953206)*new_r20))+(((0.00158999748136648)*new_r21))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((0.999998735953206)*new_r21))+(((0.00158999748136648)*new_r20))), ((((-0.999998735953206)*new_r20))+(((0.00158999748136648)*new_r21))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x950=IKcos(j5);
IkReal x951=IKsin(j5);
CheckValue<IkReal> x971=IKPowWithIntegerCheck(new_r02,-1);
if(!x971.valid){
continue;
}
IkReal x952=x971.value;
IkReal x953=sj3*sj3;
IkReal x954=new_r02*new_r02;
CheckValue<IkReal> x972=IKPowWithIntegerCheck(sj3,-1);
if(!x972.valid){
continue;
}
IkReal x955=x972.value;
IkReal x956=((1.27199757805403e-6)*new_r10);
IkReal x957=(cj3*new_r10);
IkReal x958=(cj3*new_r11);
IkReal x959=((0.999998735953206)*sj3);
IkReal x960=((0.00158999697256753)*new_r10);
IkReal x961=((1.0)*sj3);
IkReal x962=((0.00158999697256753)*new_r01);
IkReal x963=((1.27199757805403e-6)*new_r01);
IkReal x964=((0.00158999748136648)*x950);
IkReal x965=((0.999998735953206)*x951);
IkReal x966=((0.999998735953206)*x950);
IkReal x967=((0.00158999748136648)*x951);
IkReal x968=(x952*x953);
IkReal x969=(x954*x955);
IkReal x970=(x964+x965);
evalcond[0]=(new_r20+x966+(((-1.0)*x967)));
evalcond[1]=(new_r21+(((-1.0)*x970)));
evalcond[2]=(((sj3*x967))+(((-1.0)*x950*x959))+new_r01);
evalcond[3]=((((-1.0)*cj3*x967))+((cj3*x966))+new_r11);
evalcond[4]=((((-1.0)*sj3*x964))+(((-1.0)*x951*x959))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*new_r02*x965))+(((-1.0)*new_r02*x964)));
evalcond[6]=((((-1.0)*new_r00*x961))+x970+x957);
evalcond[7]=((((-1.0)*new_r01*x961))+x966+x958+(((-1.0)*x967)));
evalcond[8]=(((new_r00*x959))+(((0.00158999748136648)*new_r20))+(((-1.0)*x951))+(((-0.999998735953206)*x957)));
evalcond[9]=(((new_r01*x959))+(((0.00158999748136648)*new_r21))+(((-1.0)*x950))+(((-0.999998735953206)*x958)));
evalcond[10]=(((new_r02*x956))+(((-0.000799999744000123)*x950))+(((-0.000799998732763011)*new_r20))+((x956*x968)));
evalcond[11]=((((0.000799999744000123)*x951))+(((-0.000799998732763011)*new_r21))+((x963*x969))+((sj3*x963)));
evalcond[12]=((((-1.0)*x960*x968))+(((0.999998415953764)*new_r20))+(((0.999999680000154)*x950))+(((-1.0)*new_r02*x960)));
evalcond[13]=((((-1.0)*x962*x969))+(((0.999998415953764)*new_r21))+(((-1.0)*sj3*x962))+(((-0.999999680000154)*x951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((628.931813867135)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((628.931813867135)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((628.931813867135)*new_r20))+IKsqr(((628.931813867135)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((628.931813867135)*new_r20), ((628.931813867135)*new_r21));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x973=IKsin(j5);
IkReal x974=IKcos(j5);
IkReal x975=(new_r01*new_r02);
IkReal x976=(new_r02*new_r11);
IkReal x977=((628.931018867892)*new_r02);
IkReal x978=(new_r00*new_r02);
IkReal x979=(new_r10*new_r12);
IkReal x980=(new_r02*new_r10);
IkReal x981=((1.0)*sj3);
IkReal x982=((628.931612609052)*new_r12);
IkReal x983=(new_r11*new_r12);
IkReal x984=((0.503145290087241)*new_r12);
IkReal x985=((1.0)*x974);
IkReal x986=((0.999998735953206)*x974);
IkReal x987=((628.931813867135)*x974);
evalcond[0]=(((new_r11*sj3))+((cj3*new_r01))+x973);
evalcond[1]=(new_r20+(((-0.00158999748136648)*x973)));
evalcond[2]=(new_r21+(((-0.00158999748136648)*x974)));
evalcond[3]=((((-1.0)*x985))+((new_r10*sj3))+((cj3*new_r00)));
evalcond[4]=((((-1.0)*new_r00*x981))+((cj3*new_r10))+(((0.999998735953206)*x973)));
evalcond[5]=((((-1.0)*new_r01*x981))+((cj3*new_r11))+x986);
evalcond[6]=((((-1.0)*sj3*x986))+((cj3*x973))+new_r01);
evalcond[7]=(((cj3*x986))+new_r11+((sj3*x973)));
evalcond[8]=(new_r00+(((-1.0)*x973*x977))+((new_r12*x987)));
evalcond[9]=((((-1.0)*new_r02*x987))+(((-628.931018867892)*new_r12*x973))+new_r10);
evalcond[10]=((((0.00158999748136648)*new_r20))+(((-1.0)*x973))+(((628.931018867892)*x979))+((new_r00*x977)));
evalcond[11]=((((-1.0)*x985))+(((0.00158999748136648)*new_r21))+(((628.931018867892)*x975))+(((628.931018867892)*x983)));
evalcond[12]=((((0.503145290087241)*x980))+(((-0.000799999744000123)*x974))+(((0.999998415953764)*new_r20))+(((-1.0)*new_r00*x984))+(((-0.999999680000154)*x978))+(((-0.999999680000154)*x979)));
evalcond[13]=((((-1.0)*new_r01*x984))+(((0.999998415953764)*new_r21))+(((0.000799999744000123)*x973))+(((0.503145290087241)*x976))+(((-0.999999680000154)*x975))+(((-0.999999680000154)*x983)));
evalcond[14]=(((new_r00*x982))+(((0.000799998732763011)*new_r20))+(((-628.931612609052)*x980))+(((-0.000799999744000123)*x979))+(((-0.000799999744000123)*x978))+(((0.999999680000154)*x974)));
evalcond[15]=((((0.000799998732763011)*new_r21))+(((-0.000799999744000123)*x975))+(((-0.000799999744000123)*x983))+(((-628.931612609052)*x976))+(((-0.999999680000154)*x973))+((new_r01*x982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((628.931813867135)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((628.931813867135)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((628.931813867135)*new_r20))+IKsqr(((628.931813867135)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((628.931813867135)*new_r20), ((628.931813867135)*new_r21));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x988=IKcos(j5);
IkReal x989=IKsin(j5);
IkReal x990=(new_r01*new_r02);
IkReal x991=(new_r02*new_r11);
IkReal x992=(new_r00*new_r02);
IkReal x993=(new_r10*new_r12);
IkReal x994=(new_r02*new_r10);
IkReal x995=((1.0)*sj3);
IkReal x996=((628.931612609052)*new_r12);
IkReal x997=(new_r11*new_r12);
IkReal x998=((0.503145290087241)*new_r12);
IkReal x999=((1.0)*x989);
IkReal x1000=((0.999998735953206)*x989);
IkReal x1001=((628.931813867135)*x989);
IkReal x1002=((628.931018867892)*x988);
evalcond[0]=(((new_r10*sj3))+((cj3*new_r00))+x988);
evalcond[1]=(new_r20+(((-0.00158999748136648)*x989)));
evalcond[2]=(new_r21+(((-0.00158999748136648)*x988)));
evalcond[3]=(((new_r11*sj3))+(((-1.0)*x999))+((cj3*new_r01)));
evalcond[4]=((((-1.0)*new_r00*x995))+x1000+((cj3*new_r10)));
evalcond[5]=((((-1.0)*new_r01*x995))+((cj3*new_r11))+(((0.999998735953206)*x988)));
evalcond[6]=((((-1.0)*sj3*x1000))+((cj3*x988))+new_r00);
evalcond[7]=(((cj3*x1000))+new_r10+((sj3*x988)));
evalcond[8]=((((-1.0)*new_r12*x1001))+new_r01+((new_r02*x1002)));
evalcond[9]=(((new_r12*x1002))+new_r11+((new_r02*x1001)));
evalcond[10]=((((0.00158999748136648)*new_r20))+(((-1.0)*x999))+(((-628.931018867892)*x992))+(((-628.931018867892)*x993)));
evalcond[11]=((((0.00158999748136648)*new_r21))+(((-1.0)*x988))+(((-628.931018867892)*x990))+(((-628.931018867892)*x997)));
evalcond[12]=((((-1.0)*new_r00*x998))+(((-0.999999680000154)*x993))+(((-0.999999680000154)*x992))+(((-0.000799999744000123)*x988))+(((0.503145290087241)*x994))+(((-0.999998415953764)*new_r20)));
evalcond[13]=((((-0.999999680000154)*x997))+(((-0.999999680000154)*x990))+(((-1.0)*new_r01*x998))+(((0.000799999744000123)*x989))+(((0.503145290087241)*x991))+(((-0.999998415953764)*new_r21)));
evalcond[14]=((((-628.931612609052)*x994))+(((0.999999680000154)*x988))+(((-0.000799998732763011)*new_r20))+(((-0.000799999744000123)*x992))+(((-0.000799999744000123)*x993))+((new_r00*x996)));
evalcond[15]=((((-628.931612609052)*x991))+(((-0.000799998732763011)*new_r21))+(((-0.000799999744000123)*x990))+(((-0.000799999744000123)*x997))+(((-0.999999680000154)*x989))+((new_r01*x996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1006=IKPowWithIntegerCheck(cj4,-1);
if(!x1006.valid){
continue;
}
IkReal x1003=x1006.value;
IkReal x1004=(cj3*new_r01);
IkReal x1005=(new_r11*sj3);
CheckValue<IkReal> x1007=IKPowWithIntegerCheck(sj4,-1);
if(!x1007.valid){
continue;
}
if( IKabs((x1003*(((((-1.0)*x1005))+(((-1.0)*x1004)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.99999488000328e-9)*x1003*(x1007.value)*(((((198750.06359999)*x1004))+(((198750.06359999)*x1005))+(((125000238.00615)*cj4*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1003*(((((-1.0)*x1005))+(((-1.0)*x1004))))))+IKsqr(((7.99999488000328e-9)*x1003*(x1007.value)*(((((198750.06359999)*x1004))+(((198750.06359999)*x1005))+(((125000238.00615)*cj4*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x1003*(((((-1.0)*x1005))+(((-1.0)*x1004))))), ((7.99999488000328e-9)*x1003*(x1007.value)*(((((198750.06359999)*x1004))+(((198750.06359999)*x1005))+(((125000238.00615)*cj4*new_r20))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1008=IKcos(j5);
IkReal x1009=IKsin(j5);
IkReal x1010=(cj3*sj4);
IkReal x1011=((1.27199757805403e-6)*new_r11);
IkReal x1012=((0.00158999697256753)*new_r10);
IkReal x1013=(new_r20*sj4);
IkReal x1014=((1.27199757805403e-6)*sj3);
IkReal x1015=(cj4*new_r01);
IkReal x1016=(new_r00*sj4);
IkReal x1017=((0.00158999697256753)*new_r11);
IkReal x1018=(cj4*sj3);
IkReal x1019=(cj4*new_r21);
IkReal x1020=(sj3*sj4);
IkReal x1021=((0.000799999744000123)*new_r11);
IkReal x1022=(cj3*cj4);
IkReal x1023=((0.999999680000154)*new_r10);
IkReal x1024=((0.000799999744000123)*new_r10);
IkReal x1025=(cj3*new_r10);
IkReal x1026=(cj3*new_r11);
IkReal x1027=((1.27199757805403e-6)*new_r10);
IkReal x1028=((0.999998735953206)*sj3);
IkReal x1029=((1.0)*sj3);
IkReal x1030=((0.999999680000154)*new_r11);
IkReal x1031=((0.999999680000154)*new_r00);
IkReal x1032=((0.00158999697256753)*sj3);
IkReal x1033=((0.000799999744000123)*new_r00);
IkReal x1034=(new_r21*sj4);
IkReal x1035=(cj4*new_r20);
IkReal x1036=((0.999998735953206)*x1009);
IkReal x1037=((0.00158999748136648)*x1008);
IkReal x1038=((1.0)*x1008);
IkReal x1039=((0.00158999748136648)*x1009);
IkReal x1040=((0.999998735953206)*x1008);
evalcond[0]=(((new_r11*sj3))+((cj4*x1009))+((cj3*new_r01)));
evalcond[1]=((((-1.0)*cj4*x1038))+((new_r10*sj3))+((cj3*new_r00)));
evalcond[2]=((((-1.0)*x1039))+(((-1.0)*sj4*x1040))+new_r20);
evalcond[3]=(((sj4*x1036))+(((-1.0)*x1037))+new_r21);
evalcond[4]=((((-1.0)*new_r00*x1029))+x1036+x1025+(((-1.0)*sj4*x1037)));
evalcond[5]=(((sj4*x1039))+x1040+x1026+(((-1.0)*new_r01*x1029)));
evalcond[6]=((((-1.0)*x1009))+(((0.00158999748136648)*new_r20))+(((-0.999998735953206)*x1025))+((new_r00*x1028)));
evalcond[7]=((((-1.0)*x1038))+(((0.00158999748136648)*new_r21))+(((-0.999998735953206)*x1026))+((new_r01*x1028)));
evalcond[8]=((((-1.0)*x1020*x1039))+((x1009*x1022))+(((-1.0)*x1008*x1028))+new_r01);
evalcond[9]=(((x1010*x1039))+((x1009*x1018))+((cj3*x1040))+new_r11);
evalcond[10]=(((x1020*x1037))+(((-1.0)*x1022*x1038))+(((-1.0)*x1009*x1028))+new_r00);
evalcond[11]=(((cj3*x1036))+(((-1.0)*x1010*x1037))+new_r10+(((-1.0)*x1018*x1038)));
evalcond[12]=(((x1010*x1027))+(((-0.000799999744000123)*x1008))+(((-1.0)*x1014*x1016))+(((-1.0)*x1010*x1031))+(((-0.00158999697256753)*new_r00*x1018))+(((-1.0)*x1020*x1023))+((x1018*x1024))+(((0.000799998732763011)*x1013))+((x1022*x1033))+((x1012*x1022))+(((0.999998415953764)*x1035)));
evalcond[13]=(((x1017*x1022))+(((-0.999999680000154)*new_r01*x1010))+(((-1.0)*x1020*x1030))+(((-1.0)*new_r01*sj4*x1014))+(((-1.0)*x1015*x1032))+(((0.000799999744000123)*cj3*x1015))+((x1018*x1021))+(((0.000799998732763011)*x1034))+(((0.000799999744000123)*x1009))+(((0.999998415953764)*x1019))+((x1010*x1011)));
evalcond[14]=((((-1.0)*cj4*new_r00*x1014))+(((0.999999680000154)*x1008))+(((-1.0)*x1010*x1012))+((x1016*x1032))+(((-1.0)*x1010*x1033))+(((-1.0)*x1018*x1023))+(((-1.0)*x1022*x1031))+(((-1.0)*x1020*x1024))+((x1022*x1027))+(((0.000799998732763011)*x1035))+(((-0.999998415953764)*x1013)));
evalcond[15]=(((x1011*x1022))+(((-1.0)*x1010*x1017))+(((-1.0)*x1014*x1015))+(((-0.999999680000154)*cj3*x1015))+(((-1.0)*x1020*x1021))+(((0.00158999697256753)*new_r01*x1020))+(((-0.000799999744000123)*new_r01*x1010))+(((0.000799998732763011)*x1019))+(((-0.999998415953764)*x1034))+(((-1.0)*x1018*x1030))+(((-0.999999680000154)*x1009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1045=IKPowWithIntegerCheck(cj4,-1);
if(!x1045.valid){
continue;
}
IkReal x1041=x1045.value;
IkReal x1042=((100000.031999995)*sj4);
IkReal x1043=(cj3*new_r00);
IkReal x1044=(new_r10*sj3);
if( IKabs(((0.00628930817610063)*x1041*(((((100000.158404875)*cj4*new_r20))+(((-1.0)*x1042*x1043))+(((-1.0)*x1042*x1044)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1041*((x1043+x1044)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00628930817610063)*x1041*(((((100000.158404875)*cj4*new_r20))+(((-1.0)*x1042*x1043))+(((-1.0)*x1042*x1044))))))+IKsqr((x1041*((x1043+x1044))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((0.00628930817610063)*x1041*(((((100000.158404875)*cj4*new_r20))+(((-1.0)*x1042*x1043))+(((-1.0)*x1042*x1044))))), (x1041*((x1043+x1044))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1046=IKcos(j5);
IkReal x1047=IKsin(j5);
IkReal x1048=(cj3*sj4);
IkReal x1049=((1.27199757805403e-6)*new_r11);
IkReal x1050=((0.00158999697256753)*new_r10);
IkReal x1051=(new_r20*sj4);
IkReal x1052=((1.27199757805403e-6)*sj3);
IkReal x1053=(cj4*new_r01);
IkReal x1054=(new_r00*sj4);
IkReal x1055=((0.00158999697256753)*new_r11);
IkReal x1056=(cj4*sj3);
IkReal x1057=(cj4*new_r21);
IkReal x1058=(sj3*sj4);
IkReal x1059=((0.000799999744000123)*new_r11);
IkReal x1060=(cj3*cj4);
IkReal x1061=((0.999999680000154)*new_r10);
IkReal x1062=((0.000799999744000123)*new_r10);
IkReal x1063=(cj3*new_r10);
IkReal x1064=(cj3*new_r11);
IkReal x1065=((1.27199757805403e-6)*new_r10);
IkReal x1066=((0.999998735953206)*sj3);
IkReal x1067=((1.0)*sj3);
IkReal x1068=((0.999999680000154)*new_r11);
IkReal x1069=((0.999999680000154)*new_r00);
IkReal x1070=((0.00158999697256753)*sj3);
IkReal x1071=((0.000799999744000123)*new_r00);
IkReal x1072=(new_r21*sj4);
IkReal x1073=(cj4*new_r20);
IkReal x1074=((0.999998735953206)*x1047);
IkReal x1075=((0.00158999748136648)*x1046);
IkReal x1076=((1.0)*x1046);
IkReal x1077=((0.00158999748136648)*x1047);
IkReal x1078=((0.999998735953206)*x1046);
evalcond[0]=(((new_r11*sj3))+((cj3*new_r01))+((cj4*x1047)));
evalcond[1]=(((new_r10*sj3))+(((-1.0)*cj4*x1076))+((cj3*new_r00)));
evalcond[2]=((((-1.0)*sj4*x1078))+new_r20+(((-1.0)*x1077)));
evalcond[3]=(((sj4*x1074))+new_r21+(((-1.0)*x1075)));
evalcond[4]=(x1074+x1063+(((-1.0)*new_r00*x1067))+(((-1.0)*sj4*x1075)));
evalcond[5]=(x1078+x1064+(((-1.0)*new_r01*x1067))+((sj4*x1077)));
evalcond[6]=((((-0.999998735953206)*x1063))+(((0.00158999748136648)*new_r20))+((new_r00*x1066))+(((-1.0)*x1047)));
evalcond[7]=((((-0.999998735953206)*x1064))+(((0.00158999748136648)*new_r21))+((new_r01*x1066))+(((-1.0)*x1076)));
evalcond[8]=((((-1.0)*x1058*x1077))+new_r01+((x1047*x1060))+(((-1.0)*x1046*x1066)));
evalcond[9]=(((x1048*x1077))+((cj3*x1078))+new_r11+((x1047*x1056)));
evalcond[10]=((((-1.0)*x1047*x1066))+((x1058*x1075))+new_r00+(((-1.0)*x1060*x1076)));
evalcond[11]=(((cj3*x1074))+(((-1.0)*x1056*x1076))+(((-1.0)*x1048*x1075))+new_r10);
evalcond[12]=(((x1056*x1062))+(((-0.00158999697256753)*new_r00*x1056))+(((-1.0)*x1052*x1054))+(((0.999998415953764)*x1073))+((x1060*x1071))+((x1048*x1065))+(((0.000799998732763011)*x1051))+(((-1.0)*x1058*x1061))+(((-0.000799999744000123)*x1046))+(((-1.0)*x1048*x1069))+((x1050*x1060)));
evalcond[13]=((((0.999998415953764)*x1057))+((x1055*x1060))+(((0.000799999744000123)*x1047))+((x1056*x1059))+(((-1.0)*x1058*x1068))+(((-0.999999680000154)*new_r01*x1048))+(((0.000799998732763011)*x1072))+((x1048*x1049))+(((0.000799999744000123)*cj3*x1053))+(((-1.0)*new_r01*sj4*x1052))+(((-1.0)*x1053*x1070)));
evalcond[14]=((((-1.0)*x1060*x1069))+((x1060*x1065))+((x1054*x1070))+(((-1.0)*x1058*x1062))+(((0.000799998732763011)*x1073))+(((-1.0)*x1056*x1061))+(((-1.0)*x1048*x1071))+(((-0.999998415953764)*x1051))+(((-1.0)*cj4*new_r00*x1052))+(((0.999999680000154)*x1046))+(((-1.0)*x1048*x1050)));
evalcond[15]=((((-1.0)*x1052*x1053))+(((-0.000799999744000123)*new_r01*x1048))+(((-1.0)*x1058*x1059))+(((0.000799998732763011)*x1057))+(((-0.999998415953764)*x1072))+(((-0.999999680000154)*cj3*x1053))+(((-1.0)*x1056*x1068))+(((-1.0)*x1048*x1055))+((x1049*x1060))+(((0.00158999697256753)*new_r01*x1058))+(((-0.999999680000154)*x1047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1079=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1079.valid){
continue;
}
CheckValue<IkReal> x1080 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*new_r01))+(((-1.0)*new_r11*sj3)))),IkReal((((new_r10*sj3))+((cj3*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1080.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1079.value)))+(x1080.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1081=IKcos(j5);
IkReal x1082=IKsin(j5);
IkReal x1083=(cj3*sj4);
IkReal x1084=((1.27199757805403e-6)*new_r11);
IkReal x1085=((0.00158999697256753)*new_r10);
IkReal x1086=(new_r20*sj4);
IkReal x1087=((1.27199757805403e-6)*sj3);
IkReal x1088=(cj4*new_r01);
IkReal x1089=(new_r00*sj4);
IkReal x1090=((0.00158999697256753)*new_r11);
IkReal x1091=(cj4*sj3);
IkReal x1092=(cj4*new_r21);
IkReal x1093=(sj3*sj4);
IkReal x1094=((0.000799999744000123)*new_r11);
IkReal x1095=(cj3*cj4);
IkReal x1096=((0.999999680000154)*new_r10);
IkReal x1097=((0.000799999744000123)*new_r10);
IkReal x1098=(cj3*new_r10);
IkReal x1099=(cj3*new_r11);
IkReal x1100=((1.27199757805403e-6)*new_r10);
IkReal x1101=((0.999998735953206)*sj3);
IkReal x1102=((1.0)*sj3);
IkReal x1103=((0.999999680000154)*new_r11);
IkReal x1104=((0.999999680000154)*new_r00);
IkReal x1105=((0.00158999697256753)*sj3);
IkReal x1106=((0.000799999744000123)*new_r00);
IkReal x1107=(new_r21*sj4);
IkReal x1108=(cj4*new_r20);
IkReal x1109=((0.999998735953206)*x1082);
IkReal x1110=((0.00158999748136648)*x1081);
IkReal x1111=((1.0)*x1081);
IkReal x1112=((0.00158999748136648)*x1082);
IkReal x1113=((0.999998735953206)*x1081);
evalcond[0]=(((cj4*x1082))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[1]=(((new_r10*sj3))+(((-1.0)*cj4*x1111))+((cj3*new_r00)));
evalcond[2]=(new_r20+(((-1.0)*sj4*x1113))+(((-1.0)*x1112)));
evalcond[3]=(((sj4*x1109))+new_r21+(((-1.0)*x1110)));
evalcond[4]=(x1109+x1098+(((-1.0)*new_r00*x1102))+(((-1.0)*sj4*x1110)));
evalcond[5]=(x1113+x1099+((sj4*x1112))+(((-1.0)*new_r01*x1102)));
evalcond[6]=((((0.00158999748136648)*new_r20))+((new_r00*x1101))+(((-1.0)*x1082))+(((-0.999998735953206)*x1098)));
evalcond[7]=((((0.00158999748136648)*new_r21))+((new_r01*x1101))+(((-0.999998735953206)*x1099))+(((-1.0)*x1111)));
evalcond[8]=((((-1.0)*x1081*x1101))+(((-1.0)*x1093*x1112))+((x1082*x1095))+new_r01);
evalcond[9]=(((x1083*x1112))+((x1082*x1091))+new_r11+((cj3*x1113)));
evalcond[10]=(((x1093*x1110))+(((-1.0)*x1082*x1101))+(((-1.0)*x1095*x1111))+new_r00);
evalcond[11]=((((-1.0)*x1091*x1111))+(((-1.0)*x1083*x1110))+new_r10+((cj3*x1109)));
evalcond[12]=((((0.000799998732763011)*x1086))+((x1085*x1095))+(((-1.0)*x1083*x1104))+(((0.999998415953764)*x1108))+(((-1.0)*x1087*x1089))+((x1083*x1100))+(((-1.0)*x1093*x1096))+(((-0.00158999697256753)*new_r00*x1091))+(((-0.000799999744000123)*x1081))+((x1091*x1097))+((x1095*x1106)));
evalcond[13]=((((0.000799998732763011)*x1107))+(((-1.0)*x1088*x1105))+(((-1.0)*x1093*x1103))+(((-1.0)*new_r01*sj4*x1087))+(((0.000799999744000123)*x1082))+(((-0.999999680000154)*new_r01*x1083))+(((0.000799999744000123)*cj3*x1088))+((x1091*x1094))+(((0.999998415953764)*x1092))+((x1090*x1095))+((x1083*x1084)));
evalcond[14]=((((0.000799998732763011)*x1108))+(((-1.0)*x1091*x1096))+(((-1.0)*x1083*x1106))+(((0.999999680000154)*x1081))+(((-0.999998415953764)*x1086))+((x1089*x1105))+(((-1.0)*x1093*x1097))+(((-1.0)*x1095*x1104))+(((-1.0)*x1083*x1085))+(((-1.0)*cj4*new_r00*x1087))+((x1095*x1100)));
evalcond[15]=((((-1.0)*x1091*x1103))+((x1084*x1095))+(((-0.999999680000154)*x1082))+(((-1.0)*x1083*x1090))+(((-0.999999680000154)*cj3*x1088))+(((0.00158999697256753)*new_r01*x1093))+(((-0.999998415953764)*x1107))+(((-1.0)*x1087*x1088))+(((-1.0)*x1093*x1094))+(((-0.000799999744000123)*new_r01*x1083))+(((0.000799998732763011)*x1092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1114=((15900025.1863751)*cj4);
IkReal x1115=((10000031681.0)*sj4);
CheckValue<IkReal> x1116=IKPowWithIntegerCheck(IKsign(((10000031681.0)+(((-10000006400.0)*(cj4*cj4))))),-1);
if(!x1116.valid){
continue;
}
CheckValue<IkReal> x1117 = IKatan2WithCheck(IkReal((((new_r12*x1115))+((new_r02*x1114)))),IkReal(((((-1.0)*new_r12*x1114))+((new_r02*x1115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1117.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1116.value)))+(x1117.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[7];
IkReal x1118=IKsin(j3);
IkReal x1119=IKcos(j3);
IkReal x1120=((0.000799999744000123)*new_r02);
IkReal x1121=((1.27199757805403e-6)*new_r12);
IkReal x1122=((1.0)*sj4);
IkReal x1123=(new_r22*sj4);
IkReal x1124=(cj4*new_r22);
IkReal x1125=((0.999999680000154)*sj4);
IkReal x1126=((0.00158999697256753)*sj4);
IkReal x1127=((0.00158999748136648)*cj4);
IkReal x1128=(cj4*x1119);
IkReal x1129=(new_r12*x1119);
IkReal x1130=(new_r02*x1118);
IkReal x1131=(new_r12*x1118);
IkReal x1132=(new_r02*x1119);
IkReal x1133=(sj4*x1119);
evalcond[0]=(x1132+x1131+(((-1.0)*x1122)));
evalcond[1]=((((-1.0)*x1119*x1122))+new_r02+(((-1.0)*x1118*x1127)));
evalcond[2]=(((x1119*x1127))+new_r12+(((-1.0)*x1118*x1122)));
evalcond[3]=(x1129+x1127+(((-1.0)*x1130)));
evalcond[4]=((((0.999998735953206)*x1130))+(((0.00158999748136648)*new_r22))+(((-0.999998735953206)*x1129)));
evalcond[5]=((0.999999680000154)+((x1121*x1133))+((x1120*x1128))+(((0.000799998732763011)*x1123))+(((0.999998415953764)*x1124))+(((0.00158999697256753)*new_r12*x1128))+(((-0.00158999697256753)*cj4*x1130))+(((-1.0)*x1125*x1132))+(((-1.0)*x1125*x1131))+(((-1.27199757805403e-6)*sj4*x1130))+(((0.000799999744000123)*cj4*x1131)));
evalcond[6]=((0.000799999744000123)+((x1126*x1130))+((x1121*x1128))+(((-1.0)*x1126*x1129))+(((-1.27199757805403e-6)*cj4*x1130))+(((0.000799998732763011)*x1124))+(((-0.999998415953764)*x1123))+(((-0.000799999744000123)*sj4*x1131))+(((-0.999999680000154)*new_r02*x1128))+(((-1.0)*x1120*x1133))+(((-0.999999680000154)*cj4*x1131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
j5eval[0]=cj4;
j5eval[1]=((IKabs((((new_r10*sj3))+((cj3*new_r00)))))+(IKabs(((((-1.0)*cj3*new_r01))+(((-1.0)*new_r11*sj3))))));
j5eval[2]=IKsign(cj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=cj4;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((-0.999998735953206)*new_r21))+(((0.00158999748136648)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.999998735953206)*new_r20))+(((0.00158999748136648)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.999998735953206)*new_r21))+(((0.00158999748136648)*new_r20))))+IKsqr(((((0.999998735953206)*new_r20))+(((0.00158999748136648)*new_r21))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-0.999998735953206)*new_r21))+(((0.00158999748136648)*new_r20))), ((((0.999998735953206)*new_r20))+(((0.00158999748136648)*new_r21))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x1134=IKsin(j5);
IkReal x1135=IKcos(j5);
CheckValue<IkReal> x1155=IKPowWithIntegerCheck(new_r02,-1);
if(!x1155.valid){
continue;
}
IkReal x1136=x1155.value;
IkReal x1137=sj3*sj3;
IkReal x1138=new_r02*new_r02;
CheckValue<IkReal> x1156=IKPowWithIntegerCheck(sj3,-1);
if(!x1156.valid){
continue;
}
IkReal x1139=x1156.value;
IkReal x1140=((1.27199757805403e-6)*new_r10);
IkReal x1141=(cj3*new_r10);
IkReal x1142=(cj3*new_r11);
IkReal x1143=((0.999998735953206)*sj3);
IkReal x1144=((0.00158999697256753)*new_r10);
IkReal x1145=((1.0)*sj3);
IkReal x1146=((0.00158999697256753)*new_r01);
IkReal x1147=((1.27199757805403e-6)*new_r01);
IkReal x1148=((0.999998735953206)*x1134);
IkReal x1149=((0.00158999748136648)*x1135);
IkReal x1150=((0.999998735953206)*x1135);
IkReal x1151=((0.00158999748136648)*x1134);
IkReal x1152=(x1136*x1137);
IkReal x1153=(x1138*x1139);
IkReal x1154=(x1151+x1150);
evalcond[0]=((((-1.0)*x1154))+new_r20);
evalcond[1]=(x1148+(((-1.0)*x1149))+new_r21);
evalcond[2]=((((-1.0)*x1135*x1143))+(((-1.0)*sj3*x1151))+new_r01);
evalcond[3]=(((cj3*x1150))+((cj3*x1151))+new_r11);
evalcond[4]=((((-1.0)*x1134*x1143))+((sj3*x1149))+new_r00);
evalcond[5]=(((new_r02*x1148))+new_r10+(((-1.0)*new_r02*x1149)));
evalcond[6]=(x1141+x1148+(((-1.0)*new_r00*x1145))+(((-1.0)*x1149)));
evalcond[7]=(x1142+x1154+(((-1.0)*new_r01*x1145)));
evalcond[8]=((((0.00158999748136648)*new_r20))+((new_r00*x1143))+(((-0.999998735953206)*x1141))+(((-1.0)*x1134)));
evalcond[9]=((((0.00158999748136648)*new_r21))+((new_r01*x1143))+(((-0.999998735953206)*x1142))+(((-1.0)*x1135)));
evalcond[10]=((((-0.000799999744000123)*x1135))+((new_r02*x1140))+((x1140*x1152))+(((0.000799998732763011)*new_r20)));
evalcond[11]=((((0.000799998732763011)*new_r21))+(((-1.0)*x1147*x1153))+(((0.000799999744000123)*x1134))+(((-1.0)*sj3*x1147)));
evalcond[12]=((((-1.0)*x1144*x1152))+(((0.999999680000154)*x1135))+(((-0.999998415953764)*new_r20))+(((-1.0)*new_r02*x1144)));
evalcond[13]=(((x1146*x1153))+((sj3*x1146))+(((-0.999999680000154)*x1134))+(((-0.999998415953764)*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((0.999998735953206)*new_r21))+(((0.00158999748136648)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.999998735953206)*new_r20))+(((0.00158999748136648)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.999998735953206)*new_r21))+(((0.00158999748136648)*new_r20))))+IKsqr(((((-0.999998735953206)*new_r20))+(((0.00158999748136648)*new_r21))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((0.999998735953206)*new_r21))+(((0.00158999748136648)*new_r20))), ((((-0.999998735953206)*new_r20))+(((0.00158999748136648)*new_r21))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[14];
IkReal x1157=IKcos(j5);
IkReal x1158=IKsin(j5);
CheckValue<IkReal> x1178=IKPowWithIntegerCheck(new_r02,-1);
if(!x1178.valid){
continue;
}
IkReal x1159=x1178.value;
IkReal x1160=sj3*sj3;
IkReal x1161=new_r02*new_r02;
CheckValue<IkReal> x1179=IKPowWithIntegerCheck(sj3,-1);
if(!x1179.valid){
continue;
}
IkReal x1162=x1179.value;
IkReal x1163=((1.27199757805403e-6)*new_r10);
IkReal x1164=(cj3*new_r10);
IkReal x1165=(cj3*new_r11);
IkReal x1166=((0.999998735953206)*sj3);
IkReal x1167=((0.00158999697256753)*new_r10);
IkReal x1168=((1.0)*sj3);
IkReal x1169=((0.00158999697256753)*new_r01);
IkReal x1170=((1.27199757805403e-6)*new_r01);
IkReal x1171=((0.00158999748136648)*x1157);
IkReal x1172=((0.999998735953206)*x1158);
IkReal x1173=((0.999998735953206)*x1157);
IkReal x1174=((0.00158999748136648)*x1158);
IkReal x1175=(x1159*x1160);
IkReal x1176=(x1161*x1162);
IkReal x1177=(x1172+x1171);
evalcond[0]=(x1173+(((-1.0)*x1174))+new_r20);
evalcond[1]=((((-1.0)*x1177))+new_r21);
evalcond[2]=(((sj3*x1174))+new_r01+(((-1.0)*x1157*x1166)));
evalcond[3]=((((-1.0)*cj3*x1174))+((cj3*x1173))+new_r11);
evalcond[4]=((((-1.0)*x1158*x1166))+(((-1.0)*sj3*x1171))+new_r00);
evalcond[5]=((((-1.0)*new_r02*x1171))+(((-1.0)*new_r02*x1172))+new_r10);
evalcond[6]=(x1164+x1177+(((-1.0)*new_r00*x1168)));
evalcond[7]=(x1165+x1173+(((-1.0)*new_r01*x1168))+(((-1.0)*x1174)));
evalcond[8]=((((0.00158999748136648)*new_r20))+(((-1.0)*x1158))+((new_r00*x1166))+(((-0.999998735953206)*x1164)));
evalcond[9]=((((0.00158999748136648)*new_r21))+(((-1.0)*x1157))+((new_r01*x1166))+(((-0.999998735953206)*x1165)));
evalcond[10]=(((x1163*x1175))+(((-0.000799999744000123)*x1157))+(((-0.000799998732763011)*new_r20))+((new_r02*x1163)));
evalcond[11]=(((sj3*x1170))+(((-0.000799998732763011)*new_r21))+((x1170*x1176))+(((0.000799999744000123)*x1158)));
evalcond[12]=((((0.999998415953764)*new_r20))+(((-1.0)*new_r02*x1167))+(((0.999999680000154)*x1157))+(((-1.0)*x1167*x1175)));
evalcond[13]=((((-0.999999680000154)*x1158))+(((-1.0)*sj3*x1169))+(((0.999998415953764)*new_r21))+(((-1.0)*x1169*x1176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((628.931813867135)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((628.931813867135)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((628.931813867135)*new_r20))+IKsqr(((628.931813867135)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((628.931813867135)*new_r20), ((628.931813867135)*new_r21));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1180=IKsin(j5);
IkReal x1181=IKcos(j5);
IkReal x1182=(new_r01*new_r02);
IkReal x1183=(new_r02*new_r11);
IkReal x1184=((628.931018867892)*new_r02);
IkReal x1185=(new_r00*new_r02);
IkReal x1186=(new_r10*new_r12);
IkReal x1187=(new_r02*new_r10);
IkReal x1188=((1.0)*sj3);
IkReal x1189=((628.931612609052)*new_r12);
IkReal x1190=(new_r11*new_r12);
IkReal x1191=((0.503145290087241)*new_r12);
IkReal x1192=((1.0)*x1181);
IkReal x1193=((0.999998735953206)*x1181);
IkReal x1194=((628.931813867135)*x1181);
evalcond[0]=(x1180+((new_r11*sj3))+((cj3*new_r01)));
evalcond[1]=((((-0.00158999748136648)*x1180))+new_r20);
evalcond[2]=((((-0.00158999748136648)*x1181))+new_r21);
evalcond[3]=(((new_r10*sj3))+(((-1.0)*x1192))+((cj3*new_r00)));
evalcond[4]=((((-1.0)*new_r00*x1188))+((cj3*new_r10))+(((0.999998735953206)*x1180)));
evalcond[5]=(x1193+(((-1.0)*new_r01*x1188))+((cj3*new_r11)));
evalcond[6]=((((-1.0)*sj3*x1193))+new_r01+((cj3*x1180)));
evalcond[7]=(((sj3*x1180))+new_r11+((cj3*x1193)));
evalcond[8]=((((-1.0)*x1180*x1184))+((new_r12*x1194))+new_r00);
evalcond[9]=((((-1.0)*new_r02*x1194))+new_r10+(((-628.931018867892)*new_r12*x1180)));
evalcond[10]=((((0.00158999748136648)*new_r20))+(((628.931018867892)*x1186))+(((-1.0)*x1180))+((new_r00*x1184)));
evalcond[11]=((((0.00158999748136648)*new_r21))+(((628.931018867892)*x1190))+(((628.931018867892)*x1182))+(((-1.0)*x1192)));
evalcond[12]=((((-0.000799999744000123)*x1181))+(((0.999998415953764)*new_r20))+(((-1.0)*new_r00*x1191))+(((-0.999999680000154)*x1185))+(((-0.999999680000154)*x1186))+(((0.503145290087241)*x1187)));
evalcond[13]=((((0.999998415953764)*new_r21))+(((-1.0)*new_r01*x1191))+(((0.000799999744000123)*x1180))+(((-0.999999680000154)*x1190))+(((-0.999999680000154)*x1182))+(((0.503145290087241)*x1183)));
evalcond[14]=((((-0.000799999744000123)*x1185))+(((-0.000799999744000123)*x1186))+(((0.000799998732763011)*new_r20))+(((-628.931612609052)*x1187))+(((0.999999680000154)*x1181))+((new_r00*x1189)));
evalcond[15]=((((-0.000799999744000123)*x1190))+(((-0.000799999744000123)*x1182))+(((0.000799998732763011)*new_r21))+(((-628.931612609052)*x1183))+((new_r01*x1189))+(((-0.999999680000154)*x1180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((628.931813867135)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((628.931813867135)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((628.931813867135)*new_r20))+IKsqr(((628.931813867135)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((628.931813867135)*new_r20), ((628.931813867135)*new_r21));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1195=IKcos(j5);
IkReal x1196=IKsin(j5);
IkReal x1197=(new_r01*new_r02);
IkReal x1198=(new_r02*new_r11);
IkReal x1199=(new_r00*new_r02);
IkReal x1200=(new_r10*new_r12);
IkReal x1201=(new_r02*new_r10);
IkReal x1202=((1.0)*sj3);
IkReal x1203=((628.931612609052)*new_r12);
IkReal x1204=(new_r11*new_r12);
IkReal x1205=((0.503145290087241)*new_r12);
IkReal x1206=((1.0)*x1196);
IkReal x1207=((0.999998735953206)*x1196);
IkReal x1208=((628.931813867135)*x1196);
IkReal x1209=((628.931018867892)*x1195);
evalcond[0]=(x1195+((new_r10*sj3))+((cj3*new_r00)));
evalcond[1]=(new_r20+(((-0.00158999748136648)*x1196)));
evalcond[2]=(new_r21+(((-0.00158999748136648)*x1195)));
evalcond[3]=(((new_r11*sj3))+((cj3*new_r01))+(((-1.0)*x1206)));
evalcond[4]=(x1207+((cj3*new_r10))+(((-1.0)*new_r00*x1202)));
evalcond[5]=(((cj3*new_r11))+(((-1.0)*new_r01*x1202))+(((0.999998735953206)*x1195)));
evalcond[6]=((((-1.0)*sj3*x1207))+new_r00+((cj3*x1195)));
evalcond[7]=(((sj3*x1195))+((cj3*x1207))+new_r10);
evalcond[8]=(((new_r02*x1209))+(((-1.0)*new_r12*x1208))+new_r01);
evalcond[9]=(((new_r02*x1208))+new_r11+((new_r12*x1209)));
evalcond[10]=((((0.00158999748136648)*new_r20))+(((-628.931018867892)*x1200))+(((-1.0)*x1206))+(((-628.931018867892)*x1199)));
evalcond[11]=((((0.00158999748136648)*new_r21))+(((-628.931018867892)*x1204))+(((-1.0)*x1195))+(((-628.931018867892)*x1197)));
evalcond[12]=((((-0.000799999744000123)*x1195))+(((-0.999999680000154)*x1200))+(((-0.999998415953764)*new_r20))+(((-0.999999680000154)*x1199))+(((-1.0)*new_r00*x1205))+(((0.503145290087241)*x1201)));
evalcond[13]=((((0.503145290087241)*x1198))+(((-0.999999680000154)*x1204))+(((0.000799999744000123)*x1196))+(((-0.999998415953764)*new_r21))+(((-0.999999680000154)*x1197))+(((-1.0)*new_r01*x1205)));
evalcond[14]=((((-0.000799999744000123)*x1199))+((new_r00*x1203))+(((-0.000799999744000123)*x1200))+(((-0.000799998732763011)*new_r20))+(((0.999999680000154)*x1195))+(((-628.931612609052)*x1201)));
evalcond[15]=((((-0.000799999744000123)*x1197))+((new_r01*x1203))+(((-0.000799999744000123)*x1204))+(((-0.000799998732763011)*new_r21))+(((-628.931612609052)*x1198))+(((-0.999999680000154)*x1196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1213=IKPowWithIntegerCheck(cj4,-1);
if(!x1213.valid){
continue;
}
IkReal x1210=x1213.value;
IkReal x1211=(cj3*new_r01);
IkReal x1212=(new_r11*sj3);
CheckValue<IkReal> x1214=IKPowWithIntegerCheck(sj4,-1);
if(!x1214.valid){
continue;
}
if( IKabs((x1210*(((((-1.0)*x1212))+(((-1.0)*x1211)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.99999488000328e-9)*x1210*(x1214.value)*(((((198750.06359999)*x1211))+(((198750.06359999)*x1212))+(((125000238.00615)*cj4*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1210*(((((-1.0)*x1212))+(((-1.0)*x1211))))))+IKsqr(((7.99999488000328e-9)*x1210*(x1214.value)*(((((198750.06359999)*x1211))+(((198750.06359999)*x1212))+(((125000238.00615)*cj4*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x1210*(((((-1.0)*x1212))+(((-1.0)*x1211))))), ((7.99999488000328e-9)*x1210*(x1214.value)*(((((198750.06359999)*x1211))+(((198750.06359999)*x1212))+(((125000238.00615)*cj4*new_r20))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1215=IKcos(j5);
IkReal x1216=IKsin(j5);
IkReal x1217=(cj3*sj4);
IkReal x1218=((1.27199757805403e-6)*new_r11);
IkReal x1219=((0.00158999697256753)*new_r10);
IkReal x1220=(new_r20*sj4);
IkReal x1221=((1.27199757805403e-6)*sj3);
IkReal x1222=(cj4*new_r01);
IkReal x1223=(new_r00*sj4);
IkReal x1224=((0.00158999697256753)*new_r11);
IkReal x1225=(cj4*sj3);
IkReal x1226=(cj4*new_r21);
IkReal x1227=(sj3*sj4);
IkReal x1228=((0.000799999744000123)*new_r11);
IkReal x1229=(cj3*cj4);
IkReal x1230=((0.999999680000154)*new_r10);
IkReal x1231=((0.000799999744000123)*new_r10);
IkReal x1232=(cj3*new_r10);
IkReal x1233=(cj3*new_r11);
IkReal x1234=((1.27199757805403e-6)*new_r10);
IkReal x1235=((0.999998735953206)*sj3);
IkReal x1236=((1.0)*sj3);
IkReal x1237=((0.999999680000154)*new_r11);
IkReal x1238=((0.999999680000154)*new_r00);
IkReal x1239=((0.00158999697256753)*sj3);
IkReal x1240=((0.000799999744000123)*new_r00);
IkReal x1241=(new_r21*sj4);
IkReal x1242=(cj4*new_r20);
IkReal x1243=((0.999998735953206)*x1216);
IkReal x1244=((0.00158999748136648)*x1215);
IkReal x1245=((1.0)*x1215);
IkReal x1246=((0.00158999748136648)*x1216);
IkReal x1247=((0.999998735953206)*x1215);
evalcond[0]=(((new_r11*sj3))+((cj4*x1216))+((cj3*new_r01)));
evalcond[1]=(((new_r10*sj3))+(((-1.0)*cj4*x1245))+((cj3*new_r00)));
evalcond[2]=((((-1.0)*x1246))+new_r20+(((-1.0)*sj4*x1247)));
evalcond[3]=((((-1.0)*x1244))+new_r21+((sj4*x1243)));
evalcond[4]=(x1243+x1232+(((-1.0)*new_r00*x1236))+(((-1.0)*sj4*x1244)));
evalcond[5]=(x1247+x1233+(((-1.0)*new_r01*x1236))+((sj4*x1246)));
evalcond[6]=((((0.00158999748136648)*new_r20))+((new_r00*x1235))+(((-0.999998735953206)*x1232))+(((-1.0)*x1216)));
evalcond[7]=((((0.00158999748136648)*new_r21))+(((-1.0)*x1245))+((new_r01*x1235))+(((-0.999998735953206)*x1233)));
evalcond[8]=(((x1216*x1229))+(((-1.0)*x1215*x1235))+(((-1.0)*x1227*x1246))+new_r01);
evalcond[9]=(((x1216*x1225))+((x1217*x1246))+new_r11+((cj3*x1247)));
evalcond[10]=((((-1.0)*x1229*x1245))+((x1227*x1244))+new_r00+(((-1.0)*x1216*x1235)));
evalcond[11]=((((-1.0)*x1225*x1245))+(((-1.0)*x1217*x1244))+new_r10+((cj3*x1243)));
evalcond[12]=(((x1217*x1234))+((x1229*x1240))+((x1219*x1229))+((x1225*x1231))+(((-1.0)*x1221*x1223))+(((-1.0)*x1227*x1230))+(((0.000799998732763011)*x1220))+(((-1.0)*x1217*x1238))+(((-0.000799999744000123)*x1215))+(((0.999998415953764)*x1242))+(((-0.00158999697256753)*new_r00*x1225)));
evalcond[13]=(((x1224*x1229))+((x1225*x1228))+(((-1.0)*x1222*x1239))+(((-1.0)*x1227*x1237))+(((0.000799999744000123)*x1216))+((x1217*x1218))+(((0.000799998732763011)*x1241))+(((0.999998415953764)*x1226))+(((-1.0)*new_r01*sj4*x1221))+(((0.000799999744000123)*cj3*x1222))+(((-0.999999680000154)*new_r01*x1217)));
evalcond[14]=((((-1.0)*x1225*x1230))+(((-1.0)*cj4*new_r00*x1221))+(((-0.999998415953764)*x1220))+((x1223*x1239))+(((-1.0)*x1217*x1219))+(((-1.0)*x1227*x1231))+(((-1.0)*x1217*x1240))+(((0.999999680000154)*x1215))+(((-1.0)*x1229*x1238))+(((0.000799998732763011)*x1242))+((x1229*x1234)));
evalcond[15]=((((-1.0)*x1225*x1237))+(((-0.999999680000154)*cj3*x1222))+(((-0.999999680000154)*x1216))+(((0.00158999697256753)*new_r01*x1227))+(((-1.0)*x1221*x1222))+(((-1.0)*x1227*x1228))+(((-0.000799999744000123)*new_r01*x1217))+(((-0.999998415953764)*x1241))+(((0.000799998732763011)*x1226))+(((-1.0)*x1217*x1224))+((x1218*x1229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1252=IKPowWithIntegerCheck(cj4,-1);
if(!x1252.valid){
continue;
}
IkReal x1248=x1252.value;
IkReal x1249=((100000.031999995)*sj4);
IkReal x1250=(cj3*new_r00);
IkReal x1251=(new_r10*sj3);
if( IKabs(((0.00628930817610063)*x1248*(((((-1.0)*x1249*x1251))+(((-1.0)*x1249*x1250))+(((100000.158404875)*cj4*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1248*((x1250+x1251)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.00628930817610063)*x1248*(((((-1.0)*x1249*x1251))+(((-1.0)*x1249*x1250))+(((100000.158404875)*cj4*new_r20))))))+IKsqr((x1248*((x1250+x1251))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((0.00628930817610063)*x1248*(((((-1.0)*x1249*x1251))+(((-1.0)*x1249*x1250))+(((100000.158404875)*cj4*new_r20))))), (x1248*((x1250+x1251))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1253=IKcos(j5);
IkReal x1254=IKsin(j5);
IkReal x1255=(cj3*sj4);
IkReal x1256=((1.27199757805403e-6)*new_r11);
IkReal x1257=((0.00158999697256753)*new_r10);
IkReal x1258=(new_r20*sj4);
IkReal x1259=((1.27199757805403e-6)*sj3);
IkReal x1260=(cj4*new_r01);
IkReal x1261=(new_r00*sj4);
IkReal x1262=((0.00158999697256753)*new_r11);
IkReal x1263=(cj4*sj3);
IkReal x1264=(cj4*new_r21);
IkReal x1265=(sj3*sj4);
IkReal x1266=((0.000799999744000123)*new_r11);
IkReal x1267=(cj3*cj4);
IkReal x1268=((0.999999680000154)*new_r10);
IkReal x1269=((0.000799999744000123)*new_r10);
IkReal x1270=(cj3*new_r10);
IkReal x1271=(cj3*new_r11);
IkReal x1272=((1.27199757805403e-6)*new_r10);
IkReal x1273=((0.999998735953206)*sj3);
IkReal x1274=((1.0)*sj3);
IkReal x1275=((0.999999680000154)*new_r11);
IkReal x1276=((0.999999680000154)*new_r00);
IkReal x1277=((0.00158999697256753)*sj3);
IkReal x1278=((0.000799999744000123)*new_r00);
IkReal x1279=(new_r21*sj4);
IkReal x1280=(cj4*new_r20);
IkReal x1281=((0.999998735953206)*x1254);
IkReal x1282=((0.00158999748136648)*x1253);
IkReal x1283=((1.0)*x1253);
IkReal x1284=((0.00158999748136648)*x1254);
IkReal x1285=((0.999998735953206)*x1253);
evalcond[0]=(((new_r11*sj3))+((cj3*new_r01))+((cj4*x1254)));
evalcond[1]=(((new_r10*sj3))+((cj3*new_r00))+(((-1.0)*cj4*x1283)));
evalcond[2]=((((-1.0)*sj4*x1285))+(((-1.0)*x1284))+new_r20);
evalcond[3]=(((sj4*x1281))+(((-1.0)*x1282))+new_r21);
evalcond[4]=(x1270+x1281+(((-1.0)*new_r00*x1274))+(((-1.0)*sj4*x1282)));
evalcond[5]=(x1271+x1285+((sj4*x1284))+(((-1.0)*new_r01*x1274)));
evalcond[6]=((((0.00158999748136648)*new_r20))+((new_r00*x1273))+(((-0.999998735953206)*x1270))+(((-1.0)*x1254)));
evalcond[7]=(((new_r01*x1273))+(((0.00158999748136648)*new_r21))+(((-0.999998735953206)*x1271))+(((-1.0)*x1283)));
evalcond[8]=((((-1.0)*x1253*x1273))+((x1254*x1267))+new_r01+(((-1.0)*x1265*x1284)));
evalcond[9]=(((x1255*x1284))+((x1254*x1263))+((cj3*x1285))+new_r11);
evalcond[10]=((((-1.0)*x1267*x1283))+((x1265*x1282))+(((-1.0)*x1254*x1273))+new_r00);
evalcond[11]=((((-1.0)*x1255*x1282))+(((-1.0)*x1263*x1283))+((cj3*x1281))+new_r10);
evalcond[12]=((((-0.000799999744000123)*x1253))+(((0.999998415953764)*x1280))+(((-1.0)*x1255*x1276))+(((0.000799998732763011)*x1258))+((x1267*x1278))+(((-0.00158999697256753)*new_r00*x1263))+(((-1.0)*x1265*x1268))+((x1263*x1269))+((x1255*x1272))+((x1257*x1267))+(((-1.0)*x1259*x1261)));
evalcond[13]=((((0.999998415953764)*x1264))+(((0.000799999744000123)*x1254))+(((0.000799998732763011)*x1279))+(((-0.999999680000154)*new_r01*x1255))+(((-1.0)*x1260*x1277))+(((0.000799999744000123)*cj3*x1260))+((x1262*x1267))+((x1255*x1256))+(((-1.0)*new_r01*sj4*x1259))+((x1263*x1266))+(((-1.0)*x1265*x1275)));
evalcond[14]=((((-1.0)*x1267*x1276))+(((-1.0)*x1255*x1278))+(((-1.0)*x1263*x1268))+((x1261*x1277))+(((-1.0)*x1255*x1257))+((x1267*x1272))+(((0.000799998732763011)*x1280))+(((0.999999680000154)*x1253))+(((-1.0)*x1265*x1269))+(((-1.0)*cj4*new_r00*x1259))+(((-0.999998415953764)*x1258)));
evalcond[15]=((((0.00158999697256753)*new_r01*x1265))+(((0.000799998732763011)*x1264))+(((-0.999999680000154)*cj3*x1260))+(((-0.999999680000154)*x1254))+(((-1.0)*x1263*x1275))+((x1256*x1267))+(((-1.0)*x1255*x1262))+(((-1.0)*x1265*x1266))+(((-0.000799999744000123)*new_r01*x1255))+(((-1.0)*x1259*x1260))+(((-0.999998415953764)*x1279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1286=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1286.valid){
continue;
}
CheckValue<IkReal> x1287 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*new_r01))+(((-1.0)*new_r11*sj3)))),IkReal((((new_r10*sj3))+((cj3*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1287.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1286.value)))+(x1287.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1288=IKcos(j5);
IkReal x1289=IKsin(j5);
IkReal x1290=(cj3*sj4);
IkReal x1291=((1.27199757805403e-6)*new_r11);
IkReal x1292=((0.00158999697256753)*new_r10);
IkReal x1293=(new_r20*sj4);
IkReal x1294=((1.27199757805403e-6)*sj3);
IkReal x1295=(cj4*new_r01);
IkReal x1296=(new_r00*sj4);
IkReal x1297=((0.00158999697256753)*new_r11);
IkReal x1298=(cj4*sj3);
IkReal x1299=(cj4*new_r21);
IkReal x1300=(sj3*sj4);
IkReal x1301=((0.000799999744000123)*new_r11);
IkReal x1302=(cj3*cj4);
IkReal x1303=((0.999999680000154)*new_r10);
IkReal x1304=((0.000799999744000123)*new_r10);
IkReal x1305=(cj3*new_r10);
IkReal x1306=(cj3*new_r11);
IkReal x1307=((1.27199757805403e-6)*new_r10);
IkReal x1308=((0.999998735953206)*sj3);
IkReal x1309=((1.0)*sj3);
IkReal x1310=((0.999999680000154)*new_r11);
IkReal x1311=((0.999999680000154)*new_r00);
IkReal x1312=((0.00158999697256753)*sj3);
IkReal x1313=((0.000799999744000123)*new_r00);
IkReal x1314=(new_r21*sj4);
IkReal x1315=(cj4*new_r20);
IkReal x1316=((0.999998735953206)*x1289);
IkReal x1317=((0.00158999748136648)*x1288);
IkReal x1318=((1.0)*x1288);
IkReal x1319=((0.00158999748136648)*x1289);
IkReal x1320=((0.999998735953206)*x1288);
evalcond[0]=(((cj4*x1289))+((new_r11*sj3))+((cj3*new_r01)));
evalcond[1]=(((new_r10*sj3))+(((-1.0)*cj4*x1318))+((cj3*new_r00)));
evalcond[2]=((((-1.0)*x1319))+(((-1.0)*sj4*x1320))+new_r20);
evalcond[3]=((((-1.0)*x1317))+((sj4*x1316))+new_r21);
evalcond[4]=(x1305+x1316+(((-1.0)*new_r00*x1309))+(((-1.0)*sj4*x1317)));
evalcond[5]=(x1306+x1320+(((-1.0)*new_r01*x1309))+((sj4*x1319)));
evalcond[6]=((((-0.999998735953206)*x1305))+(((-1.0)*x1289))+(((0.00158999748136648)*new_r20))+((new_r00*x1308)));
evalcond[7]=((((-0.999998735953206)*x1306))+(((0.00158999748136648)*new_r21))+(((-1.0)*x1318))+((new_r01*x1308)));
evalcond[8]=((((-1.0)*x1300*x1319))+((x1289*x1302))+(((-1.0)*x1288*x1308))+new_r01);
evalcond[9]=(((x1290*x1319))+((cj3*x1320))+new_r11+((x1289*x1298)));
evalcond[10]=(((x1300*x1317))+(((-1.0)*x1302*x1318))+new_r00+(((-1.0)*x1289*x1308)));
evalcond[11]=(((cj3*x1316))+(((-1.0)*x1298*x1318))+(((-1.0)*x1290*x1317))+new_r10);
evalcond[12]=((((-0.00158999697256753)*new_r00*x1298))+((x1292*x1302))+(((-1.0)*x1300*x1303))+(((0.999998415953764)*x1315))+((x1290*x1307))+(((-0.000799999744000123)*x1288))+((x1302*x1313))+(((-1.0)*x1290*x1311))+(((-1.0)*x1294*x1296))+((x1298*x1304))+(((0.000799998732763011)*x1293)));
evalcond[13]=((((-1.0)*x1300*x1310))+(((-1.0)*new_r01*sj4*x1294))+((x1290*x1291))+(((-0.999999680000154)*new_r01*x1290))+(((0.000799999744000123)*x1289))+(((0.999998415953764)*x1299))+((x1297*x1302))+(((0.000799998732763011)*x1314))+(((-1.0)*x1295*x1312))+((x1298*x1301))+(((0.000799999744000123)*cj3*x1295)));
evalcond[14]=((((-1.0)*x1300*x1304))+(((-0.999998415953764)*x1293))+((x1302*x1307))+((x1296*x1312))+(((0.999999680000154)*x1288))+(((-1.0)*x1290*x1292))+(((-1.0)*x1298*x1303))+(((-1.0)*x1290*x1313))+(((0.000799998732763011)*x1315))+(((-1.0)*x1302*x1311))+(((-1.0)*cj4*new_r00*x1294)));
evalcond[15]=(((x1291*x1302))+(((-0.999999680000154)*x1289))+(((-0.999999680000154)*cj3*x1295))+(((-1.0)*x1300*x1301))+(((-0.999998415953764)*x1314))+(((-1.0)*x1298*x1310))+(((-1.0)*x1290*x1297))+(((-1.0)*x1294*x1295))+(((0.00158999697256753)*new_r01*x1300))+(((-0.000799999744000123)*new_r01*x1290))+(((0.000799998732763011)*x1299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - mara (399e44bdd6814ba8788df7c2dfcc3b34)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
