as per: http://docs.ros.org/hydro/api/moveit_ikfast/html/doc/ikfast_tutorial.html

# installed master branch of openrave
# created urdf file using dummy measurements of mara
# convert urdf to collada: 
	--> $ rosrun collada_urdf urdf_to_collada <myrobot_name>.urdf <myrobot_name>.dae
	Ex: $ rosrun collada_urdf urdf_to_collada mara.urdf mara.dae

# round decimals on urdf file to 5: 
	--> $ rosrun moveit_ikfast round_collada_numbers.py <input_dae> <output_dae> <decimal places>
	Ex: rosrun moveit_ikfast round_collada_numbers.py mara.dae mara_rounded.dae 5

# get end effector and base link numbers: 
	$ /usr/bin/openrave-robot.py <myrobot_name>.dae --info links

# generate IKFast solver:
	 $ python `openrave-config --python-dir`/openravepy/_openravepy_/ikfast.py --robot=mara_rounded.dae --iktype=transform6d --baselink=0 --eelink=6 --savefile=ikfast61_mara_left_arm.cpp
	 $ rosrun moveit_ikfast create_ikfast_moveit_plugin.py mara left_arm mara_moveit_config /home/carrt/Dropbox/catkin_ws/src/mara/ikfast61_mara_left_arm.cpp


# Run the moveit setup wizard and follow the steps using the URDF
	$ roslaunch moveit_setup_assistant moveit_setup_assistant.launch

# update the ikfast plugin 
	$ ./update_ikfast_plugin.sh 
	(in the moveit package)

# to use the default kinematics plugin or if the IKFAST module doesnt let you designate goal states,
# modify config/kinematics.yaml
	<planning_group_name>:
  		kinematics_solver: <moveit_ik_plugin_pkg>/IKFastKinematicsPlugin
			-OR-
  		kinematics_solver: kdl_kinematics_plugin/KDLKinematicsPlugin
